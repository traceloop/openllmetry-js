{
  "log": {
    "_recordingName": "Test LlamaIndex instrumentation/should add span for all instrumented methods",
    "creator": {
      "comment": "persister:fs",
      "name": "Polly.JS",
      "version": "6.0.6"
    },
    "entries": [
      {
        "_id": "35e4e3d1b757b5697226d1cf6efde888",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 95,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "95"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 463,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"Where was albert einstein born?\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 10196,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 10196,
            "text": "[\"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\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-03-04T12:35:59.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "nQSFqeDoNXuPG0Pf.3wPeTomTlad9XUpJjdh8AoRPTg-1709553959-1.0.1.1-27lXE1skOtMjwTyXt98VSLWjyyexrDIz9GE8fQwT.QNVQP53VdsLEzN0BaY.MU65XlU4wIcvd8KZCqw_xAjWUg"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "2kDAHmFR1ud8diK.7R3AsHvoD_7yJU9sdpLBBepQAuY-1709553959085-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 04 Mar 2024 12:05:59 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "23"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_3f9ebf5d086222f4253835c062894b1f"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=nQSFqeDoNXuPG0Pf.3wPeTomTlad9XUpJjdh8AoRPTg-1709553959-1.0.1.1-27lXE1skOtMjwTyXt98VSLWjyyexrDIz9GE8fQwT.QNVQP53VdsLEzN0BaY.MU65XlU4wIcvd8KZCqw_xAjWUg; path=/; expires=Mon, 04-Mar-24 12:35:59 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=2kDAHmFR1ud8diK.7R3AsHvoD_7yJU9sdpLBBepQAuY-1709553959085-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "85f1bcd2d9fe4c3d-MXP"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1066,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-03-04T12:05:58.799Z",
        "time": 404,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 404
        }
      },
      {
        "_id": "b46a7ea6d50c48e02d597c41e83be54e",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 1357,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "1357"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 471,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"gpt-3.5-turbo\",\n  \"temperature\": 0.1,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Context information is below.\\n---------------------\\nAlbert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy. /*\\n * Copyright Traceloop\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License. * You may obtain a copy of the License at\\n *\\n *      https://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and\\n * limitations under the License.\\n---------------------\\nGiven the context information and not prior knowledge, answer the query.\\nQuery: Where was albert einstein born?\\nAnswer:\"\n    }\n  ],\n  \"top_p\": 1,\n  \"stream\": false\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/chat/completions"
        },
        "response": {
          "bodySize": 452,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 452,
            "text": "[\"H4sIAAAAAAAAA1SQO0/DQBCEe/+K1dV2ZCdy7LijiEhBCoQQBULW+bKxD+6lu43IQ/nvyA8SaK6Y2W935i4RAJM7VgETHSehnUrKc7albPskN+X6rVm/FNlZPKeyO+p2uWFxT9jmEwX9UjNhtVNI0prRFh45Yb81K9JVni9W+WowtN2h6rHWUbKY5QkdfGOTNJvnE9lZKTCwCt4jAIDL8PYZzQ6PrII0/lU0hsBbZNVtCIB5q3qF8RBkIG6IxXdTWENohtgPqkFPsJYmEEoD3zxAY70BaeBV6Rge0WtuTjM24dfbXWVb523TZzQHpW76XhoZutojD9b0NwJZN+LXCOBj6Hf4F5k5b7WjmuwXmn7hPC/Hfez+pXc3m8ozssTVH2pZRlNCFk6BUNd7aVr0zsux7t7V86YoSrFsFjmLrtEPAAAA//8DAPDujBP4AQAA\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-03-04T12:35:59.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "_GiytcR_rpao8AXfO6c3hkEFY2bks6XC9c0NllXAAJs-1709553959-1.0.1.1-BCIjjQWenZa3Thd2ypba.BawaPSWgXNqmeh9skhkZvPbTlofAHIHoBIQnCHRQ1LT4Q9dtMHI1qQtNT5fkGoikA"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "eBEwteTQeWdibP2mRG9kH2oNIjLhQDjDqbbuONKa3lw-1709553959939-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 04 Mar 2024 12:05:59 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "cache-control",
              "value": "no-cache, must-revalidate"
            },
            {
              "name": "openai-model",
              "value": "gpt-3.5-turbo-0125"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "454"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "160000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "159689"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "116ms"
            },
            {
              "name": "x-request-id",
              "value": "req_ec48913955b4c237af97b7a8e41a3881"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=_GiytcR_rpao8AXfO6c3hkEFY2bks6XC9c0NllXAAJs-1709553959-1.0.1.1-BCIjjQWenZa3Thd2ypba.BawaPSWgXNqmeh9skhkZvPbTlofAHIHoBIQnCHRQ1LT4Q9dtMHI1qQtNT5fkGoikA; path=/; expires=Mon, 04-Mar-24 12:35:59 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=eBEwteTQeWdibP2mRG9kH2oNIjLhQDjDqbbuONKa3lw-1709553959939-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "85f1bcd57eae4c3d-MXP"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1210,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-03-04T12:05:59.218Z",
        "time": 693,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 693
        }
      },
      {
        "_id": "c84ada703c8ad9f08e8e196367e1079b",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 7868,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "7868"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 465,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"Albert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy.\",\n    \"/*\\n * Copyright Traceloop\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License. * You may obtain a copy of the License at\\n *\\n *      https://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and\\n * limitations under the License.\",\n    \"* See the License for the specific language governing permissions and\\n * limitations under the License. */\\n\\nimport { context } from \\\"@opentelemetry/api\\\";\\nimport { AsyncHooksContextManager } from \\\"@opentelemetry/context-async-hooks\\\";\\nimport { LlamaIndexInstrumentation } from \\\"../src/instrumentation\\\";\\nimport * as assert from \\\"assert\\\";\\nimport {\\n  BasicTracerProvider,\\n  InMemorySpanExporter,\\n  SimpleSpanProcessor,\\n} from \\\"@opentelemetry/sdk-trace-base\\\";\\nimport type * as llamaindexImport from \\\"llamaindex\\\";\\n\\nimport { Polly, setupMocha as setupPolly } from \\\"@pollyjs/core\\\";\\nimport NodeHttpAdapter from \\\"@pollyjs/adapter-node-http\\\";\\nimport FSPersister from \\\"@pollyjs/persister-fs\\\";\\n\\nconst memoryExporter = new InMemorySpanExporter();\\n\\nPolly.register(NodeHttpAdapter);\\nPolly.register(FSPersister);\\n\\ndescribe(\\\"Test LlamaIndex instrumentation\\\", async function () {\\n  const provider = new BasicTracerProvider();\\n  let instrumentation: LlamaIndexInstrumentation;\\n  let contextManager: AsyncHooksContextManager;\\n  let llamaindex: typeof llamaindexImport;\\n\\n  setupPolly({\\n    adapters: [\\\"node-http\\\"],\\n    persister: \\\"fs\\\",\\n    recordIfMissing: process.env.RECORD_MODE === \\\"NEW\\\",\\n    matchRequestsBy: {\\n      headers: false,\\n    },\\n  });\\n\\n  before(() => {\\n    if (process.env.RECORD_MODE !== \\\"NEW\\\") {\\n      process.env.OPENAI_API_KEY = \\\"test\\\";\\n    }\\n\\n    provider.addSpanProcessor(new SimpleSpanProcessor(memoryExporter));\\n    instrumentation = new LlamaIndexInstrumentation();\\n    instrumentation.setTracerProvider(provider);\\n    llamaindex = require(\\\"llamaindex\\\");\\n  });\\n\\n  beforeEach(function () {\\n    contextManager = new AsyncHooksContextManager().enable();\\n    context.setGlobalContextManager(contextManager);\\n\\n    const { server } = this.polly as Polly;\\n    server.any().on(\\\"beforePersist\\\", (_req, recording) => {\\n      recording.request.headers = recording.request.headers.filter(\\n        ({ name }: { name: string }) => name !== \\\"authorization\\\",\\n      );\\n    });\\n  });\\n\\n  afterEach(() => {\\n    memoryExporter.reset();\\n    context.disable();\\n  });\\n\\n  it(\\\"should set attributes in span for LLM instrumentation\\\", async () => {\\n    const model = \\\"gpt-3.5-turbo\\\";\\n    const prompt = \\\"Tell me a joke about OpenTelemetry\\\";\\n    const openai = new llamaindex.OpenAI({ model, temperature: 0 });\\n    const res = await openai.chat({\\n      messages: [{ role: \\\"user\\\", content: prompt }],\\n    });\\n\\n    assert.ok(res);\\n    assert.ok(res.message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    assert.strictEqual(spans.length, 1);\\n    const chatAttributes = spans[0].attributes;\\n\\n    assert.strictEqual(chatAttributes[\\\"llm.vendor\\\"], \\\"OpenAI\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.model\\\"], model);\\n    assert.strictEqual(chatAttributes[\\\"llm.top_p\\\"], 1);\\n    assert.strictEqual(chatAttributes[\\\"llm.prompts.0.content\\\"], prompt);\\n    assert.strictEqual(chatAttributes[\\\"llm.prompts.0.role\\\"], \\\"user\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.completions.0.role\\\"], \\\"assistant\\\");\\n    assert.strictEqual(\\n      chatAttributes[\\\"llm.completions.0.content\\\"],\\n      res.message.content,\\n    );\\n  });\\n\\n  it(\\\"should set attributes in span for LLM instrumentation in case of streaming response\\\", async () => {\\n    const model = \\\"gpt-3.5-turbo\\\";\\n    const prompt = \\\"Tell me a joke about OpenTelemetry\\\";\\n    const openai = new llamaindex.OpenAI({ model, temperature: 0 });\\n    const res = await openai.chat({\\n      messages: [{ role: \\\"user\\\", content: prompt }],\\n      stream: true,\\n    });\\n\\n    assert.ok(res);\\n    let message = \\\"\\\";\\n    for await (const messageChunk of res) {\\n      if (messageChunk.delta) {\\n        message += messageChunk.delta;\\n      }\\n    }\\n    assert.ok(message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    assert.strictEqual(spans.length, 1);\\n    const chatAttributes = spans[0].attributes;\\n\\n    assert.strictEqual(chatAttributes[\\\"llm.vendor\\\"], \\\"OpenAI\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.model\\\"], model);\\n    assert.strictEqual(chatAttributes[\\\"llm.top_p\\\"], 1);\\n    assert.strictEqual(chatAttributes[\\\"llm.prompts.0.content\\\"], prompt);\\n    assert.strictEqual(chatAttributes[\\\"llm.prompts.0.role\\\"], \\\"user\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.completions.0.content\\\"], message);\\n  });\\n\\n  it(\\\"should add span for all instrumented methods\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n    });\\n\\n    assert.ok(result.response);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    const spanNames = spans.map((span) => span.name);\\n\\n    // TODO: Need to figure out why this doesn't get logged\\n    // assert.ok(spanNames.includes(\\\"get_query_embedding.task\\\"));\\n\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"llamaindex.open_ai.chat\\\"));\\n    assert.ok(spanNames.includes(\\\"response_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n\\n    assert.ok(retrieverQueryEngineSpan);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.input\\\"]);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.output\\\"]);\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.input\\\"\\n        ].toString(),\\n      ).kwargs.query,\\n      \\\"Where was albert einstein born?\\\",\\n    );\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.output\\\"\\n        ].toString(),\\n      ).response,\\n      result.response,\\n    );\\n  }).timeout(60000);\\n});\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 30104,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 30104,
            "text": "[\"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\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-03-06T18:02:12.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "M9DT3y3z4Ha70FYuq3IFT7mSsuUOWTRUF2B7d901bgk-1709746332-1.0.1.1-Zr1fEWTvZS7GBwhtEKNYKGiZB.LHVY5C95xfAmth7vCQff3iH2xCprVcwYHUvzmrntCwn6eBxLvZGx7ng9_9eQ"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "d0zrMqnWyU10YZ_wfyFoJa5FJbQZmMnHD.NBW9NP12A-1709746332965-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Wed, 06 Mar 2024 17:32:12 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "58"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_f30918dd29660d8ffa5194ca3bbbb540"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=M9DT3y3z4Ha70FYuq3IFT7mSsuUOWTRUF2B7d901bgk-1709746332-1.0.1.1-Zr1fEWTvZS7GBwhtEKNYKGiZB.LHVY5C95xfAmth7vCQff3iH2xCprVcwYHUvzmrntCwn6eBxLvZGx7ng9_9eQ; path=/; expires=Wed, 06-Mar-24 18:02:12 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=d0zrMqnWyU10YZ_wfyFoJa5FJbQZmMnHD.NBW9NP12A-1709746332965-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "860415738992baa6-MXP"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1066,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-03-06T17:32:12.588Z",
        "time": 632,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 632
        }
      }
    ],
    "pages": [],
    "version": "1.2"
  }
}
