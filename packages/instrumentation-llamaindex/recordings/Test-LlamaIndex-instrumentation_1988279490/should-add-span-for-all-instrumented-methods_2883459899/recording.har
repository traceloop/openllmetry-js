{
  "log": {
    "_recordingName": "Test LlamaIndex instrumentation/should add span for all instrumented methods",
    "creator": {
      "comment": "persister:fs",
      "name": "Polly.JS",
      "version": "6.0.6"
    },
    "entries": [
      {
        "_id": "35e4e3d1b757b5697226d1cf6efde888",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 95,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "95"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.38.3"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.38.3"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 463,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"Where was albert einstein born?\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 10227,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 10227,
            "text": "[\"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\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-04-29T14:20:36.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "mu9ksiuHr4fjxxeIAz1RfWrlIcEk4ufahh.wdCfJI_0-1714398636-1.0.1.1-mmqb1CZcK2ejATCIEem9_tdTdT_QsLXHUUgraA0yomcziuNHJg4mQHCagWzGKIoN.VnE0eEhTGeA.PJH14JDZg"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "XTSb5SD5Qa.Dt5BzHkH.1xIN8vAt9RLR0rEhanz1YxU-1714398636001-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Apr 2024 13:50:36 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "19"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_8d91c4fb6ad8ccf4df9549565cf8a0ad"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=mu9ksiuHr4fjxxeIAz1RfWrlIcEk4ufahh.wdCfJI_0-1714398636-1.0.1.1-mmqb1CZcK2ejATCIEem9_tdTdT_QsLXHUUgraA0yomcziuNHJg4mQHCagWzGKIoN.VnE0eEhTGeA.PJH14JDZg; path=/; expires=Mon, 29-Apr-24 14:20:36 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=XTSb5SD5Qa.Dt5BzHkH.1xIN8vAt9RLR0rEhanz1YxU-1714398636001-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "87bfc311aa894bf7-MXP"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1066,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-04-29T13:50:35.716Z",
        "time": 378,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 378
        }
      },
      {
        "_id": "48cc1de00a51c7d50d16024465156f5a",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 11774,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "11774"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v20.9.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-retry-count",
              "value": "0"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 493,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"file_name: essay.txt\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/essay.txt\\n\\nAlbert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy.\",\n    \"file_name: instrumentation.test.ts\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/instrumentation.test.ts\\n\\n/*\\n * Copyright Traceloop\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.* You may obtain a copy of the License at\\n *\\n *      https://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and\\n * limitations under the License.*/\\n\\nimport { context } from \\\"@opentelemetry/api\\\";\\nimport { AsyncHooksContextManager } from \\\"@opentelemetry/context-async-hooks\\\";\\nimport { LlamaIndexInstrumentation } from \\\"../src/instrumentation\\\";\\nimport * as assert from \\\"assert\\\";\\nimport {\\n  BasicTracerProvider,\\n  InMemorySpanExporter,\\n  SimpleSpanProcessor,\\n} from \\\"@opentelemetry/sdk-trace-base\\\";\\nimport type * as llamaindexImport from \\\"llamaindex\\\";\\n\\nimport { Polly, setupMocha as setupPolly } from \\\"@pollyjs/core\\\";\\nimport NodeHttpAdapter from \\\"@pollyjs/adapter-node-http\\\";\\nimport FSPersister from \\\"@pollyjs/persister-fs\\\";\\n\\nconst memoryExporter = new InMemorySpanExporter();\\n\\nPolly.register(NodeHttpAdapter);\\nPolly.register(FSPersister);\\n\\ndescribe(\\\"Test LlamaIndex instrumentation\\\", async function () {\\n  const provider = new BasicTracerProvider();\\n  let instrumentation: LlamaIndexInstrumentation;\\n  let contextManager: AsyncHooksContextManager;\\n  let llamaindex: typeof llamaindexImport;\\n\\n  setupPolly({\\n    adapters: [\\\"node-http\\\"],\\n    persister: \\\"fs\\\",\\n    recordIfMissing: true,\\n    matchRequestsBy: {\\n      headers: false,\\n    },\\n  });\\n\\n  before(() => {\\n    if (process.env.RECORD_MODE !== \\\"NEW\\\") {\\n      process.env.OPENAI_API_KEY = \\\"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\\\";\\n    }\\n\\n    provider.addSpanProcessor(new SimpleSpanProcessor(memoryExporter));\\n    instrumentation = new LlamaIndexInstrumentation();\\n    instrumentation.setTracerProvider(provider);\\n    llamaindex = require(\\\"llamaindex\\\");\\n  });\\n\\n  beforeEach(function () {\\n    contextManager = new AsyncHooksContextManager().enable();\\n    context.setGlobalContextManager(contextManager);\\n\\n    const { server } = this.polly as Polly;\\n    server.any().on(\\\"beforePersist\\\", (_req, recording) => {\\n      recording.request.headers = recording.request.headers.filter(\\n        ({ name }: { name: string }) => name !== \\\"authorization\\\",\\n      );\\n    });\\n  });\\n\\n  afterEach(() => {\\n    memoryExporter.reset();\\n    context.disable();\\n  });\\n\\n  it(\\\"should set attributes in span for LLM instrumentation\\\", async () => {\\n    const model = \\\"gpt-3.5-turbo\\\";\\n    const prompt = \\\"Tell me a joke about OpenTelemetry\\\";\\n    const openai = new llamaindex.OpenAI({ model, temperature: 0 });\\n    const res = await openai.chat({\\n      messages: [{ role: \\\"user\\\", content: prompt }],\\n    });\\n\\n    assert.ok(res);\\n    assert.ok(res.message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    assert.strictEqual(spans.length, 1);\\n    const chatAttributes = spans[0].attributes;\\n\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.system\\\"], \\\"OpenAI\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\");\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.request.model\\\"], model);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.request.top_p\\\"], 1);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.prompt.0.content\\\"], prompt);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.prompt.0.role\\\"], \\\"user\\\");\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.completion.0.role\\\"], \\\"assistant\\\");\\n    assert.strictEqual(\\n      chatAttributes[\\\"gen_ai.completion.0.content\\\"],\\n      res.message.\",\n    \"file_name: instrumentation.test.ts\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/instrumentation.test.ts\\n\\nok(res.message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    assert.strictEqual(spans.length, 1);\\n    const chatAttributes = spans[0].attributes;\\n\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.system\\\"], \\\"OpenAI\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\");\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.request.model\\\"], model);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.request.top_p\\\"], 1);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.prompt.0.content\\\"], prompt);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.prompt.0.role\\\"], \\\"user\\\");\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.completion.0.role\\\"], \\\"assistant\\\");\\n    assert.strictEqual(\\n      chatAttributes[\\\"gen_ai.completion.0.content\\\"],\\n      res.message.content,\\n    );\\n  });\\n\\n  it(\\\"should set attributes in span for LLM instrumentation in case of streaming response\\\", async () => {\\n    const model = \\\"gpt-3.5-turbo\\\";\\n    const prompt = \\\"Tell me a joke about OpenTelemetry\\\";\\n    const openai = new llamaindex.OpenAI({ model, temperature: 0 });\\n    const res = await openai.chat({\\n      messages: [{ role: \\\"user\\\", content: prompt }],\\n      stream: true,\\n    });\\n\\n    assert.ok(res);\\n    let message = \\\"\\\";\\n    for await (const messageChunk of res) {\\n      if (messageChunk.delta) {\\n        message += messageChunk.delta;\\n      }\\n    }\\n    assert.ok(message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    assert.strictEqual(spans.length, 1);\\n    const chatAttributes = spans[0].attributes;\\n\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.system\\\"], \\\"OpenAI\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\");\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.request.model\\\"], model);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.request.top_p\\\"], 1);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.prompt.0.content\\\"], prompt);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.prompt.0.role\\\"], \\\"user\\\");\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.completion.0.content\\\"], message);\\n  });\\n\\n  it(\\\"should add span for all instrumented methods\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n    });\\n\\n    assert.ok(result.response);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    const spanNames = spans.map((span) => span.name);\\n\\n    // TODO: Need to figure out why this doesn't get logged\\n    // assert.ok(spanNames.includes(\\\"get_query_embedding.task\\\"));\\n\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"llamaindex.open_ai.chat\\\"));\\n    assert.ok(spanNames.includes(\\\"response_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n\\n    assert.ok(retrieverQueryEngineSpan);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.input\\\"]);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.output\\\"]);\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.input\\\"\\n        ].toString(),\\n      ).kwargs.query,\\n      \\\"Where was albert einstein born?\\\",\\n    );\\n    assert.strictEqual(\\n      JSON.\",\n    \"file_name: instrumentation.test.ts\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/instrumentation.test.ts\\n\\nname === \\\"retriever_query_engine.query\\\",\\n    );\\n\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"llamaindex.open_ai.chat\\\"));\\n    assert.ok(spanNames.includes(\\\"response_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n\\n    assert.ok(retrieverQueryEngineSpan);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.input\\\"]);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.output\\\"]);\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.input\\\"\\n        ].toString(),\\n      ).kwargs.query,\\n      \\\"Where was albert einstein born?\\\",\\n    );\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.output\\\"\\n        ].toString(),\\n      ).response,\\n      result.response,\\n    );\\n  }).timeout(60000);\\n\\n  it(\\\"should build proper trace on streaming query engine\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n      stream: true,\\n    });\\n\\n    for await (const res of result) {\\n      assert.ok(res);\\n    }\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    // TODO: Need to figure out why this doesn't get logged\\n    // assert.ok(spanNames.includes(\\\"get_query_embedding.task\\\"));\\n\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n    const synthesizeSpan = spans.find(\\n      (span) => span.name === \\\"response_synthesizer.synthesize\\\",\\n    );\\n    const openAIChatSpan = spans.find(\\n      (span) => span.name === \\\"llamaindex.open_ai.chat\\\",\\n    );\\n\\n    assert.strictEqual(\\n      synthesizeSpan?.parentSpanId,\\n      retrieverQueryEngineSpan?.spanContext().spanId,\\n    );\\n    assert.strictEqual(\\n      openAIChatSpan?.parentSpanId,\\n      synthesizeSpan?.spanContext().spanId,\\n    );\\n  }).timeout(60000);\\n});\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 39911,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 39911,
            "text": "[\"H4sIAAAAAAAAA4xZzY4exxG7+ykWe1YMFutfr5KTHQmBgsQ5RIcAfvmgdxHHw17A+Q46jHp7uuuHRXJ+/eHl5fWfP//t61++v35+ef37t399f/10nn356ftPr59f/vzDy8vLy69v/z5Wfv3Hz1+/fPn2y1/flr/957dfvnz99+vnF/z25H+L/rvT+f0JPwIGK7Lz02+P8SMsud7kp+faKke55/Mx4Wk+uhjNjYY/N+7Zcm/doc3r90vfdmi2kVmy2A==\",\"LZNusjiN5hPyOgsHQi4XtcB1uT23DnmZtee2yY0t05Pgc1ufScw+HpKoyZZToZhmV8AQ7dEhd4B3bEXM8ykRYfv7SJ6nk8vKlvtujrvsupPeppt6c1qDgIrexjzD6MYcjSK5wKNC3rKQ8NGMMYNXvBHlidbkDrKgdefZvtAw2hZwBdc3atJDYsAEbPUIvWyEXswT3Ge8gjXDyusOiJl6FkKsser59zbMSUkXbBOckGOZbZ2fPMVWE7ptob1MDmBlvtp5vQjNF2IHSXtWDL1z1p+72mbulNzVJpBo7dBd99VgMU4ONNqWk2UCCFbMLVlqg/A1uUCTbG2w8KqWo+YiQ4u40Hvh2Xr4chQJCmRrCVlPF+9bbfS4K/htTVyJOYDmtQoFYC1KCsYzB1Jw6NPewWfJc3yaK/nOOZH1C+Qw3tC1YZWPmj/tVRamCPXWcRoat9htgU6sZZk2vS3T/CojGLKT1OMOI+1KZVjHSCXD3NuLcogI+Lna82m1RQy0bKdZc2HPrOU+t/XsygnFrogPJkC2W68JHsAiaG0ybhZeldL5WcNuXUkzCBxgbbYUZJDDbEARKWqsfHSUZ2E1a527C8XEIHO2ZN+KKmrdAW2FjNahSyuz5f+TduvhUmeL7/Y4dThN5FKqzHxOKK6+vgrnfTaMrVIPmCMTF6mZqrpGvKWzWXbRovTRyoPHnvPJ5B7PNsnxrAbRy7m8QBgJMrRIUX4AXgIGmvX26nQgZjaEecRMj0SRs/S1uvDV4EKfzHLCGVcMWbZ1ZaE9FRu3cwc6S8HiyA3MWb2t7+LBUFNwxUyGQAWxFuM6ofegsNJSVA8vHn0uJSFEZdbEKHfK8bjI0+5GjhTB4QIzI5lp9l4YSiB4nQsRi0nXM0TNYTpPRpTlWxqtMsci5Ai1e5itzKeo7lFWOxupoOTjHnsNEsupUJa1MzrH2JGm2gKWSOTF6E7LIkZBwtjZQn4ctdGlPKEPHl26Z2Amf29GzgjY020z+mJUU+swRUTrgcQA807u5ahxDvBEEpa1i2DBwW5z4RK27cHSQ2lnvGN3winNHdH3yuxyN63WjDCuguYb84NQJKYRJYyYGV0S0yM446oAGzPsqIKaNCiKMK06r2LrsDStiZ3dizmjeI2HPYq37SoJmnSaAWF5oU2je5U1DtyhdNg4k6V8vrg7I5O+6oJ2hM1CVZLxqGXhshW7WX6N82rs+CWz6KE1ZRybo7m1W63LW/XTdpSv4nisQyWNbQU8lbf6eCpH9jrqQVUl0F3pytfyzD2/uBUCo0oFpGWVUsGPAd7ikDmxM3ACHpqIDIsou0b3esQ1egvbXhcYbqQxZQ8bnhdetCZ7GReFt+hRzWWdODbDM75jF2iZncSvWlN27iVhzDxsSxwKbDn9SlrHOMQOIY5i1ch69dJkqYNLFwXj23YSr9XMrRv1DyGHwjYIo7uQf56BpMPgYw1HzzB5lR/BviZh9T2puuCkrPIyHdKQSvy9xidLrBBYX54FY3bU/eKxIuaCg3WmmiYk2ByFs/Up0ThB97mb3voYNyrvvSzjGuaL4kr4h+mmzMc8tnAz896aUY9p/Igf4dBE5V6ntZ4zT6+mnwrV8dhTRpkXh54jeMX4qezWhnXGhSSHARtFpJmt78Vq0RU1qilZb4pOY9hYKiHCYngz+5rzkx1sbbv0sMbMCmmNzsxUbMqD3DaXYdCbaoCCeRSL9qa7I3T+w5eoS74eT1CdnwO7SWUF/eZrarirYtQC4KHlVx2i4F6hdzBnO3BlLH3TS4ZVo5yjsT2ia28Ol7Vpf4Sm76Fhu6vA6py+Ymunx1iXFcLMlA==\",\"QvZhXSzsTBjf63MAm1Y9FzlNnxXoPPPM/TZjPjLFCG43r48PG44pbfLT/M0/8JzfwHPHdXietBgzLs0xDFWp1seKUZzr7oMpkvBClYkWQxerXd2CjydNTSRH8LfyHE3xANtz0QoCWQ+u8O5cce0yQD6CSXhubFyGqSWEq/CMCjVGj5EFHWkfFnww2i/Wz2Q05PRudXle5sGjm+RN01l9TXQ/zozyBMQlG3i+A6Q6RR86hAQdFX6ZOptzMcOeJ6l6x2hyR8MS5rajUPSxD3dqMF1S/XEP2ZtKuqby+erS0crQ96hZreGM4k2EPdpVT9o0Oy8v36auLySnW3BF5ums4cf/AAAA//8=\",\"hFpHjsNADPuSevn/xxaKczEZYO+BY49GEtsRrLFmhlJ79ighQBcfkhOiugrntlulB+1f773ecCII1xs0DO/CxyJi9WJdWtdmAQXpbFgn8lefjHLSTV3DSOf4oerYpCn9v+XZxmScHOUoUvFqMnAQmd5p4SCxg4IAFlS6Euto5ucIFTPNqMWKWXhZOd3kPnMAWYOksF36i3bomYUs9piV6dKBS7qa4FbvDgdlxD3X0N44XWHwCKPsXYOnDerQtCMZg5b5WtM5LTgiuj0EcLtZ5UzSmpYuTX7ARuCUPBznGok6YnYqWUpRNUd2AfR1tPQglFxXxZXeOcworXzm5XTdmJTxAnnyZxzhB7j71DW0FY3wUOkhRNCWL4H6u3xkBh569+c4GfGWD4CAPjqbgTCFVtdSDazD1JG43FvJNssgo+8f/xyfz6oKU1Cz7mCE5s4JJu1OZyOzHsboVHoX7vITH6HXPXtWobbnXOmRY8qgnKz1npMne8YqdbOXjRqmRSaqmvMEe1yFcIiPKrbzVofS91ZkvWIdnwEelYtZEeuKQVW9JVwLFQOyZ3/T3a8xmoVKt/ep6tTOFlZKxuR5vrp04j63xOqf+fVchXNnhQlBJTseBCU+V/+MEKJ76pG3GxA6tdsi9s7aExSwkDVZILlyXOTLdcJJOjmbLh2ML3W9vU/tkEtWULj14Aa5QWFoMm6qom1+SZUoIDRqbjNDW3THx1AP04l2w/cnyf0xyEMnkW1qi3cT9uwLUJDOc8W9yEz9k0Z6RtXZO4glSqeVrlfNTVHcbqj/PYm7DRMgtx7eUgicPjmiUrIPN3cTZof0hqBqvdlJq4Egw4O8TtXFpW123gNqWjG2uSAluJeuJ2IZX2FJLFUbswCr2Qpnpe03prC52nWUGMiGJ2Uf6sJAZGz3USOS9X4GDCxNSLQws3FKEFrMhXMA5u6bFj2sqNKa/KzoEGc0KaeXw7F2x5DJKAeewwU1LffIFEUavNoCbW8tuZoog2tYkmGvOr5GZbjaJowDr9RWWkt9bRjoVPr92ZJb20rwW9On0cG6bxh7kenPh/lxIxT7qoaolaasBRJcK8kjw5Dtcdnm3Z7mTbqFjnrTtdU6sY4JYp8LivqZTyXMqJzcVUzZVkgbB0wrN5KTGy1phauqr3eK7UW7dUFk1G06CSseREDBsaYu20b4bTI0USzzrPObgnSJs9lBHay6N+NI1ZoWJr1qz1FGKHBeFYZdyiZJOmbR8w8AAP//\",\"jJ3Nim3LcYRfRdy5oPI/U69iPJEljAy2Jx4YjN/dxFr7GnVGtfroDgSHpn/2XrsqM/KLyN8B3hkJ3cVpQJHtYmkDNSABsKieNsZ8b+snrJ3U7mwQTbtxwG+wz2aUmrGr4JtkBpV4MDTaL0N3xK7gILsqESt404zeYAUYoErXyxi1GFsKvClRr77Wc/Y/6gwuYjqFO+kHSdnJfTuLDW6G/QZkqBmPBRwiCo2X7IwdmnpZzh4wSiUoPv6EQIfZMwQ8WEE8F67yIk5NTrRvWFfOmOUGTVGcn/DQnxir93WYnN3RnYLmsphQNfTatioXDCZyT/nwzjZP6dxaPPk+R4vDIpmcOcHMrkIUjN34zFd5430YMJAjBboVLA3hICBelYiITFdiGfN00Jda+JCyfJ193Wfw0BtS980VUP9iI1V5UHCuJ88hWjg10ZgBz6Gu4fZGpBw/Rdy2m2/866i72Uke3IhPEdM0rVuWhKJVSh2kTdfmICNmc07omawWLHdtqgX/DT/0qTa6ZRNJE619/HiiLaanyEronS3AtkWT4afD2cDiVM/QULCyZav+Moq6znfFeXOG3EYB+Nw2jRJcJvbUAXXhiV1OKFBQOSReqo7tsxaqBBU0XVm7Ln1UdKXTM9Akk30jpelZa9CwxFXhc7g7Bjk12kvsMA1PESJGX75gPy8RZiN7OC4A87ZVY9ys1g+TPIPyb3eooJoJpsiJIlHDojuDvjbAJpIEbJAw1q91oxUBT9dG205O9/QvWFXAjUSVJV3NOUEin1QV/CYkGVWSnCcuYhI8ScgLp3OdEz5uCyH3WXDNJYpm4uwb5XQ5ofSRHvuI/sYH1AFxiSbQACRpCo7u2WYX8THQlv1HUeEVAA5OE7pD8bJrGxXmDQ8cOfbak/XHPHXCCNKXjJYLm+16mfXUoJHeNp8cZf/VQ/s6Uecng3t2DGij9/d9nvVtFbrh2aqWVkKI2kzTqwANFhaoPRIYuBxXmeTojfl9u8guVwcWVK465jRCgQBZw76VeEq+H6STl0crFZqRymnDhbq+NjE7JcDWBnf8njs2eA1CqV1kd+3m+B+dupB+Dg8AzCzOfk7xGQTn/JOw90IcOoz+nPSnU9hUfQK7JEei1GmSrrOhNCw4DhXkIYn4sRSWb7wB+Guwew9/M+D6DfZedAYbheSzSzs8OgQbCb4wSFQAttFD+lgbcL4lH/s0Ca8SEhNJtBL8uCRZgePaZsfBpRIbfYjRplnp0+85m5rL+MySESkJOveqY4h5V/BKtYV1NBk0sriz5PJcw1t/Toc9an9p9GDeRprodBaZC8fClIyUhinCRpEVJqYiU0vrmQ3kPRcWWWRx2/0aNYYrBXAn+cxCbFaZq6HlTcAJMNT4iku8KlCdjcrboFOhIdGZ0PmVGgV+iiFpGl6fYugHnx6dLXOIKw0W8eTLduucwc1jDKOV5tZvNAxCwVY1O3NAh2zHIQ4Fcs9qsXNNcUscljVxEAb5Yu0hC2icQJT0++oIZvtk0vTJYtPQaiU/kw/TDX/jcVQnN9WdfqIxw/vFfTbggo5rmnDJAE27PE8QDrkPw5CbqixqRN5yN0JlC4TsL/nMMSN2fyXHJLm9OxYh27VTsKkdYqLdueBQTExJiT8+Z7jES7iui3SOy8z0fvyw1vtd36mGF4Hk1FPmC3L6vWti2Fyj93RWcKkr6RxwgyvVICVKapGK5NSeR1xnTUcMDeW+IfOJ43DiSMFLrk85mO6zy+Q7wyBukGvoBfPW5L/hpDqJHV0ncxs5ryoWzJKtrLlV7fSDU24bNbjGJKDDs8gp8nay1xAybQ==\",\"UgUWBf/Oell/3WKjeEl6swOsC10HDu/5jcFNbLObwjWRNJ1UmOnpg38aJ/iu0R0lOmMCQQqaun6VVT61RJSQOvmIzfqzJoEqSyd3SXU9TdtLtrVdaiyDanbVCaMBgrvUSRrFtGNGTWK5VwjhE3YymROAu9GdxKXjdoI+NJi1FX2aMXCcItwhUe0RBxfxFYN7j7Qx46EHWWw/L68X0auwlnkSnidjBEieryDiq8vD30mvDLkR/3h9FD4sJIARI9YhumnAs4Gml4hC1g+/MNVR2+2jnnN5anlQrjaJTwk7bWKcEEeoWZlsis5JmtBqsxcB9dhQmIl4RPTOPjDEUiwy4maCw8Od5GA/yGkgUw0bej98zUmhccUEyArjkJYkH9dBpwtaax215hPrc+7Qb2rVypjeAwGgnifKqVRehrcPymMHqO3SXsrGyHMGU29sxjKrfbZSDc+cnj3ylRjIGftFBDSfQ8ZUga/mF87kB8iK7bZtxbCTwIo6cUj8LCiP250FpRTcye4MDC1p/Iw7M2Dz4f5NeIJ5usZ34dmZO/IEzmClu8YQxOAEvRyD3TYuHg9Qh3QzIPmFmHX8WqwuvmDvFvcxwbzMDxu87HoOGjTM1tUCeWdOKvqBpLSVGCRyZJKkeqOzHV4ZDh3CeMLp8DnV+ODkJshWg/eKyLCQxA+P7edFOJO6P2QGhZKQQ0aKfqc41EkYuF+Pig6+SI6Z0u0gPO3RsTOD8Gqpk9Vd8VF3wnXBD9H0aVBPDM0C4GL3X8nJEgv1WM/YN3NgcgBepwmvTFZ99kU6dVKIZdT0iTpkm8Ihtg37iN7TaRaV04R8K/Cvkx3XGo55ehgTkw6nPoC8u5+eVhDatqOM5pDkof0S+MTHzONY/PvvICPZQh7AAaqw37OxIceDeo1Qttfjpz58mbv6vvQKRBL1PPYOwgj5aI11jDpADqFvcLMLaKEdLZrPKlBX9pTj6ibxzaAKbsFCEctFqg9zrZ+BV4LIJvMOv4piBaPObnRFmKp8CMzkVJoopE3EL9SbV6QJwj7MSqRCgACglowGhA/aCpV8f07hj2DEGphP0OuVCBe6sH8npsn8w+MvhYlhU2GQx9p0c98eaEHXAVp6tpJD3fvrAHeR/XOipK2S3gDMJbZ8iSK6ZxemWmfGD6XKIKhwCy7TLXQqk055B3neQV8ZVJ8fIPf313oSJghnDJQkNOcIoeAufXI8qRgQhPRRBah4yejPLQMqv5435LLk9r3gY6/7z5rjuXEXIIhNEqGDtGMAbcsC7zhQsyl70BIU4h60DBRZfrthNKDJn5rUBiCgGgp3nlm4WSnB8SRhkPfKXCMkjQY18JA0kcx3XYCiw75DmUSBEdN5aqleO/skLInP7gQXLHs+kfbV8PI6lyZQSuwCC3Op5jk4nK/k1br1Ypi0spMRE7gSBtUqnzjSfTNOh+SPaMWHikMi4SaHMC7mZ0FFdLxJ2ljYyuf9LaGm9n4rmKKBJaXu7nUC1EV2QpEKPUKfM+72wZ+W7Gbimlgnj9zZ1O9H4GimIZiIYjATv2BSR9RqG1P07t6xLQqdjuePP3+tyffDjRV/zitmvgBlqhH2lsg9HkJxL+6PRx2cfb4DNE8SQh+ZRUlJvGUMQ/6Sc4mhUA7/Ayna2xMI8wdfUfBN+259TGzUyAHjqjm/1jig+ogwEpXAgDrZTWzS9oScQoje8RyCtuqHuJ+PjQoxn3ZR1pCpywlTidbMSdyTZj8bkcP/IKTqHjzhYeihdGceZrAcywHoH6HXOJzlUjIdGKyYzUe5cemJMPmizLPN1X3qDfW+UAmGGpsZhgApQ3zsUw==\",\"thJdb0OfFBV4VHd1YNVfs/je38FN5TBzDgA5aLCI6VvuIWKi9d7DL0p5/Mh5SJ+kyeQgL4MkBT1N2RRSAGV3WDs+q2eneVc26erMjX1nejyGbkl3xRCZY5RRh7ni7tAViWtb5ghY2Wn+iARkp4MN0e2zKXjwNUlqHjBhL7JofpMb9zpV6Gnm7IDT08ggpFHbKsbeH7VcMc+k7YmapJrl4sU3MWsCyQ7AO98+ooTCQNGwp7/KDp9Y0I6z4KmrwR88H2p/euCnKshGnmj7lesgqPB7Kjaul/ldWZ9t/mhxOmTkSV27KDq4TWmcNay9jiPFq34qQJ7zAeDHCoIDV9ObVEsv162lRsbkDkzDYR42FwzV/OxLLHIOYRP6gO07QdTATBH7XMg42BZ4JN7RaKU1US/+9In7JBnX2cG2aCWMyoNrnIJUWdhPsYcfBxIS4Yn6AtxAlDESbJsENQwpezvkOAbmj98F/yFGfKjXxYlHfy3F0Hx6DEWezwZCb2kl3zA1F1bvM10P8sWj0zvMX586O04IyldwQCsQpKSZrD/NC20fsWZ7GBJTTi8P1P3yO3Du7LEVGCqxHZVJYQ4fARGCGrGGt19rkCBOkt49EF6eW/1QtY3ANTJr+uk4tiaCZhW2n+bdHL+qJLoWihAXeQTP9RHTmSAm/YoaiitMjTsQqPscXjhwEj9M2EVu6jsrl5d/fIpX0Nh0qJ40qa+ZkZ/DFqztcvrGYA69Y1oUQClfASC/9n01WXJ2bieQXvIrVTSZXnkE8vukTi3rF9hxN0SUUTaUO5TnVTSRN/ZdPQF7HCk911hAoG+gHzZkEP4wz2tmLRgF7xhfa4xGqO/BpeF1tpvMkKi+fhrcDaRMIY4dtPD6xsipiWYPdcnmDaGcs8BJVPB76aSds1eATHwdjH6zt+E67fh2xA6niiQNuK75Tt9kNsYzqaNoQvKU/IP8M/zFumfULKV9ThYZIuK9BOXHHkDqnO3+urhP3joLqaT7LYPQRHUWqpRD9efZkzt5QFC6IEu+miueOrXUKmn900WXQ7/HO2NyJpVasJgqniEfqDv08oHeU6Fpz3huDxEiQJrKgXsCReXjw9hnXzmS9qmoG9z8W6PCagAKtiOjzrfk8mNM7SJthcDsj58mS34m/7+L4UBjUsPosCSFd2GGftyJOV3uiY9BWeDip6FbdPjWJm8NKlIuy6jWQ1xeNs3GG5Pawysq/IwMIxzZZ3/Gr4/N/Rm9+kUeVqM2TCru1k6zx2tO8wlBKiMHNVraLoMNwYEUODdlLTsAB33vqf0wWk+TfoJ7RXvL0be4VwFWLUYWEs2zIderrqOgcTdBaOAgyREOPMqLxyglRQu+oPUeI6/64L7b+2owxtlLbK4+bS5wPmeaQ8aKX/lZrVj0QWN0iKWkeot17n4Oppad8Wh1yewKFPGEnkFuzt7rbijn45USn1gR6ll20MWHaelDsDh8PV/nvx+HRCCNgfKOLnabwpV99jKx7OO8JMkKayLJ52WYiVLYj6GqpOyyPY97QQTECFEezXCuz2Mo43S++149xcoaWhmDhEAGbx9DRXHCA6wH+QPw/gmKpGVkZEp7KuUyPnZ0wnmcMupmJON78/DmBkxpG46HbYFHZ0MxbQjJ7q2j3gQkO/Bub2EPyiCpKhhVB2PPTyDmlkwR3UmKes4+sp+Io232egyUuaFUStvQeuDFXdtftnwIsrF324OICsrUwHKOdt5M4F3UBGgWxzx8oxEhO5EcS8CbliRrJpY0nb5GHD7OnND91sFvQ9IbbWh8v7Jq/1uYBAlngkucss6ucUDsQHzPerkEH5zE5w==\",\"jhMldhzWP/ARg2je7EOo+hHKybjG0RoaYkIy0KzIUAsg/cQM7KNjTww+OMFI779MyoP6KERCYJpJ5Z+Z70TFp/zD1oQfwxPfr34mTU6xtktm+j4f+lm6tZ9bmGp9z6lmGpjrNozM2TZZAUh+Ng1LeyY/U48Cc02/lWjGBl4ai4CWNAJntW39QPVppxiX3t47EHJtrDBh/Jgc14aBpe7zhAuX93edLh6Z4hal4tME2tue0OCJIW1WzdyOs8vsFl+O8rN7nwg+O/gb2kGn0FIZySLnmtpBxN86EO51CwIgeZlkYs0lmW+7sE9Ytn3jmSltIRpo+GWZLbbR7ldxROSCNAOR3zCGO+plZzJgDbXeEhI58mTg8KTdPMdDvrbE76towUgzOB4KaUGa4F54FLirqDcLObw23Mdn+w4opugV4rBdafdQiew0sqTsRRyv1gwVrX86Ob9NbDFkne6eANmyhzfLUh77yz9gt8deTfRsf6Hx/Mj5qml8Z9g6SMkvKnKQZcOIg+8PVnjT+lkOhvmI4thxvJVBFaPdhzTfeetYbG7cKKBjRxttrhlkZxIKODocxRAZ8hVR/9ZR+c2iOERD0s6U6xoRsaqqrXdaQMPUi8iNKmxPoLFsnWTy7OJT5ABAm6ApW2vSfCpP005GbaF4FbP4mp56z7T6HEEID1zSP9TdPb49VV5eRYQjgnyJMqua2FqpJzrzDXiRzPXHb22HMqeSEaKnCsfch6nzWwrXq3EwR4y56K76aYLwqYVRodKiO9SNNKeTyiKEyNrZvA488fhGwbEkRGzDFAl6bK+NgqyF4N2N9QTa07lk4X3+5Z+f///f9wv+5/OPv/3nn//tr//yX7/96Q+//fXf//zXv/zlb//xr7/9/j1++9t//OWv//3bn/7w/y/X333Rn/7wTwtb7NhBSs+qowtph+vDL8CVmVEANtamkskbyYGHeiozbH1mJrTBg3FoLUYIFFChA4vLbpKxM4oSSOBR7jVkU3fHChHy8U4QNQyH8d7WKwVyYBe4JViasAcAPhjI73Z+7Evs/Gdy50Kr/cLGnQaVo6ecpIPBFuh12T3zTJr2YtUvbVXDhHNvx7JngLGLSHsM07zLYmhTDZZANzUdgkwDbjoKBe7sUYWbUSqCYdZA+2POYLuEUr14WA0PVMbGCXHaAK5WcEgAy6FiLc/egAdr9I5TwqIbpWgrwLh9SDtCPldsYQMgAK33xrrI3Hv1kFifQ1unYOMRnuInjAK8Fhh7cXcRZcfGabfFI/qm0O3+7L6ifaDafXi1D8AgSrHopJ0bT1BaMzrRWPFhtIZZLysgEg0CBecrmGZ6aB06Ow15UTKQY0XnkCUMGx6RZ0TaqrSQbp1Pfu3es4ZNIHEJGMU4k8xfiKzcIlfnxtufzBD+pqpP5MNGZbAE8KxxkePuoItCJA7d92ihx8hLNS3Iyt0j2uDWbaxrH8bYEmqcuSzLd/rhy3J7qyGlfc1O/Ey51Xf8AkRsmrKgsiEaZTDN2AFIjt0R1LX5ExC7KQ7YT3bbZpOpe08uctV2KjO61qSFGNfDDUH+tqWpJ9Y5ORkUYVpBvFsPrbgHMsm6lIfZ16jMj+dLLpsTPL2IzD7PDiglwV4Cc1+OzLbaQaggBHewdWZA9d72/onTnMYDE+3mZj11JwchEd8oYxk+tqasa6QRXVRehDJZ7BFqpzdFm3xzZAEX0eatm5NdtBsxDfux9roPrFQlpRgAs/F+HHFipbGv0HZba2dGd6cog+2au16GpjEsV+WzPWKfIlqTQws0Esl6e5nWCDTD9x//DwAA//8=\",\"jJ3LriU3dkR/RdC8DHKT3CT7VwxP2hKMNuD2xAMDhv+9Ecws2ScWS7dGAgqFW7rnZJL7EbHi/37ZkAneEZ1NBFW4SFQtkdh3bM9usdmrBadjbS/lUMF2LLs8SOYZZJLqQdaCmbavzV24vttRPfhSmobOhBlpO0Bxkj5whTPHdSUDP3/Ern6iqLbkskp6XR+SRtfxSUjojs+39Hl1hiZsPnWQvp9yJj3MC7uYtT5xos9rPtKRffKDS13kgC99CRPvribYTDrLLm6uO39GFb/eU833CbinMT83EStds0tfnEj3Y4W7yjWnV4RWT9i7p8A9rISPrx5mYileKMZXDeOrPO1iXHbURKWFxlQyjcFA0FWBXRxdWS5MG5BpDwiAkrqw4Wvb+Rnl+D3mutJU37XNcWWyonK3y4PW0Qo7qGjNUKAkB7oVRbOUzZUSUwF3wWOTPBQtIf9nX09lHw7LEypvYXh1IChYLQgilX4eidTZPWxch+RE7yGTmCOLox6SIrPKRbTDAECAh/5JIHnGBbLB+VV+zNe0dG+NYjZ6SA1HP9+aIWI2ogpCrnLn0vUT7oQIdI0w/b6UghEk8CUJDFbqtSVWoFNTI2IM90kWD0i+szdYFh8TCua4l3tceXK9e7epiI/lOjOleWy/E3bv6QV+PWvVhRtlI59aLaWv4+LEIcEBLKWCDAXYLwlq57J7id79olxdSycUyVu6fSdLqHFiLTqr/NheGIQQP6gbhaEA6WlyhiwZPcbwda1E2m47XwtkfpJ570TrJ/6z9136Ukd3R8XWS29OOn2nfGNFIq6eV6Q9iKYIXPGFbK/ovtQ9YeqfvQ+PMKwK+PTKRs1D7gHdgawqAK9VqZsGshHEobeiXtTJRGWj0eVNXK8R1YU6pskEZK/xJARh4b3HJcBG70O6QqrJUOXjKA2O8IDFmKTea8jXaFASIIJ1dsp7yFzW3MqP9kLK+qWX71DyIicixkuj/eYb+9TMx7XXe0gg0cldU4GKp+6wS+wfU4DrcL2+6GKD38xS1UgR56oDxJ4uFSu8d60NhP08uYS+g0vVrVCWjpEVRM/o0bfrydBnvLKchtRiBbsXqC4k3cLKQ4OcqgrPx59HIWyLMhlzMAiSRaPite1itfowQt1tlxmsEU0WziSRglGrUJdIrPQ19JMEzEX2EYsjCHhoHOZDlsJIFplRdsFl3zUU9TNVy6z056VpLksM5GWieTLUWoKHrYXY9r6wCzy6MRPaB3kEHcP8FFc95Vm5BBYpLnxGQ9eujxHDE10N6UuTJmYjdagx5Cjzlmjs6uFfguFN2GyaUrM64VlCsg5OSqeuN6/vbGz/7fWNJPzoo/fppiJVLIFEQgVwNI/K7nKiDsARepNa3g8OsYgZ2iedi+FIb+WpNmTNvdTXYcq1KYwxZLmAxLoXKdl8Q7YVGg0eTGjaGWSESgQFY6bYL7h+xGtHKVVyFPVVaB92gxo5tPmbAPKntiwQmivOEErgsXqHfGQojA++yjjerIab4nN99sDxqjCUUPbLwISPXNr+grjbFNMKs4iT/ugkOkGTR2c455oxfJad0nBAhaK2LFwrqekExnWKYd99k63AVZO8WmMh/0DoGpRzMRVGjKwuoQ6j58ScfX3iWp/LQooCwiWncp4drCUlFVRLsc6hht+iBWpzjmneBakmfkQni4ljO8cusTqWliETNn5sV3wiaPQprQO4qhLeeMO3W7hmRmQ0j4qsoarN5JetR/9EdLxvrr4zn4eMnYF8Yd5B7/Fbc4FWpPCTMl2UGG3NjsVI13xyfyVfeGzKe5CxfEhB0A3XoVlE9w==\",\"heOoWZAPqrAu/IAllg4iIIpIj+2nlgWCflaqp5q0Py7uVQyH189aHbfm4/e9+8DdID9kIUGsttIx6enH3I9NlExy3tD3UOIE0RdaDOCPZf6rF4PvEqOUe5DWqqf3SfGm2tThNprYoag7IsLl3tRaZGmGAipqq/OLdf8DKQh1WDb41BjR+fsyA4+OTKYq88qAXEDSelAku0QoNjRsMz4Vk89ssC4oNrWBKBPzm7lQPQu/3WlYkF2jIZmhbUZr1SpkkBUzgsghbyNmYwRyrjnBn6ojAiuJOpp8+q4cG3MUV9rH7G1wW7QluIWQ2grPRy2qtwMwCYnBsMzeWnRg8F3m6pekBDHQvbfbgnIwsHqP2S8VeV3+WOuamgtZl3NVLyelL7iEoGqQHLAxh4NZJbxn2avi8NjOfZ8+6yX+cmWBGg8qrqfhbZ8A0HdmIsOHa4s0AIO0MzRWa3haFczmCtsy+55ggm2NJ6wDHJrmIBpFSOdafS46uoN4dTfk9BdA3hhv7VkCvlE8Et1BjNEVsOOvqgj8nsx9LwzHsYsNtFNje9KbdrMjQS77QUnATdtjpdpqEnwKn/XCXV8O0iu9ktwsamDbg4TAdDCRKAQIwckhbz2Rf5q6+ZelBMu5OR0b2+dbVf7U4paeNtau6RVhV3AIQ9e2RB1uWm29D2A9aszZ0HT0VteGcVhz9ZmOWaxzCvVYITEQ6Wd7nabpHdfY4nJX7vgjMQHIk4+woC0D1KcIO1oo9t0qaaj83yePyCc53YdDKkk7xZAjC8pHrY9vUUxje0yKTkEUn4rxcOOgxhSfZsDXwTRzeZKGklsYzqMW+UJ59fL5Oz2kXtYjsgdvL3VlHdjQPVyLpqZ7CKfWUPsO3PsQEMgXXJmJuWHvq8Cee1CUMZAtp3HsxqeoTIZh0y1J1gXgw4QuJjLULuXEq4fviosZje1FJIdZmZ0ohDnFaPA1jYwtgCx3hofE1ErSlT3YAT/EASkvKYq1jeC375EVbbnaZpRVYFgRNR8b/pNN/PkXBZdAQbGGE4ijzl4Dw6kqTe1y3WjPyL0hY+8KH18u1RX2gtiyIjVIQsIc24EedYxVJsxCqt0rUCnK4KHwlEuQeoZdSEh5IvscjLWpEpI0Euf+Ua8PRA7k7qMvP3VkYWFBemJMadfRh+L+gpqtU4OuwUci6SJ0cy2YR/asQAj2kOlpAxgdFSryKvIwGMUij+x+mUENMiBb00DY6yItsamH7RksdbShGp1e8nYyWrEL2jP9w53zIH64xe8zvbdbCnPA2mqODoufdF05uQsSuM1rmFYC8VJajFdgv7NMDKrK0hCOVFz5/hnZ1LMA3ZpryOMBaGdvzkJtXahdxEZo0AZPzlQXTzai0qwumz9pd9IVUGvN2PAeDqVth29tWtM3Gd5fKR114vsSihjLYmUpu9JSNWehc0C5AeilVPhDb6b/r9XaF6uR+6Lyeb5l4CHBdkmkEEAuaneHWXduzayYb9qF5/E1186g3UfKP+3HrXpXPN2itWhJjYdxt9agEwWVCByuX3w32S72sEP81QOO9AQH6Xd6gfRulTNkxEi1x/xz7ffbKa/0+c2uIkF6PyU2hqclj/Pt+viF9va611h9Yb80ong/XTW1hsTyXOwDKuLZ25wQvutFwoZvTZEgsTPib6UrEE0SpeAvpZARY5df9rsbQ9Ya/wjraliISiK+8XbVeiRYflctjcPH14dGGUe3jndWsY9xCQme4aWlTv7a/NdVcobH7qr7nxu835DoEI7TslXxJbrKsj7NG98pQKsBZjdFm6WDoc9aECYmuPxgzPkW5dsrR4kOXAxSMw==\",\"93bPcOiRcxnBEiXLUe1al3/mQX4vG9vo/uvug7H0oe/UyDcJU9YcJRipHroI/S1FD/sKixRl7QsP7Cv+mMeWiinTTfWMGc+zC5Psas2fMJc2efg7iSiH4YoLfm4wWZXLXGAE0oSz+qKyac1YWI8pr64WX8VsVfZY/R2+nO82FAzv8RCKA0ie/rOn9FFuOAi5QF0lMTfU97I4ByR1EripifDxURnY67rr6h2VK3YDY04xGOHjX5mFHhnRFTbMubpq/bfKdolD2BI3uYt27Lk3ujilPF6s28KCwbArBrqvCFOobEy0lkQ1AfjsFMPLvQ4aCxfy3a4/WGjwhKRkyDtOqkxqXI3I553tEwXwCjC2rMMuLhVKwJXI3E2JntMGMDGKKcDEmEX1e0TUoLhp1DFMsTRmj/QyWe55basn3MDb95EhmOxyV2Qy7AZqyNf8x95UO+VVE+2ai2JuIslncKUGCDYvIWN9BVeHVC7ACvUZ0zF4d9ez3sweVDWJdOTgXIqLf2zuaSHDDnbHV5tXNoVoYQHv4t5H0BKKxIDW1ceCb3+utYMr7I52xl9FXfcVsBJljzaIkLIvZ6qVJsD+8GXKkU77qTl1G/i4ubWyp3/cfU0dUfCgyK0zydFK11KfSeGavhQ/EWt2GMYKTD3qHjM6vPsuZn/t8PImuRZyHegGxmcyUuHROE9XX92L+qWZmoum91BoJtqZB1XiXtbj7vSJ7RExbwBXy0byQSpmgoKxmq5KrdqcboSC5RJtk07iWzWq56i6EajO2QVQ9Hc8YyYscYpC5Z4wjwsEAvHdpzvwdezj3JU4OsttmyERK2gttaEFrmXP6cQaTSI+u/DnOKlA/4aCIhBgXed5mL19KKsmP265hgZRUkOqO58pSdHjU4DaZK5xFFbdKk+BCNNCADSSs9KA/EgqBson96gB7XwInUZPem45Yp0c22gfiC5Nlh/Jew7Qclr2MX0YDiXgC+avMPMWRRNw8XEvYHK10pgnPWpzavoRlW2wM+uUYLlwbiyaUVs/YR64Ngky5kNfckKXAfIWeGnj+NS3OLAdllqWQBI5pVGYlNwJ1HLbbXVwcWJqyUD1p2LuoTrQNhirH5XXXgVpobNBiJwxRvoZIxAApYwn/Bp7rSJpcwGDr2n7gEwejeQZ+3w604oEp/BIJFFWcjQ0OYXltchKiLlqQU2tTE8IJHpHhz9BhBEaIScHHEoM3UgJUuxp+0IjdW+JXyZQJqYm0rmtBsm3QM/kFsOr/u167j0nZFvbtQtaxQPIvObudInn8Xn5OPSAef2LGWO1RaP7RfYfijDLxtjwmCvsu/0B7Kdv5W4jl1NkPjQes+7ZUdscii7ADTcDn+DeAZXrmIoD983LZS3ahtoRgtildsM3O8pYwP/3zEQRI1OKVGRkdIlygiANl5u9ycRR4ZTHV/7tjzhAr5xDSFMC+ureHi93rDmRkKMecqRPMUKLewhiZTktxP5J08vojRCYZlHEIgv7YgTTjUglRkT1zlZ8IxgYQt/ZAKd5lu5qFeVujuWFPkR3L1zlUC2x9uwNxuNdRnErrzYB4eFc5QSgenG1x9jQYYl+KkEnuBHOEXpGA3LgIVL9Zr2VyblzfHiF+9SzIw4C56p0goyTbi245R2KU/YxfW4orjXOb9wpCCe16DQ++T7gMi6dzJMSmzKZ/HxdMUZtsZD8o6uhJshcmmd7faAEQyw24MJ7kaezE3kq6mvFMvEyfCkralKteaJht61hFB4sEaxPA1QiQWEjvYq1nHe/cxWOoTALZyYi3E9Unktoo0+xZPHMLc+CaLs0Ih6kye7bChk1Wp3Rjg==\",\"GkS0ioHMCfzCILwf2Q3+v2IG1AonxAurpZWrbKYo9D0uF/zeOaE4zxzo2LTcGsySkDcz2yVJJ5G8pIWRdyZC/GbDiOE2zL+aF9rSSwDn6jpCRuaQnQfJa3I7U7+HiPWeC7OL2cfayKupQusGPgKxeh1o0BSE42WaeBDgiM0xlqu8BPuuGQhJUtfG7k6oXmCKIqGNuMp2wQJ44YlakyJ9S9pKnDs64Rh3I9Smiaf6GvoE0Bxf261ceh9dE6Xwk02T2KHes2lVhi1s5Lc5Wo+2lS3jKLHorTNpNCq2rAo3LxjxKnOOZXnbO5GPlAlZ2X0YEWXqwvShlMKFVxs/AwdTDHF6NE3NEaPzu+lKCfAN/tXgKQizr1RgQXzPktmDQYFXXbsWliUgT9m1dLeN7myteuBIqoT2OazOF0TdXMXTVxadsvGEjPYOREkx3itEP9onX6co39ovmt0K0xcr0rFDc3BGfo7oyexyPSm7EmOedVEeJLmeN3y9bpU2nQX5sVAivEtYr+LlsJdRz0c7x+iQb42+CIrsc59EAGCWbp4TJYTKNOPq/r3mYOU5K3eGkjeOhXF4oHqXA3IALC27vBoItH0KpwWOdRxUBNrk1Zf+RW9cL2ZnJcN2ZlVpRJtAcNzIP7OLueW/bq66BrOvBzTYU8Ncn04qqnag2WiCSO8FLNVI0u5RT7+D2NIZrhurXeNqkchCJ+7rwA4I/lRG9AGdai2pKaCrA5uwGA5kEGUiQcS7u1a1zSWlViXxxMipzLZBI69iDJSN/nQdsODPID3JK3x62YtatypFfHBimBm4MFs9MzpMO0SvxYpNNJUAKlWpnR4Er5E4rL+quyDrzTy8Q7+tZluJrnX2DtCdzOrVNQyKlZwNdgblmXy5l3nasizQQD8yFv9el3p/19Ypd7D6Qy+O2tg0JLeyykJfhUL/KVkqud+hmpwhf+bB/1b+SfGotSBmxg+DJ2BrT4dwHYwYyCjZSpMI25ecQ6eZax6VUzMK3pi9NmKqheduxN9n32s5LwDyoOfJ+jQj/BjkqYTUTAb1XMeDP8CdxGpEfCsYyVmRt49bjtVI59qKyL9yo/kwnvzzJUxFEHl1AFrIa+iWxsfFERoloJICBvnPyCJLZFyfcNzvD/k7G9ZjV1KSj69e5VKLSi+ibiD08tyOvXOPVgefRCm2YcW6OUAgaj1frppm359r2MhgINR+j3IramAodsW83rHZaHffHe0M12Q3SSkL1rFHaD18fs5f7LHY7Z2NMaBjugWq1razgoax6kSyQJEhBDG5bTSFyDhd5oKzVvBXgqdDv863K+H5cUnERmaV8kkTcmXpNWLAgxUXl6KMvpHILDqy/a9kid+DeGpgcNMVifalpeXtCvqnXfb5YEMWYDTt2UU89F5B85AK/NJeBUS72o/qFOb0OrpfQAde5Pfq6hIewQ1BNtiRtjMAQGEYORejDQoVMtEUcrTn13RIvQjqElwZcTPHXyVwivOIlT/xGB+HGvMNVUXsYKzbHvrGXC+9y55kyj66MPhtFD95QVQrEBwiAu0/O25cQWfALK7agDcfifShCBcMnnUwXzaNevB9ZSPPzqh9e7jwirjBoFtkYYpV9X6tT9E3kB6uCVCQTwOf+t2idaPjR0gwjlBLzTCrKd6a7KvotqCd/aECSwNLedRw0mpbY89Mrh2YL//gQBGmALHC9yexXwuJa1zMEk5pQe9+Y6ypC8atctkdaI58VCvYs4h9DZHvnEP9A3jDBdeSLraC+AZdy9wais3lo7Kt8z+hNZsJM3w5sTBYO2p5nEzv2ue6dWfPCb9iPbtGG86FjwrHrQ==\",\"gJnUsIN3/CopNPR1M5wsMDjST34nAuFjaiaEb0av+8AhpcncdCOBCl9s5nCJv/bD1ZF7fhko3S5rimGf03sotw9/dW5kcuhEl+IfAz+lViWYCKvV6hwbaGweXZ241bC/iGrgi7150gHgn6mtdTxbLVIsOBbkMehRzn7YUV8pdR/tkVpjzhA1nXRZmtYMNHkr7oblrLACGLTdQK0/qEOuoNnahlQyiK9QFM38c6XSe09qRABzrpjHKDCFVwHOuyu/yg/DOSrv+lsqiJi6Nb2JlugGLFNJdwMjaqZkPEvn3gGjVi5uuzwvohRA1hXaWVdsORpSgzVg6ftnzPvaEA+IViUvRdrtVRiiHk+qUW9ndH37zONaQdEtfCeBPHOM2R2nq9z7hZOky7mJRLE+tXAd8MhqV+igC1fGPN+rwIcTOy0RYlwwI6J89XXl2tpros4QP4NZm3qzXUUZZZaclYiVUcDrVJTT6CT8CTvbADgZooZichZ97XrRklb0X6m4txWuduvHQ2oj+5te5kSTYmJ/9pKMX8kCf4J01pd2YOm132Bj9JgdYqROlrk21q3CzHDbJNc9lfvra9ym+Cq8ikOUXP+ra52v5vOaPvji5tL+kQ3xW9oMpk88ZHUt0AgjjOmhUsmR6q/cOkeBq+ckJ/P57zyfNVbxgil6RaE6HkZM8FafQkerYQycZG4A0TjrCsKLR8mK8bEwpcM7DiElIJi6J6/Ig6zgJtOBtjMb8k/w5IdZF3ZxSz+txYLCWBEC/lw37QnBAJBLKrDVHKMMCg1r5JESfLUC/XaPTLjeqM+xpWmrVwmSsTp5/mphnmsWiLmjPVp7L/k1wK2+HupV7g7QfMH0fDAgs4FvFnnSFT9fQ8kxkntrYVBcSztrBAgedbkgW63wxvz8NQ67v1TH1VhIiNGBN7mFHoeyhOWh7jR3XE4NdH3npf0pFBJ3kNo9g2hLvOJFASSc76xltuGnpoTeiPJTysmYFwOY8A0L0tgZ6R/jVZgkf05Z6L17SggGXXtMOY1dLyWJ3YTNF2DtEMsOmXv1CB/hKJZTIdkyNJkr0P3W2RvENkpg+GSNvOdB1Mlg7NuS6Z7uyzyvN9kmCnnEK4WATZ9uaTrlgTvy/a2vXWjPJ14u2YvXzCIGVHz7k3Z/twGsgwqT6v9YlykZDZU2ch0uyVQls2ESMY3a83wNeUohJwgJnYGSQYLqDyyOIX42Sv9URgqywveOT1jF4zLRFBngtb5PzKCtqbQK4ha8E/4jjZgHqqxoG3jkrkM94cou3mJq2KOUECuWcmSPL8Ocn/FqjQ4IzhaG05Fxpit4xmXCddLzUjKhbat9jw1Yu2ifgQHx7ANEbp0NG1mQGv8Mmp6UcWmm/J29gX+u4cXEiLsresfvyHIqAhTmOp+9Vr31TFKFL2zREFX7FnAap9cvfCHP7nh8Rlp8+1Fyj3rhvXG6KnYHAhu5/709vPITTgyNC/ml9OgIlr7O+jTlmun56MpdBeilTIkgfVB1Q4PHbCuABkmd6glc09xwygD2dK07Hq9ub2Rs6jV3DeBuA6zh0PSQCy3lIeJnOgL8BVLUaA2vZGaDo2dlrQXkNBXvLqCPmROa/lBIC8O7bk7fYxAc2ATFOsQVjG+rbAHeLkctq5hHnxqoV6Em+1H8BDXyxb++f/Yv57//+/yV/3n/8Nf//Ou///6v//XrX3759ff/+Ovvv/32t7//26/ff8qvf/v7b7//969/+eWPf+z//aW//PLPVsvIpeTxfK3vcbF2ZR2XLv7s2fwVrunZvQLLMwJbQwRqGZpOFlozhNhCxGKoOkLwX2bdzf+xtg==\",\"Gn2iBxJX+kL+5VJkGwT8CteBNbtvVTJ24h00Cewt0oWa+kPawVIhf0+BBgYIX+LnwZl8lOMEFXUpgWL7sbV2y8sFEZIHgamm+MfmDCg7zN5Iqv05VnvNmgNpHgqy28xk2XKAYoys3g4VrUDZG8vdpmAEkjRC03y859LxwEgmmV0n8UEG6+25hppZwtWk23vmRk58mcM5FBJmVzjONIlFIyUMYtQCBUUU3/6EuPKOLTk5LQU/NTNrh+QmTtYMtDFVS1t3cJ7iUds9Z6d06fpgjtUn62vEpelkUqclKmZBYPJenyHZr9EkyYdoffHtXWNcmry6B4xstYTSneF+n00mX9wvdU/ALKT9xcyrKdaWZtEea+BZFAG0L5cyiq7QC3TduraxzNMwcI7hc0utlH3aoDw40DTKrjE2xBJlnPPd1AcS91ES0NtPHVXKEQJs7sAnaZ0ewsa6SkvRByBpqGpFXnIT9sLng2sUB9VUzTQ8+DTK0lLCBGkCg1dUh1L3eG8gL40P+OUsUIXhV6Of9N8lalG8i20aMnQ2nKsgiPzgTL3m1LYWl6VqXlgC9EFH/bmTRArppomd34Ha2ULIlLT/760MaZAcW5S8iMyFJS84SWY5Ad8+ldFmavkiMtpKr1O/Fw3/AAAA//8=\",\"jJ1Zrlw5sgRXVACn4LD/jT0YM9XADeN9Un12V0k5nCRjcDfX6HdHKCmX4KahzmdUvaybTVqnf65Eb+mBL6BRZXbihQlwxYjhRLfR04csefJDckOSSqTVG/XKCvJ+sp6W9eOrM76xd+bGH2S1YD54vxz0VvKqYZR0y3yPPDCs8qlGP1VgQR6E/NVA85oWEK4bWXe01yFXTcPjWae8bQvxcXZRBLNrV10bbL+T/yaRoxJxwE3XQhjAbRc16txNd/7tRxO0EoaSNoY3g7J1XX8g5PZJI+EIapsubtWoJ4s4rvo6I+/Qpc+SpS1EyQzHsXcUH2blVAJRZZeC3dzKY2rZjg3HJEYosyP0bsu63OWaNRz0ww9ZuevZOUU8vPBSjxeCderwJBUkiM7Us0+us3ExaJA2mA5oZHLGllJd98efeG397ZW56JaqHvxaZIcJmJ/+oB0NBhJZU84wxq9rxjgS8o7TVhZANNb09YWVCOVyQqe0mQj6jQoQwAEiNLJxgnPWMu+HmNs8yZ1gFyX8hRnVjGSpdZuyf4W7srkcznOV7n2M3TUUafeJS/cHq+85cwQbcomQDmTvePwUD7/m9CjM+vGL5Z/c0HqKnZVvj9MIwj55osb4KtdX7YowpXQYIRfFYEipD2U0mQNvLFkrWvMSD5JOvTHAEWQTBYYoLVOvOktIPRypUhztij1FmLm2RtuGv+69ZaXkjZa89JvjqlCl6TuTqydbm8kAy/Njvq6Tcbl8AFmRXoK4bfUsaFtbZiS4RP3qJ3cVm5dZdykedrdNz53nKfORB/MBYGR0wgQ7Vs2CUTZsn2wdw2qmWV7RIGoSynXjrlwYgV4oc0nrOPdU3RyxlTpIkCWGUp3owFHWo5I8Z+3sJV9L/FSqkpFZQaQb5Ni+ekE9WbxXPq5z+ZoP5Oic+EU1PZRSxBx2JG3shV5lzCcC+5/RRd+/CgmhoXZkpHnTvQWKuEPzla/vSrRIMRiKSmM/UXlqVFeZUp+tGiEKYl9ImfJwtgO+nMJFUS3lYeUeRWPY14CLKUy7fbXAeHtNTb5YGsUQz+bcP1p8xzvByycqXhQ1x6e3sbKoHERmj5VJa3Giep/H5En7pNVmFVOoNbwvWbLIJHg8srzW/ulP/2af7XpUIHXErOmu6wek8jSYfPaeVRvtctlkLokYS6EZhx2SeVwwWvL+9mpfIkulTguP086GcpZNBD12/Tnk+uwEqHHziKWxKveEipvJMF048lvnB+xAcSpjENup0BQseisUrLz3VunGQGpnR2Mr+4Roo7AWusdkDZyFbuhPrZqtyHEuVUZPKedovrP2+TmY+e85kfgkihzVKOjjmnLlIrDA5hJhcDma04IEvcvghoHVUplzlAdSYKr9BND80R7ObqLuXV2Hbl51V3eCQk6kFkecCrqM9tne6L7HB5WuR8OlccX8MsIilsy51cBAsz5/DoRb6RzepNVn8SFEAI2wyAJZec04Ghvhtf42/fjob1fNMomLT6jzYUn8GYD6VZ09zBB115M5oDGAAEmQIEtSuUxNY3eZOZiTP0+zU/RSA1X6IYMblhhSlmdb0VXeTB0GA9l9LqheW5l+NwRmtdHZnWyuQ+jbHxPO2bqgH0EsjRkO60w/7587U+jYCV1UR+0+TTfeaK1WGwQPapcs7Iix85qTzh2Nu7gEAzjG+tu9//lX908r3Cfxh9nJ1jaROsth6p0YubyDBlBV/6lpLQv/Z76fcQb1mmV3czn5hI7HQ5E43ehHvvLRfVLP1tcQ1JZTLyKPddZazfzkwbRl1gcbSEcf/LCf1IiP36fMHAbYGv2knA==\",\"QfNy2PIFArM8Mk79se5qsx5xgQbCj0dCx2tCOy76Mhx5h/ZeM+YptWprAIeObGu4SofUTCzANdpiJNCyk+uy03PyIH+XNrJlsy/P8dEUdCU0nIp1Hvz94B9Xj3lr899vg0AvJr5X1VlilzBB6SdUnsDZ2p5/Y9LK3VTU7sSkidg1w7yR5YdifJjirG3FLByB3OI854aVZ6ad/HhAIRXGqPc45tpgg615dspkY+sie20xCKiYyiyaJHqkRwZCbq/5kTmr7pMnfnvP0RyciC9VGyMmUb2nQRjtvN7UqKdkE0qLqw7LKmRuD/MFPQyvnSAnYduZjE3zF3ZkFMnibFJeRUDMzVADop9HHOFcOt91sibxTE4lTPYYKrco5vP+B6BzM6MddlumVTzXBrVf82bOAWPaqb05V9xWciYGlC39LlbbWOYvXBahCuG193LEFsAjuDh5lkpsWBIUzJtinj0Ft1HJZdTq2ZpDekGXax5l7M7FSqc4q47P7iu8lObYbdm2Dh2qznyctzGgJHRtlSYBePLl7h3OhAzgm+U83H8xlr+0c4b6zbZayAJ59siBKi48P+9s7YxEaLe/zhtttLCmNN6C/MHhpVPIXslJpFwW0/IkO0qKnJapOBUa/Ly6XqsBBvLVc4qt9xfTmTUg6L5HvuVe8jGqpTUFLhlIPO3R79g9hirJA3e45f6tZp/cU8TCvfVTkP5aPnyKpdazP4tzg6QgAaEvS3llYBV5YM2ip7pNbMwV1HecPZuuuL7Jvpm2HOVNLnbtUrJSuAc0g7ByXqiLyvDPy8VF1tJ2IihBm1n9Ftjuc2zLCjZQWhIABinSFIC2soGSKz3PovvHOjcyQmNvsboHbV7VEORMVT/1Ura7UwrgTaWt8WgQVEW7RWwtCxCNWwineUF95rNMmhHzxsmNby0vge6WOY++KH8U53EFI9JBAnA4kktsFvL5x4C0vWaCHCSvkVco+Hh37XLwIVA3Sf3cW2Hogxxnm8/ILLib6Dmrg+MBCGjExYSreU42QSwtE8ePo7fOXLN3BZiNI+82t6Kimmv0mD8fnE+8X1/FfuLFU6rEunJ2nksSh7lyr8g0fWfy5S/PQV6w4WdfKZjoI4GbNTuE6YaWzAAsW7IVBlD2liK5rn5WzuBzo/0lp3aF2mGYimPCf5UXfd4cxZx+3YleEPaTByI/w7XziSh2gZllq/8icS5RSUrVOr8AENQy9j1AILw2SwtP7aHR4WvLzu9itEfG2mihfLADATAXFc+Drwe5ZwobmkxE1dN/PMNZ1wG/b/dHrq+BYSTejwzrInoaiVY2/qELyLit5znPrVbymqdRAalshhKgDOJC4zAFwUA+uD33qycPnJjWlNDskmjGrk9xsePJqg5AbGZDHpyLqoyecm5CfaaD3Ik1kYNqtCE2sp75pzDjOzH72U99R6f1iLpCei3HTv59RuuZW31tRXIFVfZWjzkWbXHLom00DY+zoId3kC+7gYV+9+d9yGDRf58Hvd+KK34Kp36Vvj+U639qtjWKpCF97bNFyDs11sNeNgW9Dw4poQYIfW7Ol67RItvbop3RLTpCI/To/sZCladV0FrjUbouzD5CwvS9vZBm0rlOFoGfXsSSRFQohyg7jrNW3lGxOj/KOgLCkEXs8CmMltpXsyKadfTMR66tIfiwo32mc+azEupLycucMxX1bZZWYinXxH6uqqxznIO1Ci70GAGTB3GUJ8bxrxjbPliCShMAV7DnIfZXs6/rMk6fJ5+qhOZGrk4GGhn7TvY4RzjlPsZP6vBXJHykhZmV2F4p2HgDCgLkZqlNz8ZPqvhntnBTPQ==\",\"Uxm2ehHukU1KbtV+EarHGgLNRO84zh5IOzbheQGZnVLfguWM0EastbWmVG0vZeVz9ouTJX+rLJtJj8hKXPJ5HIq3qozW+zpo5ceP5edaGqs/QAJagfiLRfHXxVlFobWLqRs4A3bJqyBkKe2f9o9kWnjYyQXShYGsEwTgw6kZMI41Wg7SPdLjzcU2HWY852himtzqOfuTS3hDfUeruxWDfGYURbSgRdWEBUlEN/Vyz5UFrljuUtg5WZQtMkwaqkyVQJU/suZza9/ZfK6YwHQPkZS0wPwa+UevhkkjBXV2zOmySHboELML23l7JW0Xrpgpj3N2EYjiVLpaLfqoGbtzHCNBUj6iTySmuUqn2wvF0OPR93r97u+qpPEjwgsmeofM9B6X/ZL547iz1tFGDnbaKBbWsOH35zjH1pH2kgPcOMy61augXzsCgOeB9fdmJusjWzyQqqWDZoKzatH/eqYifz47VSZY1Ps00aIf0wVr2X0uu8sevRbLkO4pNGKXNvLKG5HacP4EN3j9h3EnrL8zBfxF21gfTqOd+zpe0yxqfyYVSEa/sNRSE4v86WRRX4VQ2Y7w1gH6Kn0xzNhCDrLsL/+kV9CVCX9CkxB2iMY8TTTTvrWkgs90lFlV2DTOM/JWcPaqHJsxECPMRBSjDXZ5+moeWEOYg2zpyJ885tWr30OciIckGVJoLm9YRJT85bKQmoriaUM1W4HArr3Buc7s+Q9CRwhG29HurDszd2v3leG17S6wc0vVe6Jmfb9CXPQ5cvNRhtI2ELC8MgAiupOyIKtE3pGRJ11kwUPiUjztrgeUY9fsCsNgerGdf/RZ912z1L0NckbUq7YJoVxD5Q+HLn+tQOm1xsazqT+VrOHmGfyLRfC2mFwYDJTEkY+YVkJYtfyVf/YevU69XJLirTBpfBXz/1fjfURRw3ES7DdKtv40aOhVP0Mpyv+QZ04XGmTNK0vPbc4+kvS8rEvoKfep2Qb5Xsu+V9PSM35HiqQ1pln75krJicuIDnvOgCmXMaQffa+4LovDxlex6K2Pqz/Pazm8Acq9HhvfowXh08sN0uVcloyG0abJ57N+BjH8OkVoRJ1PF3KvDgo2LvHKWUULLMgMrstuzArt1u839E9VFC8YXKdsCzDzlUkXheDK3GpsmoI8yu2+L63n+31aBwTUgq2X2LOci4nRO9v4NOMo9R0yTlJBYerd8S+e7dvpafcwz8kGQeRtsQSYWitCiUKxcN5rZoDYc6i8mSNTc6GSrzkE/WWZ7Miz2kNXeMxTtyeuKJY8oY6blyti0mwam/c7y+hqIhfVZGrv0fv8dQH2dZmi25OWCZOmQ2V/Fgx/cJQICpTsTscs8+ZCCKx1G6BNxeqSI1blLsfLUp3avMCl6ETh/wgnjSdXwReTV01heRhdG2PFkiSZHTGaA4FikeGlBTmg7zx8QoFqqQoRayJuXIbGmOb5zt3zdpToBeX8wMyfJi0MjgjBREhAzJ/VwODf/rad/cYxtNlW3mE9l9O4OqqNf33VazjN/zJzaKlosdyWoYEj0/htWcSInE1FNVebpsM0/d0N83Va5lKZJkjcrf6gB9+RIa6Pv013f+uBqJ9LRmNrdPPUVHw/wracddvLJCEtM2muDUwRUCrBv3mJ86Eira7Vv+pgaXDbEXGjn/lAAlGh4M7IW/nXL4T+/Cwll+LuTTHNb+ffL+7D/34/wfadVDic6oXOa7FWNWsf9qB0roMLTr+0fZizStvxmo4xJu9RpYaZq6pkJcauFL+3q6//8ZQSOTGGBaG9nWoUVRaN/EpM4Aep1C6ieDMDH3573uxQlRYt1l/Dqg==\",\"96QHWGZuDSL2bvXfIIcXEVY19QxolxaQsfzMI/XRxq1h8+mFB276xmEonlHWdaH2smagTJo3SebS9Pq/P5kFxcS5WNmmzOq1OTcSaYFYNWVCNhZkA9DHzt4ZQej+F5txnD2Ze7/Ph7vYV+sQx2ORs/XmMr6N3ndUZQ7uNfbOeXBMm+TAb2yfs5Kh9L1ri3/ohCh8DDjsZIElcUCFwmlARu5HP07XzRHugAiLYbjXxrDH8XWSFC6AtBYZeLzzToFf59SbOo0cgwxgq8t+iUpk85ZMu5xemlKB+ixZhz9uNJTCqUZbUyXaDRjJGxyWB2Urd23Prv0LOowsUoLNvdT/uCL/Xid07n/zI30dUZfjJAYDQa1/6xS+HcyNNM0TatShmcY9aEE1SC3o/5qSLO4V81et+regXLUoGoniQA/MvBOJ/XefLs/2UlD6cwFkh9I38GnF0f9arohkurYgnao5mDBG9oo9maB1nkx/+QXi8BZb1AVgaUh8xL5KBQh7R4091YR9S4IuVcJzQvqLy4qOwJfyOpgJ9WLvzGv+TQDwfV349vPlA9Bx/s3m+gdTEEtcODafFz+QZw+vOc19PIYVA6SMaR7b8KQetX0zSqzc4wbZMO0hb2iRFyZcwAqeIjAlNNo6ATg8a97KjQE8qjAHOO+cUTlYwacblJOuOyAXb1Purlpf270VgXvyWXCqrWKRJD++0An4QF+R61bkkq8gkrqNFm+wQ9RRq5A7t4vw5XTNX/nAJlBCpd+LHtxbP7Nvcw6Bk+WunPND8s0VsbtiGqBKOXj9dnM/b8enl5uUzRwTcK1Rf+rx/wMAAP//\",\"jJ3Ljh3JdUV/ReCcQLwf/SuGJ3I3DBmwPPHAgOF/N1ZkUlCdFdVVIwFsimTdmxlxHnuv/U8/QOUutUkdkuhUTsdxeDtUoJUpJ5TMlz8/1crAC/uYPPhU1RnzeoQbHGlU/BcgU3EaH4dohLTik09bGXmonWI5QS+bJSbEVrnVkrc9ijTuhTNCm1lCa7OsRDzMXBDxvFudsMjYvgehzTszq00PUppzhVeM7UYqMcaVsJC4rb66UjLSsih5zk80Q8yWc+HNhe2qB0mTi4MMxad/1fs8ZwYLpvAM9yOE1GAtHxVx/NXN8EbTruvNKAXw5xMRPP5cLMHJBotD2RaZheKMcy0W2DauGdH+DNpbFoCnNNIR2nfUQ7CCzixQ6rT2Mcj8T8zsZ9ZUncQTt2d/Qi0/vB8pV/qQ6xgFLmFPisjJyH2zMzFm3iu6/dLh2iupGISxGkljkB8BaM9LpL6LpuVEsqwLj+kizS1oTSPuBfnoiWb+Qlr75K/A44gEArzXuQkKSCjVdxSUBdfMakqKYVOoadeJ3Cpdkz+jxM6nWCu+fAnFEcQZmJWZwgRlSUJ/YQtdxfqo0TT3kMn4V69ZOmvBqkEWqgT5XG6LzMKPlsTNGadw0LwGrV1EOQwG7zISfJwwnte6lqXX2vCRX0w5IkIlzb9h3U9uUGRnMJhaeeoQuvFuMa+lFtGC3KXSea/UtjCjpIyKXSTd1bnHNnjIIiFRi/gsjLNZ6G+bYV5tzhYAdx8ubUQRETOvagou4zKX7LYIqBzi0hS0VtccS8fBOGYxe2ezUoSv6vG+505aJPQ6h5xtYPrKVhglG+M6JY8FW62RH3qJLkn3TfiFucPbq1MlxkHvxkIQ89T6PqCIWP/u9jFl7TNLcAM/m23dWYwsVSn32sygXcdJKCEtw4IVd8NpeKmwB/dgzK8N9oP3dkbMJB9L73vnOB2CbdmXc7sjYvoc6lyYFsfsnKP7idl5rPMYH4zszdUG+Nv0b71orAn71Sz3Ore9fq4ZeOKKTEYqcs0OUj/dv4s3Zsw9Ot5vKpxMoRgLWD7pnGMv3AjSiTUPMIzWJKqMLsafn8oUcYI2ud08+vyVLNmVIFPpmzV6b/ypcXaOxlxLiU+2OK2upHCd6xKFVmPpq8XEOHXM9kropU+dFkGTbWGHSlFGzLsV39iyCIuMc/YxF/bAL5/YZ8rRplw3WFxH17qH7aK8Y1wfbBOlIZq1ZsM7LvGQhS12zMJT/fAUfQRxBgFQ3mcqFAWQgPS0WII2rAmF0k7e0esx/PXveG/p44rujqesEvW5Ho9qnIDXVgRuLSv1sQORMaOULHsb/Ac+tn6NKTxJbDVCyeZeLUvzS6ChZB65V2Nbr4jrK8UfGe3CFx0mwmU3x8mxGptLc3FqCCaPUuPCa7MRPOqu3gx00kaMxHaFZMj08zmuLjmcVVPPTGXXnrxlOoe4MhP13DxNBTNSGaAWjtL47Jrv+UsF36YzhgeN6tI/rqyy1lJRfTNT81mSfhZFjww/w6KEVd0qGlph+JVu5zIGOr1vrzGjneE4RPp4jo/VnDIgBMY5GAhjzReh1SwXKO2CuSD/yJkXx4qdmNCu6F8Czqf+ujyfSOD46ZZBwey1XYiOegZqDaxLLKFeynmE0FRS4aPSh0yWHFPhI8HtQZQgoqrWK+zeVLFiuAm9VJ3tZBV/pbu+aX+eqOY5Yl7pNbrq0nu/D9il+W6s20TWHiUnq480GHzA6yUu+fNZMruZneNjsvYr/6IkiU9BJtMyNrM3sgBu4V3jQiYuaX6l9fYL2bvnuZYCG56w6Oi8y806X5i9rc0v6Q==\",\"uA+Zrzaj7fZmkVm/ZknJR3uF999lNM9lXkaP1+4sHwdehzrTDpgyLjHHaCKzlz6bcfzlAKqj7pVRbYrpAXPyWii7bjTejDhdk5Lo1VQjARFPrm8lgfClegBbJ0k5UcV+H3fxxaxLPPugiI5jtA1la3wHZXzFkeY6x3CIHWEHKSCaVWn+vBrUzmAaLtPWIuYjk+H5xbG66bFtjY9yw+fEWFWpmbXV1nKz1WReEpwuMtAji1QvbHjBGy3bwZ6K3jYPezO2/nvKuSg57TM9yfA0o1nl9sF+5p0caS8Fzdw9zwsKUvnOXB26Y2uuF6CFx5sHcGiKTO8rlxxz9xjVKkXK0i5PyroEDpbU6irqOmSy+3nNI3jPrnNSac0PmSfGIF2JQz3Xxs5XZqrcNG9Px34SJ4cDb2bkd7ZBBbF1g6x6wbLt2Utq+aulxVvH4+Bzvh9OrWaxcLpogDFKzL0VmUfNomePrYUgbnf8c+mIX+K7fi2hT55UzzaMAJQf8g1hhBeSg3rMFxy4TXsR4fFORViR3+gzl6lSkqkWk6ggkCTnxkgP1pw7st0yz9nOFrTf/PWv/r5/XdNx4HzM2H5+rLwuGR3RVvwITFJV3Ltmy8/hiMjRmUqrmMRe9lbSVKl5ffxuf16Jl8/Eu+Xh7Ts5I9XWjMsObB0Xf8xLIyVR9QB82dwjundBOtILUg9HMgpkemT2pLbZv0eCFcGLNpmKN/McjBtKYRSZ9hvn/7qNuq+OEtwHOarqbDv6RezQfNkVtcUVUW0AB6IETBEnnyJy7+YW6ucV3axAufqImVrKfnwnnWtp38rZKZdZbynCk3PeInVjQ3LzRu5Ny18RZD5FqCHO3NJ35rzQq4sGcgNwx2/k11A5KNfe3IOc4gDnaaw9lc4X4INVaneOxqtfGUkdXC4Tvuw3PKBWmL6fTMS9JUj1dUcPw6968v3Ffz3/+3/P7/nf9xd//Ndf/+OPf/vvH7/95ccf//nXP37//W9///cfv/6YH3/7++9//M+P3/7yj7/un37Tb3/5l1AkjjFiEgrdys2813apovYhVp+aKz/JohEStafmGA0zmdKl0tw47yy041Uw+JYg+a7YeoVgw+XsGlKCpC7Nyov6seV7m/Mk8FY6uSLS1cM91FJ9IfEJqwFA41vcX0IiS7/w+bqRB0yqa5Jw4ji9423cGLerZEvoVJT4/YwowmvXJtEDUSJXL26ePqZwP2keYXfssNucc/syqBnfnYKamNFIbEntrbHF6CGS+hd8scm8xJ97CfhaZ8eT1UW1Jv1znltmZCRlo8Z8XGy85tUxz5Aum1nKXnEJAHUCjUEkPbZddsx5mNABYtMOd0Tce4Kxeovb/dxorGJwYCu7XK6VMgamnmWMGU4bQftSr9t63rKB4tpJ1Zq8hnQVTWt7AgQi0gluX4tZWJApsTob6sjVrIEnuzYDdrhgI2+auXGWza/i8DLug0IqFheAHvuS/KRgNdAGjrlCb36gF/llIcl703aa6DpKiahEitGpKx4p6oxikTyz8JykDWzN6s/c8uMf8Jx3aY1Yi6VWexkXQOjsMyYTrNY1B5u9lJ2jIKzBIYs+fiasopD1yuY/OmlPxrpAVWPumBtbeHf2hWTTaruYU/OI58yhWsbKiby+lXdU5kw6fwFD50yzbd3OUOuKMqQRK1bllk+8cD2iNhq7Gc008mxGwp6pYdOV0xfaGPmvcc1G2VShTNk2jFfE4arUBt+bVhgnUiuWGUhuevx4IHuVJaObPvX33eUhFZVjzlg7FK5OvQ14S0hrjW8O9r0Ll5BYx9gcgqmJ8crQrLfW1BjDPQRakw==\",\"lkmmGZgykUzF7jimrSDDGEXUsLGplbSdQUMc6bNtl2g2JBM3q6JjO5uGCtBZHTt98oVm8jL5oNNiRlXFpy2NEEyfFTWQ5aQRyUQ4c1b1ASl92xXOMMaRxS3n5lVULM6fhwNz5tQvwnGMV9M8AInobmTIsyTaPpy6LHHFqnHIQV3cirTkgz9AdhmS5bYMERd9Cgs90F36vJAgLAMRTuCmxAmwJJXCyU59WITQtqanLFVzy069G0nWOHJE0BXHoTt6Fn0MfQgcTQhcUog6YWUtRs5T5GTJQ9bg5HHlUmusN4ly7SscSChBZ0SPzgFCYIurNIo43bgHxpLGd5//IiVJVWpfmRvTUqyQniCe6E2CjilDQeb5FM5hbKOD0AKU5nEyewDfgtACZIvZ7Cqb5x3r45H8PhlsbMXeYYkcRXw4aDxbTHOreURWDgdeFgrkE/Go3IAqrOnYDazqZRLJLC58Oz2X2GBkPoU6NQFohEoV62OUjMJjZMXLCZ6NOUmpk/UgqTUVlbiwzOG6/9Ra4s4806Q1KQHc4bzdUJa4jkkUukXVpGtGnvbI9RK2RRhh0X6bpMrmm23BycyS5K4ZJRI0IOpi2O6oesT60ZagCwCfDNyqkqpBLykxjBH/5pSxkwG1nks0xkuxj+BBivTz3dG/a/SUxZ8aJDeIwD/T8gRmnPJfk9Rk1x2XXJwftbax0wSRdu/JhI+DLpd1sw60obJWMTNVvmIaLaar0y7LU7+ZtMVumfgcAcLH2tVIQ+YmVoYQvhJvkbx14dX1HKNR5XgKEinnJ0zk8OXjYxyxgk6EOEmdVxewOCWnIkSeZpK16t4V2IMI0r2VnJZodSW1eGcizm1zxoqINbPz344tpRSPUQkw029m+6ZBxlxHcxtLBASGgh5x88Vl7gEVq4xfkzMwlhizriJt74A5KOtp3v0cz7LtISWM7eMaO2tTzrBtJOd9A4+v9c9nC8+Rj44vxqdQWVYr8MiBk9h+VvbyRaoy2jT5xslBmsNsfnarClZbeOaa0QS9hDuuId9W64XCpRaxoXfK8oywPUASE4UBZZvaSeeC+yqO3yeVUTTPX38yiuO5lfeN+XGEWWiFqRK/x5MpohN9ZAJR6neGxBtbqtbpsFY0kD4MyR0ROqn1tsVa7AckbYkHtMfY5bA2VSDT9aJkE1Uu2QSsF3uctM2B2kca55VTk2SuLKw+Xv1jJ49nAvV8ie8pRL9tA/4G6C0HFXYKjwFWzx5ek3nuxmfvaQJJ3GK8IUNZAxp4vzXmisBP2TM5y4/AzVhF7rasK+L4ErNi5lmdTsYqL0J0M++RZ+qbyDsfKD0Vbf6Q5o8ofAQEtNZXk7ZH6zSLKJrqpz6bixYc7ZHDRNcplQRiveWApI4hfXd3WdBeZDggTDFux1Zt26R4HAc7i1bZD4Ui/rQgZOLiknTb0kyjdYUzAfEpNxCl75hKrW27rimuHV/LjBnSZ4U0nQNTx+xVzcAm91YLkExSoALLKzrwreUDQ7E4GiiYNG1uwOBd65TadgmL1UikGpFgDosw8haO53xa743gVr+Yt3K50BvnLTJFmJy/HJ+0sntl8gA13ckLGqrnaaSeV+kIhpcUq52yIwaOLuCN2rOssae1fLMmWEAaYjK33p5la/zHpojT8+MNtHPuNkCQ51P1D1tr754j9TPXvaMubg0yDqI/pe0Uy202sgxktCUtvYmgQEyIBvGEBshou9hfDF0+uNCc+d3W7i62x+zKSD/tgmp4Yh27RKUN7MXQh8Vo92KKrboVSSqLILeW+pJ7BM9eUZreaKVtfa4azbyGnTqaKovMGGNpjs/qJQ==\",\"yuRor/plHjnr+NY+l4gGhSLiZcTSKElrRzUuNToi/3Aztceh/uef4TvIHzyvxZDyWowgi8vnx7ANz0bF5MwmFObR+Q9Rlkiv03VGk4ocGeFca3EciBMqVgCPYdBZz+iE4gcA83s5hg7weFbci6YRfNizZSckMUhR6gNKpRJngW3tFTd15eCtvCGn44zGzwND1+h0lWLI2MLyL8thRnFeYtTYGoZk5k3Jqmy+snZc5JKDOJXdsToKSLmK1qziyZdBFRlh6HyAucVHkNDEuKyoPd/Suvmo0k0um2eJYKmR+sU40NpWjFA9K3LXKsfvEqWlJHrEf63m6r+UtTuehMe9HKaxn7Rug52/imP0TFI+HDzhsAsLckabMZB6N/bT6vN2AD98ekshCN/Ojc1QIt2lrercvowSOkqhCTIatoHONRnKxFiV3mcUovorv07r3nYbdWnsNAtoUcegQ9CPIU8ZYG6VGIjvPF4S+LhL+0oq9vifwUTEDdOoYxXNGyaItui+rGw8WiT1A2nwWBsDtFtVuoQqmFk5IF/tFgYowx6fr0yiURwO46O374so8yKMTd5T+TzAArt3j32OlPQzjAkToX9j++ilzS/Sg4WEvZTZ4v7PipkXJrT0fMKX2dqdIemt23o3uBBFzTnKdCPwIOdk0a3mnlLVnlzJsaMxNs/emvLEaar0paPdtLUU+11yeHotk+GFtqNEZsbPYYzZqjdKmImjSokdpOWvLcPJ6fEe6XnKuMSeYWkqBnBKL//a+yLgYISukHCyS2+2i9YkmB7rgjdJdV3SWrzH5v/fU1XeS8HPol1+rm2USGFmUF8idJDGeHU9c70yvbGJsRPFFf0s+8hQPD5vVRuAjTp6RDZGPBLeb+FjRsUzfZm9FjF5WKMqd7vnUfTVAr3W9Gp16G2xnCsttaX4AexoOmV6H7M71bETQhUv4h0NSUR76Rssu/GXffiN48B4YkyxVAfX7+k9B8bku46TozKPAUqXzVgS1F5eN2aSigQoCM5bnCHUhS3MeYyjxxcL18QQXz8NIjXtcWhldsNPOZGjKRKId4sIrsZEtDg2qmyUAJokIYXP2g9aGQquZLjoGuNjatSrRMu9jEv39nFe8dwzSPaFT12H1CdzXlRbP3gWnN662DOduAvKzots42+dUg6XObqxaehXdFfWVWdczuVc0Vt6azBioU8U3yUym0CWuAZMm1zrOMlBLFU0RIiV2EtbHFvy/jnGnPYgEiUXJ0mVVlcf4Ge/PHlpiu1io3VL+Wm3VV/lTDnWpAPbVWlMtxZEesA3rrq2rSc572W90a6tO99jHcJ6FC7PXj3LUel7GvaNA1cVPUd/N7iEXIv+xff4vKBrDe+TRpvJnj90oQLa953MUkc1B71Ii7mFVMUYqj63Yhg2dHItqq9mFw0gT6/RMtY7GRc9FCy7lXV5jrDh61AEV9iHICuTMkr7zT0JB7oAUcqMW0AC/kDFhb6ijuNuieU3IRmWkU88HNFzM9BzpBK7/zGhb8VnhC9zxhiCOOp4zsqMrTQunDo4rPaVHPeF8SY17wegFO+Q4xaOGxxeyBQv/YzTUGUU4wBlECOe7AJdT8gCcXWCfDGLaIyZTRI13LKAziLrbqQ4/kBfolOVculChGXRP0QzZoGltpll19bp1WrfW+GaIDqTtcRs3JrDfrlIwyNARnpkpDL9MZ5yL2IclMBbEdZr7j+3L7bDy14X8eEBTsvvixd7RxtBaTM19XW1J6FyZ2k7VlMoc3OsehAJDqmA84lR/mIE9j4uSXmu+aAZIi8JjtlaDoPnuzVwyMuIsnezMGWO3WIzgAineA==\",\"0HVCkaIj6UQFGV5bLqqhvqrwMXdNW+UwrCUiJPqkA0+GW2xYPJGE1ZlYagSHIybH3c04bBwnxlVS1uMxjSGwDkPMnoDP+EWQjqwISaDYGiWMmiKWtsDVk1qzdwIoozJlbl3N+dSoZlhwq7qBu05p0uwHNB/7yr003dRD9xTfi4nFFhIBZVuOPRRhRiL6syzbgheAklbhODenejS1d85voWlKGyOSYfhh2/CMh948vqJUg56v1t7xgWo7GVuu998wtzM/wc7HWzW3NZuRc30kI8BQl+i2XLsuC2EsVniZLEB3JWFDTCLMEdGYOlJvb3o+jMlQA5A4aO3mGtHfl+H2x8H52iX2tvSfU3hLLojRpYfYqW/PbD4b3R3vZflaD8x8fIgCRKZa1qN1ElMVhH0zOCY0zpeCPGis38kb9PYoLhq1KIyqtEXW0He2qKXBqhNE5DYlTL2RpDKiUHgmXdQF3tCI5tlF+GY0N4NczgIp4hxIHjAcElNsfxaJwrIoqTJ6BO0j4rRoAFezFmDjmZZac31ECjyLf1IptJuEiueNJdjpqJCD6R6KAlJ/lrqhgrLVyaO5j1G0Mj9M3R1tKYCsDB26dIpQIHMVjGu3cgFyzuWIoAN0MLLxLDO2Tqa2FL/KSI1kRnUXo5r52GvSF7Oo42VI7iCM428l+SxFDNZ19EnAvF4XvVlPBQQVwtDPS7WI5mB3w0lY9e0IjZTc6x1Y5LZNuxjIxCPknLaxiHsL+ad8YyZazkw9zpJQv6o7udrtbyLidEhE4uwTHtC2qXhB0v60gisJ0AkzZrW4V2DIuJI6Dk746JG7Uxb6Ip1mCMl/eBuRTEIRKsr9yG2LF1B7rU4x2/yscWuep76Buy0hny7G/s25x9D4l1j2MWXdZkgps/7YvU71cnL0vVVSz2sIJExcYf/GJq30MuaMOuwn9nVJqXPTsVnp8opt2G9pVso0zV1aLVVAHTYBJZt08eReRvxnh+CqlhKLkgr81YjBikuXSs5f/sLU/mprR5YHU0qyN1isReiAZx3v2iJNoeqJEO9pRy/xKjsesrUgO45kq4s06pPmCjdCFJKjmRzivSGELvHRagCUtbIXdOY5YekL4li9H5tQuAzqcLoTKyOOB6Fs2AhfSAMs41R/MzHU+Jnhh/ahE/1r0jpqH/tc3MZNe5/k3XsnOCu3aN+fbdWtJqjPbu7hJMxE1fLKrVh3LnnDE/DRaoRDIzt1rxKWz09cJz+oZuqGUj1vC5zWGusMsDsy6wJ06XGqxHvVLYYfdaX2PSoVAVemwMNHLLI45WPgVRt3XTBRFRVlYOI+SQKBgRLsIiynDlBOmcd8vVp1Y2wpqtkBM0w9IGhS5fiUMvp5QxhJ+6qJIK+fN3vlu/An8kHHRLTRfjplrRS4Q3X/kSvbTUXvu+Y3JoyD4NXYI72Xnfaihfz1LCvrjuBjqvkiTjVRCcvu5PM0y5hx35nA8k+WAXcI8FZXUV/FmqWlpe/2vmzci0GU5pQkXym2YlONjW/Ucry3qViQ05F9K46KYYnZIWsNRtPdIiT0C7Lu5Euy+1EYz161ey+YEZ2thpRJdha+OVFQXlG4JvR5Ny8SERxqdXIdjzP2Knoi2b3P1OX6LSjIPzySJTF2HhaEUTrEx6yWk9qyvjhu3vMKAfCXVKJnJ1ZG2vHiuznjQEDPCN5pmfZUPVfNR2AZdSBrmopEgqLxFTeFFGan1otVBR3zTzSJ3yGDExqE5vQrEeOogeksuMr/3CT/6fQP6B6gZhWwjMpi+bDq8LtTyTawP+KG+4D7nGVJ7XOMuAM9E6Gpd10ey0eRt7OEwmRI1Q==\",\"IWlGlBW+zp+6xHpCt7Sjyok7PsaOXH8jm5ZhIGRmtxuLj1VzsnjwwhnIC42cgrWu4hp+rJn7NxzmB5thjRMcdJQscYFWeorWJ/7ULq0G7VaKXwCV8tY3iNi9RhH8kZavIUFXITBdYouKVTj8bYDjq7qYnNccsnGz7LO/cOCI1Bm70sfEn6f3J41eH2JODDCirrMssWlynzvNEq19N9jo1QvCsIv4RLnSLorZMtsRL4hWuKcsi20RJWIXdmV0r5C5VlYqThDHU1MlGe2IO2fUauQcNZx0+XN6MlMvwehp8YVPCeuYx/vwF5mFnedSNDznw8eYnnfDTd8jhpbXxqwDZpWZE4GTNsxXQwmzta2KDo9n1hAIqTjPqAaJo+iuxQCEmDE+CBU0e5y6DR6OiKkr2L22aFNHSFjleStrSbV7N6oC67IKkLCfiFTyHvKtYKlCZbZZq0X0TQKHu52rTviuFlalAYMMz0c7yPlpuBaYAQEuNgm+8ohfmuWR62gxxScRPaoQGo6ZHjcjpYM0kbqIBF8HkfejHf3HI/r/AAAA//8=\",\"jJ3dah1HEITv/RTi3Atmen56xu9igoKECbEtE8sQCH73ULOrgPqbE50rg3+Qtdqz21Nd9dXrGmm6Qyd1b2mDmxjVskfLSVikHrYAuX7iGOKShpwNvm3StKQtKO9wOVk2gePa5ltx5dzPiXISX1nFkzPMtcPIEnN3XC5rFcVRUQo8dyPytyDtqsN+jfFm3cl9dqyYUsHWZ5/tMQmdcHh03zBcIzftgMKIItEbWUrBRP4KBlwSffxRds8G+EkvDjJy6WI7QBPMnvBuIVfw8OCVho95Wax79qfkshhbEfLURpRvZTkkFd5U0g1tu+nzMMEN6T5B/SBz4TjvqMYMkZQ2yyRBZpZsc1DEblKw4loxstOOH04VKRfvUjkfg+qSewUpC0GmNXmslkt77x1y/1q7V1IEtW0/TjYdKKHt7CTJRfLZeM/3cqw9Bi6KSCINT/Uq1WcyYT1z5apQ50gQyJoEGuDMm9e5JfvAaLsNVewTKd59YHml7WmDZ1Jh6thq3l3+UNyv2jyxHkQfA4PDf2r8bbfMLTrYqdkKx/khRhPaFNWdEUXj1Q+BejVQy1+H3YyWQkGDVVkQr63lUiqG+9lmw4xhSlVsflMCRJxK0/R4J6Y5Sq4QZkdtonbHfZQ0EVRS2QYMM5o8etF2X2RJina1mjZVciZYdfRitG4qqyZWQPpn3Lpvl5BzkM6WRB8waD1gnR4efafavM/XDu+5x6SFNILCrb0mFPKs9tSn3lFKozSDmkbiOsIb7mMTPB8MNVvl6Ph4CKiIb1baaSMlrA8cMOW9jXCMLHoZRtRaXZelksyWYpexFuyJERqdg2TSjFahmkoEKe1xnGlWadug4IYty3Fk7CVSHJK4LzxGaW0ePaYqstB1jJ8NTQAZHxinkzSL7zejqHNYsOJBwZQaxmG6N008UPuaF3oeu3U9PIM/UoEd1GmoyEjROVDRRGhiUsPX0s+5SfaNKUHleWgrlLk6d94LpciLHK1M2ens3cYN81TZx4DjR8G44bcMsF2VK/DwTq3cwkNVscoUg4XFlNrB1xdnqsc6eY1HaNkobhN0XKW0BRsLF1GP4JKBhNjJmStxSQTJaiuJpkx9zGv0PWk3aB3mkpZ9gz3Y5S+gCCspoQmFqOkiW26fZIDN5jm+WcT9LdHoUBiuXHB2lBWM4oTbqfeoW8w2Kr4RsaHMVl6LcUrmsNm5IeqKv0Wnp2tENPDOXH60mF2w2lJCIF32kSiOrbXA4AIsC8sI1Wvr2obD/TzHjVZqtGtoMYBjSdZpB7u2rF6W0SNHRW/X1G7JmzCmfXyY1ooI2lLXcwLDiDinNUoQVZpkQnJLAGKPKBTv3guIEGVWeAibkCEI25U+N/DGileOnsilYpOq9lWw7NSl3dG6jIXe/dXcmH4yNWWwvbt865n8KfDweeK5lg4xFbMgElBUUb2DZXY45Hc3p4kcOyJnVgUuRLCN4Q27x9JlMkqsf6/CtGL5riQP6rTVr0E8wobFzGHgNHHIOxRjftp6xVRKT52FsnBon7i0Jc/BzDwYAB/jrZxx3C0ZyXzX+SMjQKmHWTw+iJZQJ3inq3oeHbMq2ayYMiVFDHjvqi+eNPiuY1a8UlS/kGjRRfb3pE601hJx9jUDdhWpUOeg62V2HzeYPoWdVfc0BkiVM5aYrVQMJhGmqpPvTDC9qB4zJgP1FozEMWkfHrFz8bu93/bJnV89d8Px0uXVj0bOQ2+jg0tV444Cb1kEGPnocpFAd9wL62qyzzGeYqlOKCBJsEkHN6xJ84fHRvWmcWd95RYT1CQjCn8FONxV0jYA89rQEk0++krza00=\",\"wnbiaS36KSICefjo3qPQGgeK+6ss9V1Fo7xt8UwuVV3WmxoDArtroOxkqw7pckg0B34Ax+rzf1sXCPAdq+qpM47q9OVu8WFKW9UZlfgqmmeNxLx1wkGBXVLfdzxvVwmjdgPQa8PUeQUMjkTWDgwXJyu7UZTDyu5w+mtpF6fFVpyWMalO1UtcFW2/hy28GK0Whywqrmi+gclpJnZ9vLJpqMUBvRRTTUloMS+txPtWZw6P+yuZhgd7WbQUq3ATNWlv2eFkTdNiBmbbI5ZLa9PgPOzC6kTLSLR8XEXRc/w54lnTG0vespe+QeTLR4yW+9najJdLBc0tyisCxXS2SVN71Hal0rKzYGRRMxK2v+Ik1LPAEtH4r9dTPC+UWXwU7BtlY0EvoeWp83SJ3MOMHpE8x7IzQSHa1F5KStPzP9aLWEu53sSFXSyxUlNkiurw6jfmX8W/xPJJaKIUnQlW15EQO7HuCXv2rGdB5dPeZrYRtzzbmt4VMgpPA5tdz3RECuWmjE8jNaW0DdbGlKCDOK4ujYkR0EZCfl8vUfSlrrR9wcFnAWaZ4dhFM7L8pz0hRXlaCf0W0cSWeoYpXbwddLGLPwYLeysdBQhoUHh15xYibrU+zxxvS8ltgg8hDDiLhW3YnNGycMU0VoblCOVfAdNpUbvRj20XIMeccX7L6e0K/hxn3aKFXC/+WmN491rHkFLR2PvtWjyJ4L3Wx2gaTqNBI6szNj6vtDxIcZwRiK9jA7RBLV+x6kKi3vZ7nZLYmAwiKjmCdKPcTv6+NvDauZUQUhWppWWcyUB2PpeRVv0GE8OxASkeA1AHXCEmamfr4NFz83u8HGYd2PxaF0wiQuOKDTBdtDm2OIopigjUwSgGeldqXTnh+MrMvePATx7L/8zqe5+9wFFsqlmA8mmN4MJMFXvTKE+KwKEYNLQI7ViK6dj+h2HCmrrHYqLJvKeBo6CNxn04YpsH9a8VWIpVR58ihVzaGn0tErFT7ASSFZP+kbJ4RdGSKy8SGzcVdRvAum1Q0xKW+AIeJmJ3fy8YshUjzzeEIiCIvCRvStbHp2Dt3Fho7c/MjN4EdTLhMEclCC+zmEN6aoqeOIntahFGKFpkgvO3Pq1ff324u/ukv3X5+vz49OXy8e7y8vT3y/3T19+fHh//+Pb5/uHx4T4lu6y/9PPHw+eny8e7f9Y/vnz/6/nr95ffXp7/fPr24/Lxzv6DGVxenl8evrz9kw/6cr8+/AsAAP//AwAhN7qh6AgCAA==\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-12-12T22:45:57.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "_Bnl1c59uwpP5mcMCQNL.vgrR2N_bWxyePf8nJ65Bvo-1734041757-1.0.1.1-ylQFJmxCCr7RtPXYpJJGuZu9Ir1OO0CVydGhc_JMWOTGiAdDFo31xLJb2mOP2yRLStxmqzL3B8YSYvFcD7PWlg"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "gRZtbm5SJzR9fYXznXLTqmLV3QcdZaDpH8lUjyDjYT4-1734041757774-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Thu, 12 Dec 2024 22:15:57 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "access-control-expose-headers",
              "value": "X-Request-ID"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "323"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_3f3d166f7af78d2527c55ef64117ecc2"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=_Bnl1c59uwpP5mcMCQNL.vgrR2N_bWxyePf8nJ65Bvo-1734041757-1.0.1.1-ylQFJmxCCr7RtPXYpJJGuZu9Ir1OO0CVydGhc_JMWOTGiAdDFo31xLJb2mOP2yRLStxmqzL3B8YSYvFcD7PWlg; path=/; expires=Thu, 12-Dec-24 22:45:57 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=gRZtbm5SJzR9fYXznXLTqmLV3QcdZaDpH8lUjyDjYT4-1734041757774-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "8f1113752da194e0-HFA"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1154,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-12-12T22:15:56.846Z",
        "time": 1283,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 1283
        }
      },
      {
        "_id": "ea2b442ed97333f81eea271b3611e078",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 3778,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "3778"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v20.9.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-retry-count",
              "value": "0"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 498,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"gpt-4o\",\n  \"temperature\": 0.1,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Context information is below.\\n---------------------\\nfile_name: essay.txt\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/essay.txt\\n\\nAlbert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy.\\n\\nfile_name: instrumentation.test.ts\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/instrumentation.test.ts\\n\\nname === \\\"retriever_query_engine.query\\\",\\n    );\\n\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"llamaindex.open_ai.chat\\\"));\\n    assert.ok(spanNames.includes(\\\"response_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n\\n    assert.ok(retrieverQueryEngineSpan);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.input\\\"]);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.output\\\"]);\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.input\\\"\\n        ].toString(),\\n      ).kwargs.query,\\n      \\\"Where was albert einstein born?\\\",\\n    );\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.output\\\"\\n        ].toString(),\\n      ).response,\\n      result.response,\\n    );\\n  }).timeout(60000);\\n\\n  it(\\\"should build proper trace on streaming query engine\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n      stream: true,\\n    });\\n\\n    for await (const res of result) {\\n      assert.ok(res);\\n    }\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    // TODO: Need to figure out why this doesn't get logged\\n    // assert.ok(spanNames.includes(\\\"get_query_embedding.task\\\"));\\n\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n    const synthesizeSpan = spans.find(\\n      (span) => span.name === \\\"response_synthesizer.synthesize\\\",\\n    );\\n    const openAIChatSpan = spans.find(\\n      (span) => span.name === \\\"llamaindex.open_ai.chat\\\",\\n    );\\n\\n    assert.strictEqual(\\n      synthesizeSpan?.parentSpanId,\\n      retrieverQueryEngineSpan?.spanContext().spanId,\\n    );\\n    assert.strictEqual(\\n      openAIChatSpan?.parentSpanId,\\n      synthesizeSpan?.spanContext().spanId,\\n    );\\n  }).timeout(60000);\\n});\\n---------------------\\nGiven the context information and not prior knowledge, answer the query.\\nQuery: Where was albert einstein born?\\nAnswer:\"\n    }\n  ],\n  \"top_p\": 1,\n  \"stream\": false\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/chat/completions"
        },
        "response": {
          "bodySize": 559,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 559,
            "text": "[\"H4sIAAAAAAAAAwAAAP//\",\"jFJNT+MwFLznVzz53KA0bWjprUIIwQW0iAurVeTYr6nBX7JfBAj1vyOnH0m1uxIXH968Gc+M3lcGwJRkK2Biy0kYr/O11Pqx4mIm7p+u72aVfnzoTPnr5WWtZMcmieGaVxR0ZF0IZ7xGUs7uYRGQEybV6WI2L+bTRXXVA8ZJ1InWesrnLi+Lcp4Xy7y4PBC3TgmMbAW/MwCAr/5NFq3ED7aCYnKcGIyRt8hWpyUAFpxOE8ZjVJG4JTYZQOEsoe1dr3WDgeBG2UioLLzzCI0LFpSFZ20mcIvBcPt5MeYH3HSRJ/u20/ow350Madf64Jp4wE/zjbIqbuuAPDqbPo/kPOvRXQbwpw/enWVhPjjjqSb3hjYJLpblXo8NVQ/o9NAKI0dcj1hXR9aZXi2RuNJxVB0TXGxRDtShZ95J5UZANkr9t5t/ae+TK9v+RH4AhEBPKGsfUCpxnnhYC5gu8X9rp5Z7wyx+RkJTb5RtMfig9sew8XUll424LLmsWLbLvgEAAP//AwDUXpP5FQMAAA==\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-12-12T22:45:59.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "NR4rH0eFzpYH_oO_fFWxaZ6pXTmFfMA8avbE2WrfMeQ-1734041759-1.0.1.1-FtMjnX7FXAJKwopCiwBNAO67mVsXyjwP0ShaI7ptrs9nNdL5LoYXaosSHGC7YCjWD4x9TZywNne2TvWMcY7zcg"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "Eiq2A1UF1ki4S.vHgLXytJqE1HkkNAodc7eXWYLPAyk-1734041759560-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Thu, 12 Dec 2024 22:15:59 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-expose-headers",
              "value": "X-Request-ID"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "288"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "800000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "799109"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "66ms"
            },
            {
              "name": "x-request-id",
              "value": "req_fb9c6f01969ad376180c80ce9101517e"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=NR4rH0eFzpYH_oO_fFWxaZ6pXTmFfMA8avbE2WrfMeQ-1734041759-1.0.1.1-FtMjnX7FXAJKwopCiwBNAO67mVsXyjwP0ShaI7ptrs9nNdL5LoYXaosSHGC7YCjWD4x9TZywNne2TvWMcY7zcg; path=/; expires=Thu, 12-Dec-24 22:45:59 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=Eiq2A1UF1ki4S.vHgLXytJqE1HkkNAodc7eXWYLPAyk-1734041759560-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "8f11137cfe8e94e0-HFA"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1188,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-12-12T22:15:58.161Z",
        "time": 1357,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 1357
        }
      }
    ],
    "pages": [],
    "version": "1.2"
  }
}
