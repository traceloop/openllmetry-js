{
  "log": {
    "_recordingName": "Test LlamaIndex instrumentation/should add span for all instrumented methods",
    "creator": {
      "comment": "persister:fs",
      "name": "Polly.JS",
      "version": "6.0.6"
    },
    "entries": [
      {
        "_id": "35e4e3d1b757b5697226d1cf6efde888",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 95,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "95"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 463,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"Where was albert einstein born?\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 10196,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 10196,
            "text": "[\"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\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-03-04T12:35:59.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "nQSFqeDoNXuPG0Pf.3wPeTomTlad9XUpJjdh8AoRPTg-1709553959-1.0.1.1-27lXE1skOtMjwTyXt98VSLWjyyexrDIz9GE8fQwT.QNVQP53VdsLEzN0BaY.MU65XlU4wIcvd8KZCqw_xAjWUg"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "2kDAHmFR1ud8diK.7R3AsHvoD_7yJU9sdpLBBepQAuY-1709553959085-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 04 Mar 2024 12:05:59 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "23"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_3f9ebf5d086222f4253835c062894b1f"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=nQSFqeDoNXuPG0Pf.3wPeTomTlad9XUpJjdh8AoRPTg-1709553959-1.0.1.1-27lXE1skOtMjwTyXt98VSLWjyyexrDIz9GE8fQwT.QNVQP53VdsLEzN0BaY.MU65XlU4wIcvd8KZCqw_xAjWUg; path=/; expires=Mon, 04-Mar-24 12:35:59 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=2kDAHmFR1ud8diK.7R3AsHvoD_7yJU9sdpLBBepQAuY-1709553959085-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "85f1bcd2d9fe4c3d-MXP"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1066,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-03-04T12:05:58.799Z",
        "time": 404,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 404
        }
      },
      {
        "_id": "b46a7ea6d50c48e02d597c41e83be54e",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 1357,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "1357"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 471,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"gpt-3.5-turbo\",\n  \"temperature\": 0.1,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Context information is below.\\n---------------------\\nAlbert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy. /*\\n * Copyright Traceloop\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License. * You may obtain a copy of the License at\\n *\\n *      https://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and\\n * limitations under the License.\\n---------------------\\nGiven the context information and not prior knowledge, answer the query.\\nQuery: Where was albert einstein born?\\nAnswer:\"\n    }\n  ],\n  \"top_p\": 1,\n  \"stream\": false\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/chat/completions"
        },
        "response": {
          "bodySize": 452,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 452,
            "text": "[\"H4sIAAAAAAAAA1SQO0/DQBCEe/+K1dV2ZCdy7LijiEhBCoQQBULW+bKxD+6lu43IQ/nvyA8SaK6Y2W935i4RAJM7VgETHSehnUrKc7albPskN+X6rVm/FNlZPKeyO+p2uWFxT9jmEwX9UjNhtVNI0prRFh45Yb81K9JVni9W+WowtN2h6rHWUbKY5QkdfGOTNJvnE9lZKTCwCt4jAIDL8PYZzQ6PrII0/lU0hsBbZNVtCIB5q3qF8RBkIG6IxXdTWENohtgPqkFPsJYmEEoD3zxAY70BaeBV6Rge0WtuTjM24dfbXWVb523TZzQHpW76XhoZutojD9b0NwJZN+LXCOBj6Hf4F5k5b7WjmuwXmn7hPC/Hfez+pXc3m8ozssTVH2pZRlNCFk6BUNd7aVr0zsux7t7V86YoSrFsFjmLrtEPAAAA//8DAPDujBP4AQAA\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-03-04T12:35:59.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "_GiytcR_rpao8AXfO6c3hkEFY2bks6XC9c0NllXAAJs-1709553959-1.0.1.1-BCIjjQWenZa3Thd2ypba.BawaPSWgXNqmeh9skhkZvPbTlofAHIHoBIQnCHRQ1LT4Q9dtMHI1qQtNT5fkGoikA"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "eBEwteTQeWdibP2mRG9kH2oNIjLhQDjDqbbuONKa3lw-1709553959939-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 04 Mar 2024 12:05:59 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "cache-control",
              "value": "no-cache, must-revalidate"
            },
            {
              "name": "openai-model",
              "value": "gpt-3.5-turbo-0125"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "454"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "160000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "159689"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "116ms"
            },
            {
              "name": "x-request-id",
              "value": "req_ec48913955b4c237af97b7a8e41a3881"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=_GiytcR_rpao8AXfO6c3hkEFY2bks6XC9c0NllXAAJs-1709553959-1.0.1.1-BCIjjQWenZa3Thd2ypba.BawaPSWgXNqmeh9skhkZvPbTlofAHIHoBIQnCHRQ1LT4Q9dtMHI1qQtNT5fkGoikA; path=/; expires=Mon, 04-Mar-24 12:35:59 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=eBEwteTQeWdibP2mRG9kH2oNIjLhQDjDqbbuONKa3lw-1709553959939-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "85f1bcd57eae4c3d-MXP"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1210,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-03-04T12:05:59.218Z",
        "time": 693,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 693
        }
      },
      {
        "_id": "4d705d14a30eb714ad1b4db58213356a",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 9608,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "9608"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 465,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"Albert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy.\",\n    \"/*\\n * Copyright Traceloop\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License. * You may obtain a copy of the License at\\n *\\n *      https://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and\\n * limitations under the License.\",\n    \"* See the License for the specific language governing permissions and\\n * limitations under the License. */\\n\\nimport { context } from \\\"@opentelemetry/api\\\";\\nimport { AsyncHooksContextManager } from \\\"@opentelemetry/context-async-hooks\\\";\\nimport { LlamaIndexInstrumentation } from \\\"../src/instrumentation\\\";\\nimport * as assert from \\\"assert\\\";\\nimport {\\n  BasicTracerProvider,\\n  InMemorySpanExporter,\\n  SimpleSpanProcessor,\\n} from \\\"@opentelemetry/sdk-trace-base\\\";\\nimport type * as llamaindexImport from \\\"llamaindex\\\";\\n\\nimport { Polly, setupMocha as setupPolly } from \\\"@pollyjs/core\\\";\\nimport NodeHttpAdapter from \\\"@pollyjs/adapter-node-http\\\";\\nimport FSPersister from \\\"@pollyjs/persister-fs\\\";\\n\\nconst memoryExporter = new InMemorySpanExporter();\\n\\nPolly.register(NodeHttpAdapter);\\nPolly.register(FSPersister);\\n\\ndescribe(\\\"Test LlamaIndex instrumentation\\\", async function () {\\n  const provider = new BasicTracerProvider();\\n  let instrumentation: LlamaIndexInstrumentation;\\n  let contextManager: AsyncHooksContextManager;\\n  let llamaindex: typeof llamaindexImport;\\n\\n  setupPolly({\\n    adapters: [\\\"node-http\\\"],\\n    persister: \\\"fs\\\",\\n    recordIfMissing: process.env.RECORD_MODE === \\\"NEW\\\",\\n    matchRequestsBy: {\\n      headers: false,\\n    },\\n  });\\n\\n  before(() => {\\n    if (process.env.RECORD_MODE !== \\\"NEW\\\") {\\n      process.env.OPENAI_API_KEY = \\\"test\\\";\\n    }\\n\\n    provider.addSpanProcessor(new SimpleSpanProcessor(memoryExporter));\\n    instrumentation = new LlamaIndexInstrumentation();\\n    instrumentation.setTracerProvider(provider);\\n    llamaindex = require(\\\"llamaindex\\\");\\n  });\\n\\n  beforeEach(function () {\\n    contextManager = new AsyncHooksContextManager().enable();\\n    context.setGlobalContextManager(contextManager);\\n\\n    const { server } = this.polly as Polly;\\n    server.any().on(\\\"beforePersist\\\", (_req, recording) => {\\n      recording.request.headers = recording.request.headers.filter(\\n        ({ name }: { name: string }) => name !== \\\"authorization\\\",\\n      );\\n    });\\n  });\\n\\n  afterEach(() => {\\n    memoryExporter.reset();\\n    context.disable();\\n  });\\n\\n  it(\\\"should set attributes in span for LLM instrumentation\\\", async () => {\\n    const model = \\\"gpt-3.5-turbo\\\";\\n    const prompt = \\\"Tell me a joke about OpenTelemetry\\\";\\n    const openai = new llamaindex.OpenAI({ model, temperature: 0 });\\n    const res = await openai.chat({\\n      messages: [{ role: \\\"user\\\", content: prompt }],\\n    });\\n\\n    assert.ok(res);\\n    assert.ok(res.message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    assert.strictEqual(spans.length, 1);\\n    const chatAttributes = spans[0].attributes;\\n\\n    assert.strictEqual(chatAttributes[\\\"llm.vendor\\\"], \\\"OpenAI\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.model\\\"], model);\\n    assert.strictEqual(chatAttributes[\\\"llm.top_p\\\"], 1);\\n    assert.strictEqual(chatAttributes[\\\"llm.prompts.0.content\\\"], prompt);\\n    assert.strictEqual(chatAttributes[\\\"llm.prompts.0.role\\\"], \\\"user\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.completions.0.role\\\"], \\\"assistant\\\");\\n    assert.strictEqual(\\n      chatAttributes[\\\"llm.completions.0.content\\\"],\\n      res.message.content,\\n    );\\n  });\\n\\n  it(\\\"should set attributes in span for LLM instrumentation in case of streaming response\\\", async () => {\\n    const model = \\\"gpt-3.5-turbo\\\";\\n    const prompt = \\\"Tell me a joke about OpenTelemetry\\\";\\n    const openai = new llamaindex.OpenAI({ model, temperature: 0 });\\n    const res = await openai.chat({\\n      messages: [{ role: \\\"user\\\", content: prompt }],\\n      stream: true,\\n    });\\n\\n    assert.ok(res);\\n    let message = \\\"\\\";\\n    for await (const messageChunk of res) {\\n      if (messageChunk.delta) {\\n        message += messageChunk.delta;\\n      }\\n    }\\n    assert.ok(message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    assert.strictEqual(spans.length, 1);\\n    const chatAttributes = spans[0].attributes;\\n\\n    assert.strictEqual(chatAttributes[\\\"llm.vendor\\\"], \\\"OpenAI\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.model\\\"], model);\\n    assert.strictEqual(chatAttributes[\\\"llm.top_p\\\"], 1);\\n    assert.strictEqual(chatAttributes[\\\"llm.prompts.0.content\\\"], prompt);\\n    assert.strictEqual(chatAttributes[\\\"llm.prompts.0.role\\\"], \\\"user\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.completions.0.content\\\"], message);\\n  });\\n\\n  it(\\\"should add span for all instrumented methods\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n    });\\n\\n    assert.ok(result.response);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    const spanNames = spans.map((span) => span.name);\\n\\n    // TODO: Need to figure out why this doesn't get logged\\n    // assert.ok(spanNames.includes(\\\"get_query_embedding.task\\\"));\\n\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"llamaindex.open_ai.chat\\\"));\\n    assert.ok(spanNames.includes(\\\"response_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n\\n    assert.ok(retrieverQueryEngineSpan);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.input\\\"]);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.output\\\"]);\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.input\\\"\\n        ].toString(),\\n      ).kwargs.query,\\n      \\\"Where was albert einstein born?\\\",\\n    );\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.output\\\"\\n        ].toString(),\\n      ).response,\\n      result.response,\\n    );\\n  }).timeout(60000);\\n\\n  it(\\\"should build proper trace on streaming query engine\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n      stream: true,\\n    });\\n\\n    for await (const res of result) {\\n      assert.ok(res);\\n    }\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    // TODO: Need to figure out why this doesn't get logged\\n    // assert.ok(spanNames.includes(\\\"get_query_embedding.task\\\"));\\n\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n    const synthesizeSpan = spans.find(\\n      (span) => span.name === \\\"response_synthesizer.synthesize\\\",\\n    );\\n    const openAIChatSpan = spans.find(\\n      (span) => span.name === \\\"llamaindex.open_ai.chat\\\",\\n    );\\n\\n    assert.strictEqual(\\n      synthesizeSpan?.parentSpanId,\\n      retrieverQueryEngineSpan?.spanContext().spanId,\\n    );\\n    assert.strictEqual(\\n      openAIChatSpan?.parentSpanId,\\n      synthesizeSpan?.spanContext().spanId,\\n    );\\n  }).timeout(60000);\\n});\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 30000,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 30000,
            "text": "[\"H4sIAAAAAAAAA4xZy65VRRCd+xUndwykHqte/IojEGIwigMZmPDzps5RzF59ycUQB03Tp7se61H760+329Of73/7+MuXp7e3p98//fXl6dWufXj35d3T29vPP91ut9vX+/8vOz/+8f7jhw+fPv96337/y0+fP3z8++ntTb6t/L/pv5P2P3kj0mZlpa++Lb7eVZRKW8Wry16PminMdbN1KryDjjCTKoFejxgVnxnarGEdUbTX4BNjvHcEmXRh7aqpGrpvKkbrsmgtEa5Gb1CYJYdBK1Vail5WkCqT67kSqrBrwMxS4GjaKBP7CA65tjgcl81qmS1j1xO0R9MpXBpq4qN0AzUNpcBCus2cDq2psW66Vqb3JV/yRjw=\",\"dNL4BVqWVaDfN3NNiraXtQhfwDuH60XVw2a44so0S5yLCGrptOpuiU5KQWQ4XUrcZSaLsm1bcJrXHLoOHHp9q/S4Ia8/ZZr7c1SDYuFcVfBENL9pXB1cKmq2lX2NnyE8kvKvrunpdIAnxsyTSm06CtebKsamhoBAR80a/NKRCEl6gCFMmlc1BlAKgW+l8lV9KsGnuulUUKtElwhFWvQORAaOSo+AM43s1qRVdTHvPEBIUyYPzFMLVU6txbh7cQzcxxxHZFKnqTMskCJ5tGbPoLiNZmBJKJAyzUUo29Yz/FygQ5oy69JO1e6BimIIcIwf6C4WcVRbp5ULh1WlHOlUmBWSbbxVtYYrW9tTUBQSqSjTA7BR6ZXEcdj7W5xPMNO2egmI7mXs0srodK4+UgizgR2lETCj+yJHi4BI4biy2QOy1MeZtWRE+LUVUHVGR9cKEJd2Y7qOfEXk4gbji49EH7y3bHQUh+QSsnAmJRypTjWvqargspOacuV+Fq1oMx1ilFGT4ogv+yolBygLhi7LcAlKg6guclRyK47DGTs7pqUZezDXdrozkhYm4UeTjIURp0sDk/6CVnowUh/6y9tLqO+2FaE9/CiLxKEMazGGVZkVENDjx0yBoPpasdUD7jAZaLgcZ8Db4RQDRUAYwGUFXx10a9ZSiRP+TIMV7vJaK4wS6T1ZnMgIBSGNhaN7OIvTOozJ1mlyoKrEvpcPGGTMoUFKk4hZoVkwcMVVlbLuj5YZDvazKAcdF9YgipgB4YlZWCvrkkppo4uWrEHgnKa1sLAeX1IlrYmsoLeLTTa6qQeZZP+Vj91dh1LSmLl2OyR7DQvboN4S5kK1Wv1LYcqJbVjqIfeOOPRHLNokA57NlLIgELNR6eb8jxbHVatWmh1iJ6LiSIu3CcNAWHqA4bmnFguueVljISx/sCTDfQILZdrzsJhiWa/SOu4kVJYN+Z05w7RlYdPMhbqi+DSWivIiQbQkEDFkNy2j1cmrqYS0MMNm10XT3i8aW2ik6bd6oC8x+SP57QHnOBnQ6DzRD8uNFH/raBZP6tCq6Jc46LW8ydCqekYTRjTbKpexHHYA4tOr11m7RPaYRLK2r0ocUq3LRpMjrhJOgCGArj0NTiMR/ANta9KY4NcwJ1eXhEFdlfZiVJh3HWvmWYssk0O55CYs5WjYVfAk//b3K8/6cPfwFra949HKBmkQbsKMk52HQVPtTor2YpB1XtvDpUOSekZh8EOhYOcAxR1vvn8oLGhHKWttqQLIr2hBlOnSM9JYPmfFGEG+1SDsR0yg5nj58c7oZFuinllKL3pAC72yrOASOAZvPjUU5pAcPQRyh+EQ0xOrdgiwIFZJrWYeQB4oOAY5DPN3HLOJ5yqxF859nAAgnAtgl6vU+5jlNA4bWzoaB470NvfhB1ZL8hWw48dg2kXGzk6oiMYX+CgLbm55WH7z6WPKiAplejYJZYGQ2AEPpWYHPI1jwiZReijWRCB4kQnyIbqr23mwIKM27HXFOvIUPZJ2iEu3iMkkqEkXE/ZT1SbJOqJdBizkd9xiEqzYLa1jDpuna7SG06pqKV2HQk8ptaOVoiPlAP3KCAyBPmR8eASOzkSRJBXBoiOPf+ElReC8vBWhGqf6W0ShA1qsyIJaq5zW+j4qmwPOYomaDZFKrE1hqaO94MFbPSJSX7DW3/f263xm4kCZ1p0t8xx/rXUR89iOK48hqMCWpJsbx5eSuEOfjWKOsLIXTK5cuizG+j/+jOGVqcaDTXEbSMc5noDJ8dECtt8MiD+2n4MRyirikIYOQeO4QGmDPyMEvJrlk1RkH9NONbgLSUvdWQ==\",\"Xx8qsq1hxwESdxnImZ3UIzNyh59RBjqzaOfyRNslX4/3ZjVQJzVmBUMVNFCsQM6PYvd/PwXlgUpn6fQxXKj1CAT2VrOAx2onV7L+wKG6Hw70+MSR6iXDVk7K49IzjxF7S+EwLrJzvDqqNrIsqZ9tG6/ZpCokXPjX9lvhkitPaFdNzDEZhI7yNyENL4RyxtLW/xy6bfuxX9Csr7/3UQHu1sz4zw9IV3aeo3+ZlDiGcL6TCrmS5j8AAAD//w==\",\"jH3LimxLcuWvFHd+wO3h9qhfaTSRqhASSJr0oKHpf29WRFyhXGtnnUQDQXIqb+SO7eZm62V4tGnDjYinrZfcC+ZpE1SnYm9aS/kJi6bKcbctiepztBdCij1jX4EH82WcecMqFcknP8CMfgGe313bLH6LHBA/28ph3pPSfKLBEQDOgK42k4D4j129V8LGi9Fz4TY/nT4wJ+6nojZkcorrwzTu3rLkguRdHsGvgUVhvrfft+rpUX4Pc2N181z+7/dEDw+POz3HpPNNzw15vfPkufrSH1RKukMCLeFyf3Iz5iT/gspKn+Rx/TouLZ5U7fKges5ObHD3dzLDnDtt/F9SoQ1AGTLBpAdK4td/6fd4Dr1vY7VEfxi6V4ac3O0UtyC+Z9td5vR+cRdSTR+O7AxaeAZL6lgnywvmjmCWMtB8YPSNh0L0Avnpt7ZVMeAYfvokF82zM32YoknMGYdvqfETKYA9ZnrjN6XvCmHp6Fn5htkGF8+6k03L4aKNGtRLv8BRyYV4erzRT/mpHSEiNl5oLtVHDBlLqLeBoGZkAY/FhtkU3N29DO+5HZlp7drEEpsUcaZWFAqYb/JqFSynDwVIh6kB9F9H6keArJRqY/jjjfnaG3EF4EdpRRkWILuPTAcPpM9jHfwQT5EhcPDZMz5UQmo8jouk6JZzYTnj2ybfQUP5EcLY3htDQxbYlHP15QQbzvPy7Y1SQUbfPsEDP+Zl/8cqlTc06XlUuoSuki9zACiABuglPrcAtxgDXB45dGvhEKF9Y848AuWRnwAGn8uPENAzrl6qT2u3BUrtU5kpwrJ77Qun+JaruetTuLuVLJ1ojBf8T6eur/OtVZ7XWBZlYMiNMIRIO5EiCMF8sMU4hsdenTT19fx8Bjxg6p/yNKsnnhU8BpjvDJOap/dcPgl+PVqwsBtlwo4/svO9Vc23HA7STX4NVAX3GQOmQghcFAlnHtAHJamcvoWHfvcE3lvjZ3DMrzd/MCvQWyFighd+J00NaFT5zYZmlfs9fOfAXYabLRLIvYU4PSbvIp6k7/AEa36yD+EbUZ0lvfxegCamb/46U69nwTEKFOFpt2v4HglL6q3iZCaj07jZag7Dvc8tF/5jS082wsyDP5VOhL++n3UhSCgZP3OvyDcsferm1we7dvDd8OW47fWFZ/zoR22Xme4nLsOgi12TptvQXYT0fSIA/QCpe8f5HjTFV2oAFvJx2MxWpQY6jDPUjkE9GF8YkQ9obtEsFvALAtL1fmJN1/tr2AgXMXPUYQIcPf5y+YjxNjutDYJ9Ke3vN/lCXsMN4eL3cqEAiXyUwYHSj9+ktGgG+aEVDGdtJpp002qdoAVZcYnut0RJxLrADxM9IfSjasffXy6kvDgoAmXcvHS7BC4n5/cW1FYfkTZmt+glF3QXz29R24fhiU6H+lt46PV1FQyisop2Pf2GTPx5epIbxR5LeWXQBG8l3W8xfcKE7rzpMm48qAmg0XrA/yKnR+aV191YSuz2DefJKoBbHfqp3/VThLpbGz6G3OQEob5/ejtFDz4ByMQEn8lzjwDkkWM+9AkKxIMUyj4isz6Jv0puBQfA7Yy3RoeoK83PaK/tULq5SKoDeO2KJGlCx43ue640+4Dzje87qFeYs0PnVyHiOavK4IPk14ARCY78wI66ZyU1Fw9q5F8fVb+XcGsQlFWvvh3GnGm6nQn5wqC1zq8igTfTA0CB2YAoaGt4ZusQZPjgD7iMoFqHfSU53xcQeDF5k/3cm/yp5u7lL1z+5afvOhUyzueFuEghmb55GQ+4mVAFc+0aW7Dq0qRBG/gTtXRiRh6+rQ==\",\"zKY9RFWMh5NSfdB4xGUJ9N6FHF8QQPcdRrZ8ImSgfdSqoPPZ9IePEA+iTfSqhx56giuOqzqgvPIY56TzxQKwh9pn79i8w1+uz7VaEd8CVBD5c2e14HV4lfoKMPMokUNNyWJo9on0BFzJUlJr2IxKQPcOhpHLZ679QGtQHtMpf/65ELjSfz4G17rcfzgEIXe4AFMfWXmEvJraTb6b+tpJhqHyll1fBlDm+KT0Nos6M9LKzTWxxMB/NoJjiejpMxm9hKk8UYvj7s1oZ23KLVhlcYcppMkMF6cKFMAro1y194rvzwM/E/7CzpQxu3bmdtUqSrfAYBWV7ja+CLwOJHwrYni/I+T6mR3rQ1N8oNtkhXCji2U4as91EcBB+gH5PzdKaH+MJcroNo9wfB3m6flbHt9s8D5IqYMmRQWWOhM/sQXKf3z+qH3ZTeTSe5i6zo3WLuMAVk5Wlw3EM3ykotHSOCO75hBM8cNC+yl4L1BCFeW4L9SB9M261ZLmE8qsA86H9VLVrtqXNJc7E55So8YjYShMxg7hBigWko77WWNNEHSQl65cC1yLIXwqHhZ1HQ0umFnq7iiV/kzP6m0DIWkKa7g1T2B3X4UUzsxKL+J+wSPw15KJO4Ovxm3BunHWMsWBA0+nyZ8AxkZZ+XohmoqfrhugIPYQCI7961sFvA/OqIiYLlQTJuKC9TMjHowyuBaYsEdzKxMGJiwb8ejAtjMtOv4HWs6B3V+1QwOabPmpBboVLmkYqkXIfTvKjdsHuyU0NOzjNCj7JG4MAgU87jlMHERtMaZgbpCDsPW8LpP1Tz8zf2kjhPggTfb7C7yxtQwsAQEP1QXP3q+y7PdzMigruRx5LZRYVOSuhVQ+B+LfRy3CiflqxSgH6QUPHT7wpNdviudbnWAwpLBOB1dgiILVi18W1FjbYGDFbqNtkDGXTT7vlzAgULuMhGV2iaSnM4zfmIq+QdUncdmanIJHIt7HwgRLzEgxjYa/RJ0CdrMY73UIrCuZ2wyAKsU8tm+DoeC5xOGHZaFotzc7tyBKipxS/zw8MdLcB3rFo67ozlrhc81gQeKb6MAwuHKRg6R9OCXwMYr2YFrU3E/dzLnd1uJVyqpR2OxtixZjoRpq4fPwcGYyc2rrcodjEbGCj5EB/NMh1q0SmcGdPCU98QU3xrDXGfTbonJGPyHE1p9K8fyJDd2rTo1UFRjGWUD+BD+i75kthR/RPnNDhrvGRxz6EB6LuTJn+JSj+8wWZzYiKjihAQzJV2j7/R5WX2kzXzzzOJ90CHShAcjfXfvv9uXWVdHDxM5QyXcUURnH8tRlWurcxTUqGAT0fCkcJyY6SW/ATc5nBO6YKNUVOIQ7I8RFFXOOKClXOLxBFxyqorAsweef7Cx2O46zlbwSvoP4TQ1+ixCgUbqr7CSCLVhi9DKwjU4cUUfcDFXwzwobIA7Kj7x1WhhSH7TSMtD6tcOX6dxZE708bmIOBHi06526cKceVZisQcH0gyCXE6uKA3AEK24l97RzRVIdXtfV05J+JJ8FvcspUSZCQhiaH7DnyisGiSoaCNGSIvnkrvLwDXERNRV5XRkM2B5FGgWsknMUHF8FU7rP7sKXtCtKgPon7ccJm66WSBQYDyQA4EHe9bl7y4yPNdRhZy7392ET1PHBNjdq1YAIKodfh2fKH0ooXF/0msE8JxzAie7opEcZuGmv4i4grcSiBZmjnNXt8FbxKcRvIebyBUosRXeqEfDDZxDuZoFuI494jJ7Rl2zg3CIIM2TsHJe5JtEJceu7wfrBM1VXyu4p6LuPaL+M5SNPwRHgSUVRCwtjiGV9AenxwQ==\",\"c4hwnP2bL7nS0U703oZOROBC9MNi73mpeIgbf+Lj3NBB1e/4vPfdX8AaBY/odS5h4QCaXPS+o02zmXc1VbvnNCVIqFGshKrNHJfPJUjRR5sKF6RqP3YFgLtbbppbVG0jpmWohVwYKqhlcoSGQSIXwwA+aC3lSp6cjeCBscZWwHIgnrFamw/8By6ZTHeaNdrQUAb1NW96QuafxYUkjEvVuSYN38VVrYXmNDhbuYvY0v2uHtVfhcbvehAz94r78kmuAl6TYHK4d1OSUdzgAuEj6acNw50onR/GrW8ckoMgDEGJ951w8T9/g4N5a22xs0T/jonTvKcYQZnpK2F23ndbqMasbAgw+NrLUAtAuNeK+AB1iQkAePAz+aQ+idCRrTIyB0IgdVJo3KdZBxq+OMl9KxzIckTwK6B/EBINBWvEB4f7VZWb6DC9WOXZMTbclIvA8f0YD1yS/IbWop9kZH2qd/UmHGjIhFkbJI1IUM6Zrw/tzf/HbdJp+Rl0XD8yO0G3f1bmZss6otDfCRdyESdffgoV8p3DdQnyrVDeJ+ys2LmVuEJy2T0iNcDgf0XF0W5XeYioKK+fBBAhFwW8Ht2GbCb8UJ6IgdH6leghpH7B0cCil06AtRz/8BhNB+mTQCWIB2O7rsdLpyCOyhsH1ZZHYcjpWacg79GrZ3aTwBUPNKZU1XfQagl8AwNXZfwEJ4H7P/ijCtn6nWoIYT9XgWYAHy4XIeiwYqdJTNQXHefnIjYgTS4DHBSAUg1wi9XODwJTntMt4N0fU1ExBKl8QiyRB+RMBDxqujB1tD8Ih3ZYmg3Ai98Yq4tIWGnCEZjnog9/VCt/I7VymJaDXc93X9gyewoMdr77Iz4q76soCbC098H5BzopOCy0gy8LIG5xOQLp/eIrvZ23JAP2GahNL0TyPNiMQkAkaANDG5KPeY95pnkZDmgMFg//d0GLatX83MZdMzIlBAAraZQMYK/kxV2/KbqTuZBqSfoJAiz5OaL9uMUhSC9aTwPGGOr99ViCXhUgTB3OSut95CUpTxHSiUoN82VJ/pu2TUPrUtLi4zvLn+jYQAk19y7+jkgV1M5FsvKYkGdZ5ibZnjM1LY30jHFGnudNQMWSExJHrm1vc46fdAh4j6jwEkjiCo2KFCf7SXLXqYJZjA2Lku70UVvVNclfUzfz+8kUqjuf6GkfyeiCvOW6inC3JNrbII1oPmN9vELlgdXtJnhmpLfMM8+aMdRV3L8EHOTYPZp2BkLd2f0IMEO+tUdfO3IhERLRog/2dL75ni33jqtv+fc2vvrQ3HM2V70dW7sslcfHMlFZxpglC+WB7WmeKg4umoWvH8EQTycqmWhEVpJjDb6747/LnHvPhNlK0qJScW76y70wol8Upepn2qU0vvewOwJNiiP0PQZ45eVPlSBOZjRjwhE7yqqs2PQRKjXRlMg7p3lZ7xYMlGNy9GZXM9MOYIzdce+8KaEQH+KpAaC55L2hfp7j4uwmxuIfACxghJJj1wwCsiPfzPNeAhlxPumbiB7kgSq6ETrFoRoFdQNfF92XyzVm5yOkPBC/iJCZtH0Rl/6PMZ6PAH+Rppai3mwnZgEArXM6zOOhMaQycXLcqa346id6Vgq8xwZIhDj6Ll5+29+kDr5ZNtsUsRfCb10cuE/9OrKlraUgN2RhR5rlCoHO5ohnHziUKyaBbyqkHVw8wZQ5e5E4y3Xbd02CaWGaklBUuOmbIwrmxpioGPcVqsXM8HoEOSZf8l9ItMT2DxJZog+gOhIW+UnOBSqsEQPPjfbDLOfIwWZy3GGxYiwMeduwPIrQeKCDlrMFeIuHruccHg==\",\"7HzQoJK894pKFq8GqJaWAXrHWT3RjgAM6m/QoK1qCwGWtqYzM0H3GXlA6audh8LPvx/3H9P2HljvN4K5zd1j4Igbfy7MbMDj5ehAbUEnVxK/PqF8p5nBGShpxD52lt8ugwXwQVreFZUhCk+Q6b7CJSKDch/awcri0Nd9M+8EBJ3haDFUBGSWKtm842IYBFESJczpsHgCGlWEKgvpiPzBw9Xn+kXbIwtcpticgojR1vQn85nx37h73hM9BDMlNt0cxCKwZgdQaYiQfY2d8NiPYHyvFzzFrfQNQiTYnXPaY9i622jFZHBHgpiIIxG5ZmITBn0k/dI9m9vcRCFjns8WPPDJJ1Yu6neRW9hmhJPydZFHBFSjub/vmR1aYuFRnk0XFXPk7iieNdUZ+62oO7yhIxEFaMPqQp/pYqpenusfQyZe63uObCRJKENv/sSdhJh9kyjWA5BnOAYPPR08kLJtZr5K299duF0vjnMiSuEDDMKxJdkET1lr3/wUPiZRKUAqIiGiiGzx49IsPNEiAGKS99cIAfKtBswQESyRMYDTssQ0ER7RnBP1uAYLUg8ksS+nEJxZ7YwCeIgMhIPymkzSBy/n+maT2BQudUZsL4yZLsLpcBGhqSDzu3Aa4ONby6k5SIBzKblzEwyAXMeOR5s/UI8gMCKMvwNg7MEun72dYl56NOce7L/B8jeZXW+44NOxHQ/h2lPl4pU3ODCHhkpZUPHZBlXeV03x2y15VT43oW9j3CgQxE6gnkGG+9vQmbfGAOkn/LmwI+VqZvzg8uDcW/aJ//r2e4Cbeo7sxJCkpHe31AgglgYZWjXe1BGIrB5RsL2QOsGRH5ZyGY6+PbiYdlcZQiRM8MmXhME3irrVrPEK1K4UmbkIt95YevEBMUj7WFMHaPuuaViVjejyX10459UUVhuKGuN2ukSWPW5GLGACLDYGMCKEsDZFn8SerMul9xo2egkSh6WE1znL47UkShYXIBJf0Y60Kg6dheIAY7DoLnrA5nHHGYgwdkVBTOVJ2PYD64pQxcC4S8ZC5xNeCH/kxTgY6CTpybMRoyO+Y9B4oqM80GKJJu0k1JWChENuY/GDwJoz25BXMlJr47zsCwlFKcEXDeK0xXiYetv5YvQT3TqmL26DhCj6BAEBNaLaCQlCXFkF9BD58MJve4qDKSfAjMnnuivmySdmHkHLHH3yINj49Zim8RqpF5ypSBCiOFb/ORLGsYAkU4IC1Dz8+EPUVwldP7VwmDM1umD6uJQ/ySpwLHAliibynBQ3LdKJ+0f/ezgUphnnxbqNYWfe6TjSKpgbWqav/3PU52UBhKMHUitoVMLqwWRUIQHbREJxBB17zAsW0umTdSuBDBoj/1lbhFmUXorA3c9jL5C54bRXrDhw1mqcgINQ5+bXYZPb+OkLcMQ/jOQ34JPytTsbM5z2+uT8tSvE68sNXD7yVAETJY9iT6JoKAaYzjCMsuL+wSbfYmsFcCZQVZJfAWMnn0rHMjHuxzDhdnIucJppHJF5tmZbPyysBMyHuARJiKi6KzTiI5ph69ihIfcoUMX6TVjgd4nXBy7JpQ4p4CCxB1zUXUNF776Uu6LmbTRasrXB7asV5te3ex/0Jn7A89+SHlxkKmk2h2VaogYsSwX30A8JPeul1qNvwoHrravO35G2v77NXHkEcM7LFOKM9FckWDCGdWYAd6nV85V7wZn/Bq+nAO1RI4XjRQukuJFVfve280HAI41aww8hjBeEcsKYPa8qfXk7sX6cx+VJU3PWZ80ndyu1XfdIAG53Ra68wViHJ+DxQxf2SfVhNOhGP1gjQDfwzjDNJ31PVA==\",\"OMLMZxngEePVQggajvkd0P3RuLuyl8/p3M8rDcUB/ec6kvm6v/nPKoDNX9Ih37zFiRvKAH5aXCzB+4HW30ErnlDXBpg56pA8+4g2EOuZQiupil1g2s+WjfdP3eyv79ZIikz+LUT06JVXKRHmkT8T8jyRA89bskDAXZm11Gf8FpTFXU0s4uVVHws0UgYFHzgI5uU+EcbwlehCRM6pvBE7dFJYa2Ri8ZUI1+jKGh3slUnT2VQ9WSCC+VN9Y6zE0S25ZfBR4fT9/PCfXv///73/zf/9/PCP//rnf//7v/zvP/76lz/+/h///Pe//e3f/vNf//jz1/zxb//5t7//nz/++pf/fgr/4x/99S//i3Hy6VPS2pVuKn6lphz2w2Ct2RUc8Z5GYGbJNdNHrKgQH7RsEIb8YlTSgOWh8hkg267hc953g43VCITN5BRLy/max/cZT+7M0bxf4OTc9V2kzLKAAml8u9Kw7GtFBfchjjUDHAseMZmyNg1ryJZrGqRbKYz67Ah0vmqaeS1V7geiP/ppZbbLUs/AW9tSq7G0AOp9gV2RZ8ONe2CzLvM1GNElsiM2VoJ2sA1B5YJv9Ie9h4DmSlc6FCzg6qFAK8a0RD3sAkdwSm/L8hAYzoV1LlMPGdw1K8kYAW6HlV+wivH6UejImdeJt7JFIG7DviBN0n8BAGq/wl4S0cw0xkqJjJ8KCXDDPoKreB18aSN3JizkohOLl4SOnZ411rJ5L8rlD3vtN9Y1QIDeNVUSkOPX3vIdS0FRiR9XmGbOg+eEZJu/RqA9KtXFHtMo05js8+DSgX4YFjsZo8pC1qojNYSnlUBokablOjAD/ovntRuiflD+bCuuhAtHZUsUyYsMS84jxc7GK2YSsGxnVUcCgI7py0Ri73CPcBeCsZD60YLxoakb41p77ZUOxPswu0MwJmgg7ppmaaZoM5CZZ2LDg7o8RKhkc3ObQcade4/YuryK7yWIqK/EwbyoUsFDkFhcLjkRAWlasZgT+2f5z4qYI8kxmC/2yuV6J3Jl2+FLo6/rsi7U1pI+ulmyGyyxiFI8aMBvJKQQifEig0NVFT3qK+IzNX4r4eAQTbBdrPlm/XSUAJ1I65Dz4VhlUrIuEapg2Tc85clZ50DPv0Zi/BldsULleGD7A49CeRDRwtvwkDlqv3sLP9Qj4oJHtM4TyYknp4CJSOlDEJ+so4PVy0ooTahZJMAcQWNn5QsL7CUc4RYSmCnbTeKliubYuNdvZYXBC/F20ZuBoL9cUQx6SC/N2E9sEy7JnmpZ5FjYiOIC0W/HlZo0Zv8fAAD//w==\",\"jJ3LimVJdkR/pah5Nr7dt7/qV4QmrSpEC9SaaCAQ+vfG/JwsFLY8OmIgBNlJZcS957jvh9my7ANBB2pKuTNXbK8PaCNaTs5u6nQbneYK2FVKJvERGf8zk7VPbGh0IoMgEvoicYAr/HqWy2pYuZc+h5C0+GJzuH3g0UQnwphdkm20fjIUQANzcksGFNsHtw19k4y5XJRo1QjvuMJ6fCOyp8LaOHZqPmJqc+x0SN9pV3yykZoyI9RGPzxL6HLi0gsSkg69cAANvNdBRVonI2ASGDchn0BCZqGkLGZtC6504ajVrnwdLIK17gCKoXVNuzHaTkmfwLRS0osH2YlL4qD90+97ypNEJa5+07ZhM65NpyUOVoHc6Xts0j5sYiu99Hl9OHWuDWNrCrSD/dysszQv0JtcodO/StnPW2nIj+rLo3+HMlj5rUtCCJd42UftaN9N7rF87ap0iQm8pboZyTrcgpr5MVX6sVMrLmFAab4Vgu0brlGZSqq+RTRhb79EtBp0xiZj5yTgg5X4WkFKII0iRwEbLp9oq/Y9SEbTSekDxF7aLphaz+M2cO69niJEjJQ19T/4+6Upuz0vedRjHWLB1SEkVc5iXDBj4TmT0lm05TvGIXQRUfCiHMEZWCScl+nEZzMzWrnEdeuX+PjN9pwZkKIKHE+nfK/CkVVIDZboQw3gvqzDyQLnr5JUdKLUmA8nl6U1Mpk9wHA71b3HW0iitZj0dfAULZ0EsaSAKKD0rXUy2nyqmHrqYOYYQuyBIilZ8aUh1H+iQqfUWgNwPaXVdaN6TcnwsAcSecx+i1bHGN0O9praObvaf45RLvN8yUmjwlYmy7BHkdehU9Xre6lnF9wCqu9ddRAz14UPrH9oU0DcWKw23Y23qeBRgTm+ZGlOBd2mdFquwV8Hc+FyoNEMhPt0I0txX16YHvQWpO1RLumjOhQnYrmydz50ymKqmN7vZqG4z/Zh70Zx3s654eZuShVemIRUGWVdCX6QYJBk1I+D7JeMK3U4h9Yrl9u7IrUtQcpok+MLJihtvqfHbWmrv5nl0/oYWTnimYNZI0J0NteACHaC4lwG5I1aQPXuCHgPVNTATTjOjAM/rDTEYIRN5SR50seUlwz8ji77p4/JUowf591uBbkBcZgzesd0MvoBvpnCcB75awUaZeRiklmegMj2VU/3Bp7MsVhy1jkDYlUF2wdx+21DkVkVxs2oo62rq1HNJsM/XOpDlSxgniKq+zEuflr4in7NSrr27BmAt58dEuqP2nZU+IWk6sdVJuf8IoTuWBUmcGAy4gDqIQ8CQmNDM+3tGgHNmQbpzXMUTys9y16Pez+4WICKRIUDLEXrInfHiMS+kmWGZoDjAmSUyQ+/llZ8Pr5SSobHuT1IxwEpcVUGPLAP9czI8T7F1A0HScTWIQadjnKo/YdQtk2rPi6T3WH7lvF4r4IY7JlaY7hRfKUiPLztVnWIG31JSYmQyj0DcBYx7NqAWWBLy4p3TDFlfnWX1bcPtTj5fka8x52BWcBuve4kGFreUP8Ye9HgwKuHo7rFnEeDjwbiki6SdfGFt0YBR2h5Re33RiSmCCbaS7rEUBjv/HrZyyrhnZJIjrnANZKJnowsceExT42tHNcK4ZoUsY7x3Uo+wPR8zI9xDu8Mre0sniGqmqIA97ZOoGF+PS1SmGJW0Ca7ZmUFRbOAFn5YyvY68IWdNh6ijLPI8egdkVy4ZJs7ELPeVhbY89vIRRi6so8nannNIaU68lDPPZtr1VcBMUtjuY05vVwBEE+KRIqFd5WmLbl0EwUQTkK1qvCHDiUGIupFUH2shsQ5GQ==\",\"7mHTUibAf5qyrYCIpK0bGbHHYLmsONd4un/xWD2HfxnIYpdEBfAoAcfqxWnW1gDPDaORn5bF5fRP2doaWEYSw0yE7Yg8MhEHKt4PIj41cfdMvnqkCZNpnLqYEaCgsRfCPHRLeSRKbSEpJ2A/FNMUiZrGbpAAKHnEty9TeDY79o9+ueMVnrrCK5jqs/EyOXRvr7MltAWnWGVQASJDcQoNJH6hMHwzV1vbG+GYU+F2PvHfWzQqF8jIY0U2Ljf9T9WqRhDR2fOSY3QbhtZRBoPpVEgq0GB9vQkQwvoSRR2ycPtEoY6+p9MHm+7jy/ZLOD4nHg2t6T2s/bLOv8uJREqscCoqLLM1MK+u6oXaZ+CFOclEDbsFTA7fRMXdnX/QMqRHguhwKtOG4nZ1ZbVcGMmJHbfUGr6wVMZLECFzaiK0GV2vPePp4lBC3Bpf6wWhfcQKm2r+hpQxMRxdVXHdZmts0Scq1qYvd4OKKy0NxkrPvMz3K1quOm/oFLKoQTUpDjIL9iBmdW4T24VQVBuuYd2lmE/U1Fmyvjg1n0+6yzPAzbAhZZ9HS2Z7qFxrV/SXYzRwyzxbtpkJCoeY4MPu3kxFozhnNjUaxVRNg5ePbeXzmy2ZglzxKLbzZFz9HprtuVFPkBWHdky1lZCYaw8UVKC1qQPYB6xFe2gPFPOf4E+NeqxCnX9fjeHKa6rPQfOlhg4DqJoF4oFD9edof45A+M3pZb6WJDyfQXrFqU2+T9nV4Lk2PDVGtQagz3HZvWpneCH9bTkzXN8gCxS4/6PkWM5tCV1GDVtaST9acyFUO1o97DW6AqvCiw3lUiEVYQoV7OgZuTih6tNFI1c8aBgirSORZTfuvYqMJSiY5R5PpJmUs+b0L7atk9sxv1juPA+Gsma8kFUKIF66uxwNS7r73PsnwF35wXjFZ2C+HNouucpWkNydWDOOWMUNhr3mKrY/aTtjbwe+rt1GAtjQAxQHvoPPSmQVT7IUo+TDI/Rj/0W9eJl//Jg0HS43Yt4HteWsB6C+ljnTnVNNnzLybvvKUeDqV7m3OEKuAshVB7WJwDq7S/NTMxgcRD16GdUp4esEr2DUkZIw+b2oNtXn6LcHS8QK7L/bXIfC5zyTWgBala6q+hJPZ6YI/JhgS2WHL6wjnFH9MbiGTYO15iqMq7ZE8P+FbvR8Af4I9yGVc/uOgqId+YBvg6R+QuTwFOwbDCwJZpjHGsFUg8MVothCWTTpqB4NKeoFXj2Er/EvdgmB6+2oqlXm4w1xl/1C1+InYVg4S24UD7cJ+AH1I+VUdM+OVNihYbmvuMR8gmpINRyhglKPLmyuqsKq/PWWME0wFCTkCbXgIschWICfWrWW6nvN3sZAqoA0xLuA19h6x6tZu3xw35H2aaSIkchS4j0dtiLn+O+pwhoLazWubhMXUyHDhc1S+IePE65v1l2VJ6WzflQmjhrj71NRXFELUrtPUKsIGpBiidm1mDkkVEHD8Xyi4kHS1Ly281NQoqPPP7rCrjBuu+1adhsTx55ez7nSI4CbSIE4Ys7Nz0y71KXqRJomw7+PgKbKPVx+PcnpU75RolFXK9wr6A7XSqcuMXmRaiksYikc+CwpEkDFURKpLxo0xprQmLdo1UslrS7zksq79ywYRV2vGoUW77awHLpNWWVx2UFIxNYR7k1Cnb0WlM1D6HAfdNe6kyDkw8tNKHDbEmoBIyZBJSou7BML2/3Ov8sWj4If042hTGh3cggAUi+u3d5X8Zz7vdZiMXu0P8BBLh8vlLNCZZrjReETKQQJGorRa12wopxWiRl4ypt37dScO+EmPPvt3cDH0zSm8g==\",\"u6n64rGz9qvwOQFOolA6JrEHHLccQP5kxk1uJa+2Um0kGberxS6+3PvkpKasHAwgkAijgwsqnHxjA7RdBlfFu2D+lDT9y/vmOH2zI0KE8EqEQ2hh677ptVdHNSPgujdQuokGKQBrztEh+jlDfzh39hJG3OvvEHYk3c2XIlu4uGaPIKzN5T1P+alBTKGmaxU8ydKPzgJEyiiaOju6xTc/79AGwRKfrLjK2WdiciGTTUB8JRH2hHIqtAzY+GxblVnzEqM6euFYrEnQgMjyNdMPfK6snw1slO3TYaVR0+2peWVwoyD8s8IXsVmr2x+8DJEWN5KbNTiwJyTmWp6kLCd0ZA8UbIq6Q2zzdcJ9bqi8hSHvU0oDHDqbv9It51yrTfK5MNhTVPekSeXU4njRos7qEp8zRdR6ykuNIe6PaxpyLK/RdaYsZkfnkTogB0LYHphcVNvhCB6FQj7VP8Vt6eLv9vzWxFStdnc6QW3iD+KoHdqPMpZPFBPXMwwZs+hgPyNGW6AI+NKnd9D7ZFT653qzsEqlUZzkIt9gdZpSOZZyKy8Uf4Ut3lWUdzIvcausncUz7+m7fj7UOYcDTGIc+f1X8pkXibtaXx7E1mov9k/phU+aibS7wQZtl76jg8anNE0/vY/NySUOW6oF+FRHnHRKjCR2zoJCd2U0QHP0WUE1qmHlgglvr3RdkxY9qjCxuC8zmLAiTR/IdaieXz2AjCn4ZOVlhINjtgFV0ZCpDRiLKotSYsErx4/fwWKiFbfaaiagbPD2lcT/qcSkKMauYU6VMuMbqnk5IbHbUz56cQGManS0K9ppeADksWZPBBTrcGUi2TGUHkW+t6lK1QFI9Bixfea4Tqqg31OCeU2gpNE4PjMvDUnR5q7e3Zi71plpf6vMlr5+oEouh4vsxE4VJ3KqWhkitiH57S0Ua+IDMpVj6X6TCDBhKOx+kT27h+OU1NQEexi4iN+OrYZ/NxhbvfdUPUqOr/gFf6be4dsRxkt4fDextIJwX+VVKNXEh9pyFLhSWfyDSmad42Ke56OvBqi5JIFYCxytdglCv9ZagGy82CCIXtdIouGFd15JVoDyMLpfLurPSCqsu5UJu0ZqiEn7geJeB+0WNrB9p+4t/A9TFFRIlS+ml4Mcc+T+1Z9N39GzJi67MiO0COnmV0ZTQGeg1helkLk/s2nd2wg6RIrNve6TQrcPOEAUYJZ0A62OCBkBrdPn0LLctCC1RiUW6NlHMucV1m3yNncvLmwrxy5HMySgEW8XFI2Lo5tfpR6xElYk5z53N+SS+Kd/YV97KXUqU/tXlusfP+MrOlVN+9hz4HfxLc1z3qsZ3C4GyHLJ0a1iTQFmvAhzvrMstCfmWlRtxSVcM9rw9FeplCo4irvl9odQftaKd/aqZo5U2giOLhUzH4/qN5+97A5z0Mo2kD29pWV0W3M7HDN7XuqoFVEdt92TqmIxWVD9tdERsKd+dbJ8PPJziuO6ZpwuCJ6SkGGqgjOuxRCGH5OSrviL8MZwNF8qXnBp7zeztwu6odB8RxRZg1ycSy2kgvKME8wPt4OP+6HX4FoNkcJws1ME90w9V4SXTT1O7NF3NPHRdH3QFagVHj5ZxYr4VL1NIbkw6BHJjgL8kbtV73hFkgJUSxrTBj2MWLbeMV/ujvKX2LUncotOjAxDd4DWeAIeFL51ocNtpElo6ti2D1NZEz910MTvGgpGSdsJyOp9SVavOwMMoSf/OBBf3hlJLnHGogiujcxcZFqIFYGfVu5lIvuXROx85mpfPON8kfzjZz7BIrdXulxm3PYyRwKIIANzrG9Bh+REhVP5aJPDL7AuCw==\",\"ktvTr5iCSz16ryZf2Ky+YwZfGyrhOX5kifFaEDUnqDpv+JI8WP4dgDO7s0+I2IeqKpcD41d/KjCRUVyYLm/BLdlPGCZvPcbxEgMBWhX0DkCVxpfgZGyNmjAmCWmt/UOZSlCp39k+nHZxAaalqZoXt8oXRKLUJ/4zgJ0+OwlYA75P8Ehs8mbOIBlZavXtxbGODDRUgg17DOHdGXhtD1KtsuPv1Mikh/XJMTL72vmlmfz5x3p0PANKR6do9lnyup1KvcgFkF0PCBHHXh27c+k/09PxtLVI93M9OYDO36zRx07kJgv/RhPiKrxST4IXVC0HsTsu6QcVLJ8YUtqgALjPcX1V9HjS1seombdck4yPYKqZ1N+G7EPcb0YTTXvBLDeUxkvUfsHG//xnS4dBQZ8OJcC6faDuuS/HVMu67LDosWUilJNnT66pggpxzt3IkwduZUEOz+M82hoBD7FUciDn1N3HhQfZwB2jJPYtPGX/8OduKKgeloyz1oEjXlCnQqjvELeLIZyKA8JMaOxVA+FW8iLFQHa6yoBKJo6gxYET97jiwBYYW4EKnQUw58d9zzMr9qWJ3PF9fuUAfNNalACCXVifdQ5GR5uV5XFfaRPk0BMZ2BYwIlrALqfwKkXFU3xiz70rlga15uZethwRV9aOc1OWB9fzXoGi6g92MhtBLzGDASTN8qzU2wkXq8+d4GGVpVfe/yn57REBW+S5TBDfhq4PH+GiXHrra6FiN3WiupR8DnSwqrgC1xQS06dxAm7bk1dP9wfXgnxoUAkqmX1gab21r0VtfNUO9oP8hRUhzk7f4TEGunpEhqqsB+Ij64V1vbtWe15b6NCqhVSLhrajHkyNwafeL8wnfKvPis5Nu3w8hzkCuuL7kVk0AUeSMCDmr1P6qKMxs5L0EofjKrtWDE+PG6CB84ey693wj49ooaeSEi0VqJwcC4uaplAaT3SOwyz3BqWFzEJI+5HuxcczfakScvqhkCvznwtpPj0S43gsv4d0lKBkDCYnr5wLNcUJKXQ7RvSS8ZXn8b7zfWBpQxe6W5VHlklW+K63aKctmNbGGnL0xUCUU1NMSh9WBdAwdiK8WG0eFHEwur7PsQzvgFzE+WxwSMp76b/D9daGnfFBq6+dyNyL3rbnwKo+7zPyK4Tnp5xIlT4L2gENQ8tlI7cjYXycqRQeDtBTOZPfWKdLTR8dMwVtcQeU5wQPPPWQxhJAP0wxpumGbBOEnHom+3AAt+MM/hLm9f5jLdwUAS7Tu7lq/uLXU0XQ7DNPJAppmxaJ9+PzKvRqkhdO1oOwtHEWAAXm7FnD0xaUw6p+hmDcslxFKHDXwvyznfGlzQmV90OquMY2udB6rOzwh98TPsT9KkxXPWeHfwj6xZC9/rjGCmZhKg3GwnMrJzd3qJdfIrpix9G/iY7ukcKqqovve0OkOS+PLnaXquB4Jr/U5a5gxdxwbhXHyV54gytYELgrl1o/iXCzOAb1glqPA074DqYCTJG3xa278aHUEmQxB0osAe+HIa96tAwR2gf6wWvs4x/XCeXT8IljE5AdCvmIfJiuQ9YxjFUCfvd26fq001iqHnhvq7D02EcLDAnakXMU3t5pRJkUg0ef099WhZKD7U2F4zOhzIIOdGhR3uDvc33iS8jKZGF59M32ouU6pg0KwZis8mQmg5oLd91TF61cuHyJ43qDUWTTnbg8tWeGoHx2ody8ta6a/qFAl7DHP4V22ME+w7nxRMuhWTG1Utz3xAI819alylYxHClR9tTKxacZ+1DyINhSbIJzlpfAaPFFP/apWEnEykRurQD8tXwLqgZV6fObjhi1XQ==\",\"0nSNnPUKDgR/AIjltjpU8u3AjqtJKkmg1+000SgwXKbXx/keWfINx/Odj7ZBLaX7qcM4Izqnx3jVY5ewh0uh5oXePwGO0SqDevyOfyfyKEWqzIWv9vDd7SnoSoUqi3C9kdXpU4CXPb+r3CHtgrvsSCfTiRxlAheiL3ddbIIZFergsQdJD7cFkWR/k9+X7jogHUIym45TRjFYffgdLB3DBEP7nMtwJbQ9GP0mEWyQmelbqs/nQ6uegOdvQDDkxZ4bjd6h1E8krHZK04rSNCYpvk0/mE8xeWe+7J65KdS/QbxPLZvFsSt3UaMWcNO3p3HoM9A4xBiRNMN2pfbSjCIbKO18SrbrvgaLkzyD1WSA76tZRjR/yqNn7y5FuzMkq0SvLRHeLamjT0liH4WZ14mX3InSJd1DHI6Awe78y9onA/dU+eXGCSq1UiHzU1cjdlUac3lUezkbS082UQ+moAsXWkyzHr6ir7oTrEEFviysDGtIy/+1xu1nYNzqAq37d+kejR/XU/NzuP7SuMbPJlWcMlf7IaRROTZudfDY7+eOmdy99KwXKot9vq/AVHnu1kaJVus+Utl8p+edKAwQK6ElahLScISZLph/CFeUZL2ogkpsxSMK1rSfzFVEPSycmkrptR2JvNxUSC3Tk+OnUwW58bIooL8W0mygaa5rdLXZTuHRS40MzzVi5jc8DkedA9hY6V3IPS8XsRi5vk1P9TI9yDyUs+m2sPu7CMbqa65bqf/DYS/THtRQW5dZcuJWKzPP1XenSzukInXVr6jP2exP9c9XZN25deTxeu1GY9XJSik0/Psk8xlEri5kund5cclamnv0BeU1CIdPPdPn2BV2/aXa1s7ULeh7g9VGFGC3aEzFrUB53RV6eOFcnr4W4srLuSEOUGGkuNqDWr1ZVqxeK4nBhGxqsBiXFrBjC6O7PDpXQVGzO4fkaGEvClVVDnjymxJEfAlTQ3FCKBFkyZuMgpHF1283aEwfeYey1jmbu/WJ0qdwpV+bj3GqZkYJ2Qqy154Vo/6McUDRfd8R5/P6Mr3uUzdbHActLKG1C7lXCZPZ6J6vCtnsWTc0o7BMPIC7jUgrqdemy7xO5C35FIIe0tKvAiDsTrkbNa9RaPJWV3Dh2gmi9c+1haJ/cZ4KSrWgwIyF7GJ1Xarr/3np+8h7cyH/TzKzjfBQrt/fYuWQzl1Gs2r5KNN6t0A65f0Cul4fhMbcI1Cf51CqxfyK8fgOw+S9wfFdtY8F1ypVPiOkslN8ElWvJ2QMsmZZeagx8f5SZPz43lM3k4fYrtbAKDnEPUb+Cqzmo6XLaKuJ0oLlSciguIJkiLFx/R3ESBCFp5cO7OZPiquby7HsXC0g1BZsgWR8Zlg833cFTKSMDh1mng2Ui7exm3sTyw9A5huLat0xqXw4ClECyIu5swGud8jywILplkVmit6vyVmgvDDeIZzKBLJ6rAGf3lRoM2zVe43EX9UKP8AVP0EVE4eMeJh1f8FYeeuVzOVqhasLWGxbVSzeWV5DNdRaTigbwJR85005esMYS3UB1Vo1XWGjxVpttDzk7iXH+4f/ev7//z1/53/fP/z1v/76H3/823//+tsvv/7xn3/94/ff//b3f//153/m17/9/fc//ufX337584f4f3/pt1/+xZqPmd3pYFUmUT6evQeYxnG8deCASbgnigOUvntTh6Bhc2lMaehkc5xI+k3wUesVj4ICgDbjTUaXnaL4Qk9t2ID5sujl9apNeCF3t6V0Ls7BOLwD8HJO7fzxrBUNZRRQY8VfRiUnMkDFVKe12HGx1w1hCIbLfHZckNdz9eEn1dxzNQ==\",\"FC1irDNNRr6RfuECpl+WIjENb/ljiE2Jl1R5ldMfL31/MqT4fZ0XOW5VlBzs3Bnzoyb5JZxkhTNZ4dG+/Gpy77iOL1LqDN9eK1RtuWxk971w1MeZrOE7FLh+erxTDOmPYCqaBZG/+qqj40QdUtFxQ9QHjJNnqdiw1tyzFmYWywU3wPhovepM9T3C2NI2uLcr0nkyIsTLjF7h9b3wuOYY/hTX2dZlH7inWE4BglDumBddrT6DjeJVOuBaoatdg87JSZKTMHS70Qo3sxZ4xqLLSYdxZV9z0ysiJcUCRVrLcBA1dUgNBx4p2zO3l8RdRmST8ivntk0UikX/Eqq824l4sr69Ny6nxpvMKGzDp+canPR0DMTZd+JAF3vAtxXaFitIy+/m2YovVnvtO33MLpG7Zy8plW5uMNvrviirR9HAwSdKay5E1VWlShU3xT6oRmSwCyBZC65gjd6x8Fk9tu/31YMDEFgkWgevsuqE2AlnU9mbZoHVxfKEwz8O4dvnX2tIi+74lcPR6YNAdfHzYbKoOhLGhhtLtW66dXzIj+b6bG3JwTTZ+vd8FKsC3EuLM3DLr86pR8IzF7a4MofPh2X0DwAAAP//\",\"jJ1bkhs7DkRX5AmSIEBw/xubSFZ5YoRDufvnftyw2y2pROKRefL/z9/oRqiDr2aAnB4FL6a26gAUgwOrjdaHNcOnfXZmb9gPBHf9bMwrJ0acOCnIavGb4zNF4B3xz90Rx3Ycy1iPKfWC9DVZ/+rNrHFjRziUFl4LOapuDXYCLWU3xzQKSkcIkeJA6ndRSsQNd5eWJAhnkBbBAwefe9twP6rfWnwP2zMxhS9XPqxq1DsJV8Cxji7SA7XJw7NGAFq6yPo4pyd1ImfxNxjJLbgQPZSh8csmYnDsxMhMWS28LTSzOtl4gHDlp1H8b5+rlwcATSM8dZ7s67qXkNOOzLzsmYyaE/2pfk+kQIX2ILQdx8vVJYTxmqaL8NlJM7WznO0zLa1DcJM2GNuYz6XJCiWDSUJrrw7rkUuPVEevvmYgmMWCLHtNJWIHsyCj4hjxsbwyjdUv2GaVF4R+WouFhivn9gtMPwPQDdlYBiy65rIq1o3/7BTlDYXj7ksP1Oe4FKpjwCzi2wKhtRpSuzVSXmN7GUQqJsu95vAJBrtv+vDPL8wz5p571Co1hj4bmFOHysGqtZkaAWElYnsMfgtlyTTmioX2NaU9l18G3em1HlOBCXm5RFPrckr2rMOTroFdq2I06aJjw7QrocygBjP3II9QWbGDS2YIvMYZxdZy3rZOKGD7fPdEYJGkxA6v3lGB18fl+m/JRryRPJxuVqVZpseq7PBcQEmDvORg/3edews+gFpSgfaOx9X0FNexjQQJq4pWzsIzUXxP75+ooOf268SLmdIo0BFp9NXKRr7LUQu0ng953waQJcshpzS5iNBVbsVbYYGm8Y6BM4SPz2dfVs30t3dPPc6qtdYhvOdFmKbadlW9cPeTll5/g6Gk8oEBVQsEQcq0EXC82RoYD+kbvCeTK1o1AA15d3YNxAsX6IqMe+WWwkmgtZo0zNRnC9HGMExtu+pdMl3wAFw7U+Krem9qGl/zfsSihMFCI66JfPvbGyONugmpj6NYwnUYGsX0qaMFqWd9ggRzHVWaUr7rIjVDj0e9OaVNqWWOcpwGS8iDYxssymbuWmacdCIKsU2SPc5cpGfAUmWkbOE1CsjklCxqKk19FvI7ZPZRGCICW/ZCyy59ZG3/XF9GrvNHH6Muq0LfnDqtjhHJ7I5Yl+deBKdVtRM8eM8ecY1kEqKG/hOrE/kqJiLkLq4MZYzPWQFOUn01q7agLaIoE7N3Wsdq8TQHXqs1zf2aM1Y1D6Ye9G5ZMNCL8KR41i+C+IDEbr7hshtqgy+JK1NJTfUniAAA4ZC4QkLz1ctGkauLtlvdTPVh0ncU8vcjyocCTALvnAhLz5jg4oVICNSVTf/EMTyU+1ggCgutcyFwO3PNtCWOgKXQZYcCQNkPuwvS5BWb4MmdIxxtv3C4Y+N2F66uPGEuD4URp6KVQq1ZFvLK+pi26o0/bCUkZeLMTOAolr7PFj8N/p+iV94tbEkU4D0GCHhbrDZg99X80uwmPD4V10qWH3BsKGfzElQ85WBsHT6IuVYVAkoYQK9cm44PVp01avQQNR07EV0BxO6v6U4Rwzhk1koMEisaovNM/8xnfTkd6wjQiIAbNZqmpV5ZOW6FrZiGH6upWDXBj5ErWuURaw2WE+4OW2NgWDebYQSglJMOb6TiPudPB9cbh+fOlIJaiLyHidQJE7oXtfzg+nTBHDsyCWZkHfNzP/rnWpS+HVw2OHf68LExIRrrAEA/3zA/nj8880sWTwYzLM3PDGGDveZHCz7aIAvTO+5mdQ4ctltNOJIsLntd7gmQDBNf111RY+JEZHFgOgQ3jA==\",\"STmqJARErIvSkfXeH2OZxYIIrW3d27Az+4J6Zhw0WN1Mdb012aHpkcVmIwx0fxoPntXDzr5xInBn9DcKPJIUMYfuUOtY24mMn64IKYP+ts3E8EQ6htERJ3E/sKe+5gbGTSr8rI1fLO6ERoqsp5L0CYnIZrk9EJwt3Xe1cAmEw5JKMlszRpcqXOxzkPgW+EqsAsxU53Pd5Ys+uEifvQ63FIM3QUjRDKu2tXLp7NorX0eZTfzmRZmh+24YLPDJe+xpo+blSl09AX9YIxetGvsI736Y9rwsuZU5a2DA3rYQUnmWwtXwFt7XBXc9akc7VKRQGnB9TZGN0gSlcK+68dIYF3GYqYKy7tzECB5gXabskQ7QqIZg5acO3T9k5GefF1kWhoiPAWhQ5dr7hemWU8QYtjauyxk5p5rC9SoqUPdQLhW9/bVHvw1G1Xv4JCdLApuaU3//VO8SCjk+65siy/vEX9eKG/skjPXeAZbqmE74s0J06yT+7EIxiu8CbJSLSjuDMRLej4hV3X8ibmRFJCgCe26kEWg4B/mzfi3dJ8gocUFCsJSPhfB206ldc+hGi0us5LC+J+J2UsZVyNB90WrT55xYMvU9Y7fqwOwpOGmp2PQGkLB0hNWzdSZ0by3bgCtbApPVsk+V1HLo4mY0BIe1OeclyE5KWVplhv4sOJMS1Ro1pTuy7tWakptGvda5L3zXF57AkOQxCwOdEJsxGlNaICobIjvKQX2jh2GSppCkXdcaWm214Om3jDmWqj35JuR0bFJFLsrq/B0a7gHRKvSC1RZZnalMJFWZIDRoFYHI0IseRiQekAtsWAaKd2oAHsqCAmDQR4oxVAZh4yQJd2bVqJmug/20ROJQXysR/KTY1QsyzROZbJqpd3wdT/gZMoftWEVAVl2GNl7W/JqU2aUhhCFStLPZq15wi8RHO+Flbc9C7atCYHhY0hkc4btGpem5lgCvvKzZCuDgL/rfrHZKVZ/6bNfVpyHXwxQxg8TkVKc4CYjyUR8g4RwCsbvhoNv1IdEpRu+ymWSlFNvw1fsl91b/ga1W6FYrMKBto2ymrsqxriXJxLkytMaaFUQlLjnQy/pd5caoV4pQxPVzleqiVwRCiMReq53jn6k1tX4v1AmKn3Cib9XdYeGqQPmoAFIxrj79KE8rKEEwIndFgEm6Lo4Ksl7KcrQ4Zgg4baRdFxefRjodTXWm6WLog4WRayDOSFFX3plN6/LXwcE1deKgCNLIpONLP8InDTzYxT5CPfGV2WReRJt9qgKAqGQoEM3oaV3NBud/Qv8gDVxIpvqKQx15bca0zK/BGNx8v8MkCWTrOjUP9hlT/4CGqC1bu3orzhlZT5jukn8HyVxm5FyKPdnxWrt6karG1ZdpbtrRQ8SsXdps09kNEIUUrul17aiWviF+QPX8rtQ3eUyy01Gu7dTekMG7+nqoUFRkrnJU6qZupFlrxTjIptD2AmdC79W4hmHnm/LoExeI7ORjTwTQiSFQZ+6PGaPim/S3qcbSut4y0YTn3uNS9fbbWvp2WIkUyVHU9JM5VYqTUgu/8N6tZKLgYouhFS7Tdb3bm6yeqA/nEpYYhVyujTnKnuqhMFzqAhZcyARpAWjZxeSgzFsFB68q3821YWyaygbFjTEjmmEzL2tWJx9CBq8NjrPQ7tw2jxmthvFezS5KCgisOTSN959nhyhmn9FwSEEIbany7AHnmbNdzoNhch2M2nqYnDV1wqaA1tolKAvLJ8EnS/lxUDT1XDEA6Tibhqq+8jEdwMO6BHv5QFPTj1LNxMJ+8bpU6pJvDTgll9ZlOOTomnvULOKpbdgZPsVD9w==\",\"r/LLQfUdF+ugbABklNdP9/wGoUFppeIgLuIqdmxnUJvVc6zDTP8XhikpPqoS1z73PM/DuTzQ0sgTVLsEtftmOOB2CN9SPxdlQE2kz40Z2bm9qWfs8wJ6I4xzhiKjNsAM0ap8/PoWmh9DO0qOoeKCoSHVIPE83N1754XdhfuZXL1IeYOMrabAa2TQxVxEEMiQ2C/xhn6RYl4uXEn5JN8ePy/nui3RCktrJQ3FYhEhryUWmRL4YTYqN3TlSGmXjt2TMj6NoSNhDaUBS6lXyaJRbO2NBLrf0AQcsVa9qDQEXMSsC4gCS6Jw6nN38CXESam563VD+xe1H4OuLZdmBeecEta38ZDpG5s9PYkjax0giQ/ntjPSWpKod3Nj0fL5NAFKOOhA45hVDsBdlCQNVRt8DTKEMOytTQsIgJfVlaUffjwu0Uf4w8SgXvdEAuBgUa8lD45/WKueY2prvVuZdTYvXABRpEdFJrvEfbNuNEKpB3WgdXMxtJOTJZliXeTqprCq3bwdMaZbHAxIkz/Xf2MEluckgpuq3SgI0x/96QL6H/9+eBVkLVXDRABdJipd4JCqf1bzM+qtKJXBMPSba+81kJSm6UfCkmTYGhRH75t7onoHUi7FcQcUiy6QKRnIshI53SWHV1w/wb3UdpchCXdaipw0SAl6xLbKUZcFWQPwms7VJhtYUdr2tt/YK9sU4ANlwfLdLmr7/TnU/HP9x541viga2JscCun0DebUGqtcKKZNVezxi+0EprVfj1Gdggx6G1OQ2/z32fCmVDWpWhZpe7DxfZGDYN7/1kDKLBzEqJ4Uy6oTURxIc3gMM7YW/HDmXrauEo8sw3ixp+IKqthYV0yF0Emx2GsAzU3a2DwUnIarTyi/HODKnxSFOswYU8leVR6/FDUAka1k2TWjw4Q6X0w9UzpfFVGrUQCEZ5pZOja8qXO+yg3XCFqClHzsLLKVXhKANFpW3E6POD7oWojuCAPEol1YTkNzo3A8X8IyMDdJOfKL8PClD43O1mrreKcGjkFi32mLrYJlcIHv5nvXPrxrW+IME6qjshfD54MFnqBimyG/CqOoVMgTVFUfkC8q17ZM9w5m0jcoSzf5sSvnRIU2niaVPO5YVzTvRCNcJ+i69DR6pvcu2+fi9KXRDs8LJsm14wIZKyZ8HLcDxDzbKgue+73XlJcJA8FxCrpBITE7X5gd0XOdM8xlR4f8C5hEO3C4ehVh9/sV7zMUIAVCw/3DETtwDASs6ROmKtgDKRQaQPUqbcga8qdYrbmxNJNefv90Yz2X23JUmK97FWxUrd4xsF2HSoDj98CxvcoteMAIvXVh0vSdRODIOWFegxKFCXZMNm8iJ5npm2FwMacHqON2frNdR0oBzphIwg4YOtW4r+dpcUs/D67Nf1LNPq/KpGlb/1xcvitKyY6rSGoLZljelH4i2GBeXatik1/sMeanqsgnrDNnpgW7dzLh0SbzCmTVmkRA3X1BfR2SFb7/ImHNik0MzwvnJ/uG/BWbn4elaGInVC2zKmrUNc4kh6PURfzZFIy4MmXvWAvZB9IrOUgwtSDH4PhxLgniAjcD87a3GQBKQGGdd/aAwtkqhiEARTEhmt5hVNh8Jyrc4cmcDuWNInvSY/Dp0BRgA7X9BQSSW7TyOnDZ/TO46r3m+95Yi13/7EgxzvCAmkRq9RdTNeqtoheVEpkTW60YqbkJZBC7waLeXcc0psZnrcSU5pwTBA0NIFv5fbsQu9XirRjURJytfPetlkB9ayGBYjSVUlZXFwoPydnQIbt2/eMXm+oTKVBnLNOUVoLuUGf3Qqs096LLv9Ykb6qBcg==\",\"zdAAefbPS+XPjcvzbmg/h6jvFpGwTvYv/5CduAINq0xNc9iVxpAOHQsL9hctHB1Ar5bBWfCDuapBqCFgUWAzpf62KnJCQllo9awHjuvVpvhKP7iZnzNc6gwU47njc9TyjvtCQ6huv3hEu64RUkMsK0IAJJLnw90NE0QxVzlavtnyv4ywXj9jHcEtKevtRzrSu1Hfjqe+rT698pvHOvkrWeAQspLkL9xSd1GB4JvO3fscCQx2V9XDHdRSgHCdOwjkFPX4HWsYfcdruDno6h3qJ2XztPrvKLsmOwYsgnhXY8E6WQeA8SpoqgrIuxLvob5KXxO72SY2SVWaa8DCc+jymag4DBgG1b8PBNB/ce77JXl5Ks9w09CVicn6TarXu/Ip69dPhtpe0zhvLiaNxxxpxv0kFdVwgC4sYqdWTpKBamC+fjGFbKvdZdfXZNZb52R5IhH77t2NNE5F4sDs4lfESik/Wg3gkLPc26zL7XVGNpe82yBo9opDuo8p95Y1g4GmanIxyyJS60C5s+JFeszYCLEj9ebPd5nb2EnTvgIWaDvTk6kcN6wIhnJvoMlX7NXAcyde4iKqaPezVftXr//W7mZ1jNS7jt1qh1L+5Fr4LkyHDEv2Ya+QFx1FXnNUTOdLrUG76AC1Krr1ycqnNmpPtDAwa8ggvw46vzyeGbON+EWrLfG/DP7zN0ggLXs3gjX1h7XNqN5daS3ADHaZkieWJ5ErAskmysMJaE1MD27djkdMZlIrdQZqmxC8AGeiC3EAUXu5Z55l70w88rZVwSDp+srQPch28cah9KhytDNL1IAfn44GlNnhzRBhvhayitUe1a9JE+iz7JHxBpaTXAFG3PVMMwEFIOWKHGeTWM24a23kGc6t4Bbog1au7vRc2Ccd8o1l6HNC7cJD5lGLqM9gEPlNaBxbb+/nr9DDptXMqjPlzGpvlCSxGnyWFjKDoAVJ8oYDXZBKEKh64L17h1xF/xSn2kpR1iqSUzWx1vavPA47W3IQv3JAfYGO++6Fe+43s6jbyLvNJxS/O2ubpNV9vSlCA1OMdK4Ycd41b0NQECdPnxFtX5LQG6sUpUUMtvfCVKeTD9kgKruamuAfO5hr2dqiDhyvBaU2xPtCUq+IFf6fY32KPZCNqGDpycWxtAZ4lSNbB05HWUkb8Ywhtm6FANyA782nRaW0ShDkRCFMhaZUSnaepIfxC0KXSuFZU8vM2pKCCFukIX5t5dcp853WIbGF626KosorfY/4whfSZrPWQApuMJ8V/y4VdjRqtWIhQFF5r3t3Ol+bVwqDFvZ9IRXK2+UbKA7YqlY5bWEGZMxHnY2nd4yaGjHm9s8m/f36Dau80Dv1Vsc9r5L2fNw5uN7ZtgcYt9JUZDXm1x98LWT/fP8aoIP9imsUS61V8JseDLMqzLkV3IrjcPQTrK9fC+DRE9ZS/Pj965t4HStY7IkxmmmYx3hRRSLtrC9CS3THbB1y9rsl4Hm+hMPGA3ZbvbaD/LJoANWqCOrki7GAf9Qmaze0P0OF3ARsqILdv4WAPPF/OH8hlHsJ4mG1mR8rvFPONPUiUEoGzrnpkl5BHVD1EM+FpGO2Hh1btRWikG8u474veVHHJ7u9FNOK7FyLVUH6pM5D9ASRNibcr45sJ6qR23+aDJGX52vGuhh3Qr7yViXS0hIDAVXl3M/VbAHqVz/yFaKp9qoUZYVvKBH+ByLDQxJQeBryTjw3UvV6+y8AAAD//w==\",\"jJ3dahxHEIXv9RRi7xW6qru6q/QuJihoMSGWZeINBILfPZyZScB1alhdCSzJXsmzM9V1fr4h2XFVTptllEgdkhqpheDr5BCfqVlRaIFYRm6Paj2wFMsXoePBTIq1SICIPe4/lqQFzmM0QoKXRWeBkIKLiMgMN+OvhUaLRr/uNjk2VNt3YCWfSqrx7MEhUbwPM/Oro3lCyLYGB1QeozqUYFfyKgY798o11Zb35sIc4m/srCwhxA+2d0Es+40rYnfU6V0dH8GsdlTGMS8e9jLCaNYknr5J9HlHhGaEOUhwKVlfMOJC9GXJxGbu5+nYu0zjLoqi9YehUId/UREnys2QuXhi360OLbCARkfdgfFsstaK7EE+DtDd+CysAbxoYfpFw+hgwaQHXUQrZvSZR4jAdEO5I18xncwfVhEQrJtRwSlu28Srl45ILxO8MNBmB9PoQEEPskSps3tzxSCkHxYjdExeA8w5BtAA3JNbaTN95IhTgObO+e8VuXerwGbsL9Y3nDWdXhRJL5rZNhICmf5igB9La6e2Mi3H4JbpuXW0wrJMc8smPlDPBwfdQGtk60ZV3oSObKWK2Mrt29aysThYXvkVpcEjmj3ikKMaczSHK1fVcLvPOdWr/BvQ1xeeXe4YVhdZnkBrjixAw+Gd7agGnY3eibVRxqYupzl8wFXreaMKQ4rMe1G9Evmzb7Zskk1fHcM5bRuQ6OMiAjSFNFJaIdgXRQBcd3zcejg8jYUBpDVqASSAI3ZYosTsxvevPLCB+pMLaxomoxxx3jKvBI8FUr4IO3pz9gRlQ85ZNIQ7Kupwy35pqJvnHxVqOXVqgkaihRRVNEuXVjaAsL0TegV+GjTT53LEYSP7Nr3Z0kXrAnXywonMn6nlR/lXpylUh8EOnAsPzRZHW+ZqHkLLPArHnHSb7gYTEBGz0wnt7c6j+HSKVMhqNOGPFtFotVJ2j5WAhhPjXz2E4YkeRAJsUFFymgncip7BSACq8YEU/QXpjG3q0CCydokcFdWuo1GZjxeO9QqJaahkIfoY3u6NVvc9XBpt2WPIpD6xUmJTZDSpOAQFR6NlOF5fIR8wq5WB4XMKlVigdoSqS7ayV6J8ZajMIQ71llvmy0LILoOxnAWx6jyprjZDsuol4AZLOtJrBORHdvGtpU58WoHPgwodgRimoMrGyKBsTi1gFkDDIwqxhCu4JJHoDsXIcauhJBAIp/kCQRKq6NVH5U0kv+vQNt1JcCV9Z7fGDqfCL0F5EsdlcD15o0jGwJMlyJGIe7NkLEWpXA1D8Rt7gcugF3NQGiTn+THDLUS+2fuHoKXLrPGOSBXRTbnzvDrstts6Kd+CoA8vbv72wKSen0TQ1Kjmtg8cbwmhS3H1s7Vo3W2FCX5mo0Kh8oNAEgQ1VCBEiAaIUEEOVTezNSirotCBnTlPBdTrZIGqaENQ2gRsOFk6LAy0+1Nwy4aRTMElaSfZgvZLg/MzR4NEu/JQjhcrWddF053TrhVNpvlBxua1/9wTqd5gN4OHL5q0O1oVs2AsaPGc+d5ODchPpdu2bK+ruwq3/8a5EISiyFUPrGspHZV8eWVaoGxBOAwkSIOlQRX9g4SwLCE73BG3V+qiU4q2QRJqvJ5P4ux+M2vZ6qc+olNne0VX4LD5XqjXbWbtCFsELoCEukArQZl9rVncnXwqWWKAAM3a9GxrDYIFKPZuQQ1m2Sp99Dh48yzvcBP9risCTWDz3ph7sDuAUc1eHaRpnFpw1rCMBJAE7NmNCTaNKA4dOBCR488+bR9/PDw+fsKXXd7eX69fLs+Pl9v179vT9e236+vr718/P70=\",\"vL48taaX7Yv++v7y+Xp5fvxn++bLtz/f377dfr29/3H9+v3y/Kj/TwKX2/vt5cvPn3nAP/fj4V8AAAD//w==\",\"AwDTh+ar1IYBAA==\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-03-11T19:13:25.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "9KG4xlo3kkMKATXZ8EfW46xsMShY4dfWJQIo0UUCMoQ-1710182605-1.0.1.1-r7grSntYf3lmqr71mnVpDFmOkDUDrzdDVgo7vHxjD2PbVhjshTQdVcirWIlzIV98NrDzo8Dm7C6e3KMmLvOwUg"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "..jKw4AP3Q1UbHivy3er0qdujFB.ju_z4Z1xWnB5KRM-1710182605513-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 11 Mar 2024 18:43:25 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "83"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_701f418a7bfa3a4dd62e5aa638b45888"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=9KG4xlo3kkMKATXZ8EfW46xsMShY4dfWJQIo0UUCMoQ-1710182605-1.0.1.1-r7grSntYf3lmqr71mnVpDFmOkDUDrzdDVgo7vHxjD2PbVhjshTQdVcirWIlzIV98NrDzo8Dm7C6e3KMmLvOwUg; path=/; expires=Mon, 11-Mar-24 19:13:25 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=..jKw4AP3Q1UbHivy3er0qdujFB.ju_z4Z1xWnB5KRM-1710182605513-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "862db0a2aabf0e13-MXP"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1066,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-03-11T18:43:25.116Z",
        "time": 762,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 762
        }
      }
    ],
    "pages": [],
    "version": "1.2"
  }
}
