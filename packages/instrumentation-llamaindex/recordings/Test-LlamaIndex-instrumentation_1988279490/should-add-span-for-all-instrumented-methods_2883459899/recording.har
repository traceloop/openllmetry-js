{
  "log": {
    "_recordingName": "Test LlamaIndex instrumentation/should add span for all instrumented methods",
    "creator": {
      "comment": "persister:fs",
      "name": "Polly.JS",
      "version": "6.0.6"
    },
    "entries": [
      {
        "_id": "35e4e3d1b757b5697226d1cf6efde888",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 95,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "95"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 463,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"Where was albert einstein born?\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 10196,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 10196,
            "text": "[\"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\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-03-04T12:35:59.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "nQSFqeDoNXuPG0Pf.3wPeTomTlad9XUpJjdh8AoRPTg-1709553959-1.0.1.1-27lXE1skOtMjwTyXt98VSLWjyyexrDIz9GE8fQwT.QNVQP53VdsLEzN0BaY.MU65XlU4wIcvd8KZCqw_xAjWUg"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "2kDAHmFR1ud8diK.7R3AsHvoD_7yJU9sdpLBBepQAuY-1709553959085-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 04 Mar 2024 12:05:59 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "23"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_3f9ebf5d086222f4253835c062894b1f"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=nQSFqeDoNXuPG0Pf.3wPeTomTlad9XUpJjdh8AoRPTg-1709553959-1.0.1.1-27lXE1skOtMjwTyXt98VSLWjyyexrDIz9GE8fQwT.QNVQP53VdsLEzN0BaY.MU65XlU4wIcvd8KZCqw_xAjWUg; path=/; expires=Mon, 04-Mar-24 12:35:59 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=2kDAHmFR1ud8diK.7R3AsHvoD_7yJU9sdpLBBepQAuY-1709553959085-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "85f1bcd2d9fe4c3d-MXP"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1066,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-03-04T12:05:58.799Z",
        "time": 404,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 404
        }
      },
      {
        "_id": "b46a7ea6d50c48e02d597c41e83be54e",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 1357,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "1357"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 471,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"gpt-3.5-turbo\",\n  \"temperature\": 0.1,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Context information is below.\\n---------------------\\nAlbert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy. /*\\n * Copyright Traceloop\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License. * You may obtain a copy of the License at\\n *\\n *      https://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and\\n * limitations under the License.\\n---------------------\\nGiven the context information and not prior knowledge, answer the query.\\nQuery: Where was albert einstein born?\\nAnswer:\"\n    }\n  ],\n  \"top_p\": 1,\n  \"stream\": false\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/chat/completions"
        },
        "response": {
          "bodySize": 452,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 452,
            "text": "[\"H4sIAAAAAAAAA1SQO0/DQBCEe/+K1dV2ZCdy7LijiEhBCoQQBULW+bKxD+6lu43IQ/nvyA8SaK6Y2W935i4RAJM7VgETHSehnUrKc7albPskN+X6rVm/FNlZPKeyO+p2uWFxT9jmEwX9UjNhtVNI0prRFh45Yb81K9JVni9W+WowtN2h6rHWUbKY5QkdfGOTNJvnE9lZKTCwCt4jAIDL8PYZzQ6PrII0/lU0hsBbZNVtCIB5q3qF8RBkIG6IxXdTWENohtgPqkFPsJYmEEoD3zxAY70BaeBV6Rge0WtuTjM24dfbXWVb523TZzQHpW76XhoZutojD9b0NwJZN+LXCOBj6Hf4F5k5b7WjmuwXmn7hPC/Hfez+pXc3m8ozssTVH2pZRlNCFk6BUNd7aVr0zsux7t7V86YoSrFsFjmLrtEPAAAA//8DAPDujBP4AQAA\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-03-04T12:35:59.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "_GiytcR_rpao8AXfO6c3hkEFY2bks6XC9c0NllXAAJs-1709553959-1.0.1.1-BCIjjQWenZa3Thd2ypba.BawaPSWgXNqmeh9skhkZvPbTlofAHIHoBIQnCHRQ1LT4Q9dtMHI1qQtNT5fkGoikA"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "eBEwteTQeWdibP2mRG9kH2oNIjLhQDjDqbbuONKa3lw-1709553959939-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 04 Mar 2024 12:05:59 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "cache-control",
              "value": "no-cache, must-revalidate"
            },
            {
              "name": "openai-model",
              "value": "gpt-3.5-turbo-0125"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "454"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "160000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "159689"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "116ms"
            },
            {
              "name": "x-request-id",
              "value": "req_ec48913955b4c237af97b7a8e41a3881"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=_GiytcR_rpao8AXfO6c3hkEFY2bks6XC9c0NllXAAJs-1709553959-1.0.1.1-BCIjjQWenZa3Thd2ypba.BawaPSWgXNqmeh9skhkZvPbTlofAHIHoBIQnCHRQ1LT4Q9dtMHI1qQtNT5fkGoikA; path=/; expires=Mon, 04-Mar-24 12:35:59 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=eBEwteTQeWdibP2mRG9kH2oNIjLhQDjDqbbuONKa3lw-1709553959939-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "85f1bcd57eae4c3d-MXP"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1210,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-03-04T12:05:59.218Z",
        "time": 693,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 693
        }
      },
      {
        "_id": "fac58f8d5151d1346f55d9bd1b22a387",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 8408,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "8408"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 465,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"Albert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy.\",\n    \"/*\\n * Copyright Traceloop\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License. * You may obtain a copy of the License at\\n *\\n *      https://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and\\n * limitations under the License.\",\n    \"* See the License for the specific language governing permissions and\\n * limitations under the License. */\\n\\nimport { context } from \\\"@opentelemetry/api\\\";\\nimport { AsyncHooksContextManager } from \\\"@opentelemetry/context-async-hooks\\\";\\nimport { LlamaIndexInstrumentation } from \\\"../src/instrumentation\\\";\\nimport * as assert from \\\"assert\\\";\\nimport {\\n  BasicTracerProvider,\\n  InMemorySpanExporter,\\n  SimpleSpanProcessor,\\n} from \\\"@opentelemetry/sdk-trace-base\\\";\\nimport type * as llamaindexImport from \\\"llamaindex\\\";\\n\\nimport { Polly, setupMocha as setupPolly } from \\\"@pollyjs/core\\\";\\nimport NodeHttpAdapter from \\\"@pollyjs/adapter-node-http\\\";\\nimport FSPersister from \\\"@pollyjs/persister-fs\\\";\\n\\nconst memoryExporter = new InMemorySpanExporter();\\n\\nPolly.register(NodeHttpAdapter);\\nPolly.register(FSPersister);\\n\\ndescribe(\\\"Test LlamaIndex instrumentation\\\", async function () {\\n  const provider = new BasicTracerProvider();\\n  let instrumentation: LlamaIndexInstrumentation;\\n  let contextManager: AsyncHooksContextManager;\\n  let llamaindex: typeof llamaindexImport;\\n\\n  setupPolly({\\n    adapters: [\\\"node-http\\\"],\\n    persister: \\\"fs\\\",\\n    recordIfMissing: process.env.RECORD_MODE === \\\"NEW\\\",\\n    matchRequestsBy: {\\n      headers: false,\\n    },\\n  });\\n\\n  before(() => {\\n    if (process.env.RECORD_MODE !== \\\"NEW\\\") {\\n      process.env.OPENAI_API_KEY = \\\"test\\\";\\n    }\\n\\n    provider.addSpanProcessor(new SimpleSpanProcessor(memoryExporter));\\n    instrumentation = new LlamaIndexInstrumentation();\\n    instrumentation.setTracerProvider(provider);\\n    llamaindex = require(\\\"llamaindex\\\");\\n  });\\n\\n  beforeEach(function () {\\n    contextManager = new AsyncHooksContextManager().enable();\\n    context.setGlobalContextManager(contextManager);\\n\\n    const { server } = this.polly as Polly;\\n    server.any().on(\\\"beforePersist\\\", (_req, recording) => {\\n      recording.request.headers = recording.request.headers.filter(\\n        ({ name }: { name: string }) => name !== \\\"authorization\\\",\\n      );\\n    });\\n  });\\n\\n  afterEach(() => {\\n    memoryExporter.reset();\\n    context.disable();\\n  });\\n\\n  it(\\\"should set attributes in span for LLM instrumentation\\\", async () => {\\n    const model = \\\"gpt-3.5-turbo\\\";\\n    const prompt = \\\"Tell me a joke about OpenTelemetry\\\";\\n    const openai = new llamaindex.OpenAI({ model, temperature: 0 });\\n    const res = await openai.complete({ prompt });\\n\\n    assert.ok(res);\\n    assert.ok(res.text);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    assert.strictEqual(spans.length, 2);\\n    const chatAttributes = spans[0].attributes;\\n    const completionAttributes = spans[1].attributes;\\n\\n    assert.strictEqual(chatAttributes[\\\"llm.vendor\\\"], \\\"OpenAI2\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.model\\\"], model);\\n    assert.strictEqual(chatAttributes[\\\"llm.top_p\\\"], 1);\\n    assert.strictEqual(chatAttributes[\\\"llm.prompts.0.content\\\"], prompt);\\n    assert.strictEqual(chatAttributes[\\\"llm.prompts.0.role\\\"], \\\"user\\\");\\n    assert.strictEqual(completionAttributes[\\\"llm.response.model\\\"], model);\\n    assert.strictEqual(chatAttributes[\\\"llm.completions.0.role\\\"], \\\"assistant\\\");\\n    assert.ok(chatAttributes[\\\"llm.completions.0.content\\\"]);\\n\\n    assert.strictEqual(completionAttributes[\\\"llm.vendor\\\"], \\\"OpenAI2\\\");\\n    assert.strictEqual(\\n      completionAttributes[\\\"llm.request.type\\\"],\\n      \\\"llm.completions\\\",\\n    );\\n    assert.strictEqual(completionAttributes[\\\"llm.request.model\\\"], model);\\n    assert.strictEqual(completionAttributes[\\\"llm.top_p\\\"], 1);\\n    assert.strictEqual(completionAttributes[\\\"llm.prompts.0.content\\\"], prompt);\\n    assert.strictEqual(completionAttributes[\\\"llm.response.model\\\"], model);\\n    assert.strictEqual(\\n      completionAttributes[\\\"llm.completions.0.role\\\"],\\n      \\\"assistant\\\",\\n    );\\n    assert.strictEqual(\\n      completionAttributes[\\\"llm.completions.0.content\\\"],\\n      res.text,\\n    );\\n  });\\n\\n  it(\\\"should set attributes in span for LLM instrumentation in case of streaming response\\\", async () => {\\n    const model = \\\"gpt-3.5-turbo\\\";\\n    const prompt = \\\"Tell me a joke about OpenTelemetry\\\";\\n    const openai = new llamaindex.OpenAI({ model, temperature: 0 });\\n    const res = await openai.complete({ prompt, stream: true });\\n\\n    assert.ok(res);\\n    let message = \\\"\\\";\\n    for await (const messageChunk of res) {\\n      message += messageChunk;\\n    }\\n    assert.ok(message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    assert.strictEqual(spans.length, 2);\\n    const chatAttributes = spans[0].attributes;\\n    const completionAttributes = spans[1].attributes;\\n\\n    assert.strictEqual(chatAttributes[\\\"llm.vendor\\\"], \\\"OpenAI\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.model\\\"], model);\\n    assert.strictEqual(chatAttributes[\\\"llm.top_p\\\"], 1);\\n    assert.strictEqual(chatAttributes[\\\"llm.prompts.0.content\\\"], prompt);\\n    assert.strictEqual(chatAttributes[\\\"llm.prompts.0.role\\\"], \\\"user\\\");\\n    assert.strictEqual(completionAttributes[\\\"llm.response.model\\\"], model);\\n    assert.ok(chatAttributes[\\\"llm.completions.0.content\\\"]);\\n\\n    assert.strictEqual(completionAttributes[\\\"llm.vendor\\\"], \\\"OpenAI2\\\");\\n    assert.strictEqual(\\n      completionAttributes[\\\"llm.request.type\\\"],\\n      \\\"llm.completions\\\",\\n    );\\n    assert.strictEqual(completionAttributes[\\\"llm.request.model\\\"], model);\\n    assert.strictEqual(completionAttributes[\\\"llm.top_p\\\"], 1);\\n    assert.strictEqual(completionAttributes[\\\"llm.prompts.0.content\\\"], prompt);\\n    assert.strictEqual(completionAttributes[\\\"llm.response.model\\\"], model);\\n    assert.ok(completionAttributes[\\\"llm.completions.0.content\\\"]);\\n  });\\n\\n  it(\\\"should add span for all instrumented methods\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n    });\\n\\n    assert.ok(result.response);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    const spanNames = spans.map((span) => span.name);\\n\\n    assert.ok(spanNames.includes(\\\"get_query_embedding.task\\\"));\\n\\n    assert.ok(spanNames.includes(\\\"retrieve.task\\\"));\\n    assert.ok(spanNames.includes(\\\"retrieve.task\\\"));\\n    assert.ok(spanNames.includes(\\\"open_ai_2.chat\\\"));\\n    assert.ok(spanNames.includes(\\\"open_ai_2.completion\\\"));\\n    assert.ok(spanNames.includes(\\\"synthesize.task\\\"));\\n    assert.ok(spanNames.includes(\\\"query.task\\\"));\\n  }).timeout(60000);\\n});\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 30171,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 30171,
            "text": "[\"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\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-03-04T12:37:12.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "G8HPN6PhojQsHrOfNfvwVOfQ6gKFPgWFKgnzwenrY4E-1709554032-1.0.1.1-FGeHgF93RxZvdvbGHYUc_M.XV87LjxlGb3D3mBZ8eNiFBYvOt3hHFFdkwMHwfaIYJygL.qucQznpWEK1iuNBzw"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "oEhCHX5Twnes6ZTbUDSWHERFLpWRxkiiYui6tuMpxCk-1709554032657-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 04 Mar 2024 12:07:12 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "63"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_b86bab0c291130c6de9076cd719662cf"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=G8HPN6PhojQsHrOfNfvwVOfQ6gKFPgWFKgnzwenrY4E-1709554032-1.0.1.1-FGeHgF93RxZvdvbGHYUc_M.XV87LjxlGb3D3mBZ8eNiFBYvOt3hHFFdkwMHwfaIYJygL.qucQznpWEK1iuNBzw; path=/; expires=Mon, 04-Mar-24 12:37:12 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=oEhCHX5Twnes6ZTbUDSWHERFLpWRxkiiYui6tuMpxCk-1709554032657-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "85f1be9eaf564c46-MXP"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1066,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-03-04T12:07:12.062Z",
        "time": 877,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 877
        }
      }
    ],
    "pages": [],
    "version": "1.2"
  }
}
