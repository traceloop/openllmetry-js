{
  "log": {
    "_recordingName": "Test LlamaIndex instrumentation/should add span for all instrumented methods",
    "creator": {
      "comment": "persister:fs",
      "name": "Polly.JS",
      "version": "6.0.6"
    },
    "entries": [
      {
        "_id": "35e4e3d1b757b5697226d1cf6efde888",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 95,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "95"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v20.9.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-retry-count",
              "value": "0"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 490,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"Where was albert einstein born?\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 10185,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 10185,
            "text": "[\"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\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-12-16T14:13:51.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "D7IFSxfeJ9VR7XbGdtYnznZw1F9dB_rnEhXulzoT6uo-1734356631-1.0.1.1-0slD3JbjHkiTb2QGoj7q8QWqDEuejrC3IDnnYQo1Y8mGeM_a4WJ9L1NkQauagqhCwVVUnb6khatkuzehFpRUNQ"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "TGX90lgy59ji0RdskYsOSVxL4xjk502p2.GE4GLraJw-1734356631710-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 16 Dec 2024 13:43:51 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "access-control-expose-headers",
              "value": "X-Request-ID"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "136"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_bb80c8b91faa64b6c0e8177f3277acc3"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=D7IFSxfeJ9VR7XbGdtYnznZw1F9dB_rnEhXulzoT6uo-1734356631-1.0.1.1-0slD3JbjHkiTb2QGoj7q8QWqDEuejrC3IDnnYQo1Y8mGeM_a4WJ9L1NkQauagqhCwVVUnb6khatkuzehFpRUNQ; path=/; expires=Mon, 16-Dec-24 14:13:51 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=TGX90lgy59ji0RdskYsOSVxL4xjk502p2.GE4GLraJw-1734356631710-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "8f2f1ad14fd944d7-ATL"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1154,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-12-16T13:43:50.862Z",
        "time": 701,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 701
        }
      },
      {
        "_id": "9a2bbe828ba1c64640a06a7209f41250",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 8702,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "8702"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v20.9.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-retry-count",
              "value": "0"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 492,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"file_name: essay.txt\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/essay.txt\\n\\nAlbert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy.\",\n    \"file_name: instrumentation.test.ts\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/instrumentation.test.ts\\n\\n/*\\n * Copyright Traceloop\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.* You may obtain a copy of the License at\\n *\\n *      https://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and\\n * limitations under the License.*/\\n\\nimport { context } from \\\"@opentelemetry/api\\\";\\nimport { AsyncHooksContextManager } from \\\"@opentelemetry/context-async-hooks\\\";\\nimport { LlamaIndexInstrumentation } from \\\"../src/instrumentation\\\";\\nimport * as assert from \\\"assert\\\";\\nimport {\\n  BasicTracerProvider,\\n  InMemorySpanExporter,\\n  SimpleSpanProcessor,\\n} from \\\"@opentelemetry/sdk-trace-base\\\";\\nimport type * as llamaindexImport from \\\"llamaindex\\\";\\n\\nimport { Polly, setupMocha as setupPolly } from \\\"@pollyjs/core\\\";\\nimport NodeHttpAdapter from \\\"@pollyjs/adapter-node-http\\\";\\nimport FSPersister from \\\"@pollyjs/persister-fs\\\";\\n\\nconst memoryExporter = new InMemorySpanExporter();\\n\\nPolly.register(NodeHttpAdapter);\\nPolly.register(FSPersister);\\n\\ndescribe(\\\"Test LlamaIndex instrumentation\\\", async function () {\\n  const provider = new BasicTracerProvider();\\n  let instrumentation: LlamaIndexInstrumentation;\\n  let contextManager: AsyncHooksContextManager;\\n  let llamaindex: typeof llamaindexImport;\\n\\n  setupPolly({\\n    adapters: [\\\"node-http\\\"],\\n    persister: \\\"fs\\\",\\n    recordIfMissing: process.env.RECORD_MODE === \\\"NEW\\\",\\n    matchRequestsBy: {\\n      headers: false,\\n    },\\n  });\\n\\n  before(() => {\\n    if (process.env.RECORD_MODE !== \\\"NEW\\\") {\\n      process.env.OPENAI_API_KEY = \\\"test\\\";\\n    }\\n\\n    provider.addSpanProcessor(new SimpleSpanProcessor(memoryExporter));\\n    instrumentation = new LlamaIndexInstrumentation();\\n    instrumentation.setTracerProvider(provider);\\n    llamaindex = require(\\\"llamaindex\\\");\\n  });\\n\\n  beforeEach(function () {\\n    contextManager = new AsyncHooksContextManager().enable();\\n    context.setGlobalContextManager(contextManager);\\n\\n    const { server } = this.polly as Polly;\\n    server.any().on(\\\"beforePersist\\\", (_req, recording) => {\\n      recording.request.headers = recording.request.headers.filter(\\n        ({ name }: { name: string }) => name !== \\\"authorization\\\",\\n      );\\n    });\\n  });\\n\\n  afterEach(() => {\\n    memoryExporter.reset();\\n    context.disable();\\n  });\\n\\n  it(\\\"should add span for all instrumented methods\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n    });\\n\\n    assert.ok(result.message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n    const spanNames = spans.map((span) => span.name);\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n\\n    assert.ok(spanNames.includes(\\\"open_ai_embedding.get_query_embedding\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"base_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.query\\\"));\\n\\n    assert.ok(retrieverQueryEngineSpan);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.input\\\"]);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.\",\n    \"file_name: instrumentation.test.ts\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/instrumentation.test.ts\\n\\nmessage);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n    const spanNames = spans.map((span) => span.name);\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n\\n    assert.ok(spanNames.includes(\\\"open_ai_embedding.get_query_embedding\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"base_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.query\\\"));\\n\\n    assert.ok(retrieverQueryEngineSpan);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.input\\\"]);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.output\\\"]);\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.input\\\"\\n        ].toString(),\\n      ).kwargs.query,\\n      \\\"Where was albert einstein born?\\\",\\n    );\\n    assert.deepStrictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.output\\\"\\n        ].toString(),\\n      ).message,\\n      result.message,\\n    );\\n  }).timeout(60000);\\n\\n  it(\\\"should build proper trace on streaming query engine\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n      stream: true,\\n    });\\n\\n    for await (const res of result) {\\n      assert.ok(res);\\n    }\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    const retrieverQueryEngineQuerySpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n    const synthesizeSpan = spans.find(\\n      (span) => span.name === \\\"base_synthesizer.synthesize\\\",\\n    );\\n    const retrieverQueryEngineRetrieveSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.retrieve\\\",\\n    );\\n    const openAIEmbeddingSpan = spans.find(\\n      (span) => span.name === \\\"open_ai_embedding.get_query_embedding\\\",\\n    );\\n    const vectorIndexRetrieverSpan = spans.find(\\n      (span) => span.name === \\\"vector_index_retriever.retrieve\\\",\\n    );\\n\\n    assert.strictEqual(\\n      synthesizeSpan?.parentSpanId,\\n      retrieverQueryEngineQuerySpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      retrieverQueryEngineRetrieveSpan?.parentSpanId,\\n      retrieverQueryEngineQuerySpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      vectorIndexRetrieverSpan?.parentSpanId,\\n      retrieverQueryEngineRetrieveSpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      openAIEmbeddingSpan?.parentSpanId,\\n      vectorIndexRetrieverSpan?.spanContext().spanId,\\n    );\\n  }).timeout(60000);\\n});\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 29993,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 29993,
            "text": "[\"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\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-12-16T14:17:53.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "GvRL7ZJMplXSr_zNOlNCxGrqnUJRnto.Xvyy.RmwadM-1734356873-1.0.1.1-sOm34QAZ.eKFne5hwgn6zDKCQKGmKdrssQ.bP.rtEW_x9kKG7E3KQpiunzOShHHGmIvuAXhxCA_.GQPhx0kwQg"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "y7ZlIhdLuW4gtm0ZHYnFDLrA08yyVC4twrJSrjuTuWU-1734356873729-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 16 Dec 2024 13:47:53 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "access-control-expose-headers",
              "value": "X-Request-ID"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "99"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_eb31aaae9c5f10c7214e93da36626951"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=GvRL7ZJMplXSr_zNOlNCxGrqnUJRnto.Xvyy.RmwadM-1734356873-1.0.1.1-sOm34QAZ.eKFne5hwgn6zDKCQKGmKdrssQ.bP.rtEW_x9kKG7E3KQpiunzOShHHGmIvuAXhxCA_.GQPhx0kwQg; path=/; expires=Mon, 16-Dec-24 14:17:53 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=y7ZlIhdLuW4gtm0ZHYnFDLrA08yyVC4twrJSrjuTuWU-1734356873729-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "8f2f20bbdf5ebd1b-ATL"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1153,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-12-16T13:47:52.095Z",
        "time": 1591,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 1591
        }
      },
      {
        "_id": "eaaa922f55c9ea435d841c12af7f9fa4",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 4518,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "4518"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v20.9.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-retry-count",
              "value": "0"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 498,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"gpt-4o\",\n  \"temperature\": 0.1,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Context information is below.\\n---------------------\\nfile_name: essay.txt\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/essay.txt\\n\\nAlbert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy.\\n\\nfile_name: instrumentation.test.ts\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/instrumentation.test.ts\\n\\nmessage);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n    const spanNames = spans.map((span) => span.name);\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n\\n    assert.ok(spanNames.includes(\\\"open_ai_embedding.get_query_embedding\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"base_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.query\\\"));\\n\\n    assert.ok(retrieverQueryEngineSpan);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.input\\\"]);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.output\\\"]);\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.input\\\"\\n        ].toString(),\\n      ).kwargs.query,\\n      \\\"Where was albert einstein born?\\\",\\n    );\\n    assert.deepStrictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.output\\\"\\n        ].toString(),\\n      ).message,\\n      result.message,\\n    );\\n  }).timeout(60000);\\n\\n  it(\\\"should build proper trace on streaming query engine\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n      stream: true,\\n    });\\n\\n    for await (const res of result) {\\n      assert.ok(res);\\n    }\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    const retrieverQueryEngineQuerySpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n    const synthesizeSpan = spans.find(\\n      (span) => span.name === \\\"base_synthesizer.synthesize\\\",\\n    );\\n    const retrieverQueryEngineRetrieveSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.retrieve\\\",\\n    );\\n    const openAIEmbeddingSpan = spans.find(\\n      (span) => span.name === \\\"open_ai_embedding.get_query_embedding\\\",\\n    );\\n    const vectorIndexRetrieverSpan = spans.find(\\n      (span) => span.name === \\\"vector_index_retriever.retrieve\\\",\\n    );\\n\\n    assert.strictEqual(\\n      synthesizeSpan?.parentSpanId,\\n      retrieverQueryEngineQuerySpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      retrieverQueryEngineRetrieveSpan?.parentSpanId,\\n      retrieverQueryEngineQuerySpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      vectorIndexRetrieverSpan?.parentSpanId,\\n      retrieverQueryEngineRetrieveSpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      openAIEmbeddingSpan?.parentSpanId,\\n      vectorIndexRetrieverSpan?.spanContext().spanId,\\n    );\\n  }).timeout(60000);\\n});\\n---------------------\\nGiven the context information and not prior knowledge, answer the query.\\nQuery: Where was albert einstein born?\\nAnswer:\"\n    }\n  ],\n  \"top_p\": 1,\n  \"stream\": false\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/chat/completions"
        },
        "response": {
          "bodySize": 551,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 551,
            "text": "[\"H4sIAAAAAAAAA4xSy27bMBC86ysWPFuBHMuR45sRFEVOOeXQFoVAkSuZDsVlyFVcI/C/F5IfktEW6IWHnZ3hzGA/EwBhtFiDUFvJqvU23dTLXUf7zfPTcp+9M++K15ePb/L7YV8ddmLWM6jaoeIL605R6y2yIXeCVUDJ2KvOi0W+WD6sinwAWtJoe1rjOc0pvc/u8zRbpdnDmbglozCK\",\"NfxIAAA+h7e36DT+EmvIZpdJizHKBsX6ugQgAtl+ImSMJrJ0LGYjqMgxusH1xlYYGL4YFxmNg72MUFFwYBy82nYGXzG00h3upvyAdRdlb9911p7nx6shS40PVMUzfp3Xxpm4LQPKSK7/PDJ5MaDHBODnELy7ySJ8oNZzyfSGrhd8XBQnPTFWPaLzcyuCiaWdsPIL60av1MjS2DipTiiptqhH6tiz7LShCZBMUv/p5m/ap+TGNf8jPwJKoWfUpQ+ojbpNPK4F7C/xX2vXlgfDIh4iY1vWxjUYfDCnY6h9KYtHvdJSzWuRHJPfAAAA//8DAF18jysVAwAA\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-12-16T14:17:54.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "nPfp_CPlF5bssmivOFDgKB6JfjuNFBCSpZsD6VVS02s-1734356874-1.0.1.1-flOPKnVDAS3At3iF3plHCJOhK.3RBDOJqJE2RljO3cAoxgHPCW8fZog_RXIHzZAhd.TrhOvD8razkS0DSfhT9w"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "xk96gMV6GJrUnOmM9Pm20EwbEkbL6Yy31MZatxgwTOk-1734356874867-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 16 Dec 2024 13:47:54 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-expose-headers",
              "value": "X-Request-ID"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "631"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "800000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "798930"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "80ms"
            },
            {
              "name": "x-request-id",
              "value": "req_6a5727c20bfd4da0c58d04ae3063e4e7"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=nPfp_CPlF5bssmivOFDgKB6JfjuNFBCSpZsD6VVS02s-1734356874-1.0.1.1-flOPKnVDAS3At3iF3plHCJOhK.3RBDOJqJE2RljO3cAoxgHPCW8fZog_RXIHzZAhd.TrhOvD8razkS0DSfhT9w; path=/; expires=Mon, 16-Dec-24 14:17:54 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=xk96gMV6GJrUnOmM9Pm20EwbEkbL6Yy31MZatxgwTOk-1734356874867-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "8f2f20bf3baabd1b-ATL"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1188,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-12-16T13:47:53.723Z",
        "time": 920,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 920
        }
      }
    ],
    "pages": [],
    "version": "1.2"
  }
}
