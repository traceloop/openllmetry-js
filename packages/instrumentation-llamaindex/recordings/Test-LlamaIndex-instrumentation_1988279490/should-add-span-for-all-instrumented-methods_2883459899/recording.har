{
  "log": {
    "_recordingName": "Test LlamaIndex instrumentation/should add span for all instrumented methods",
    "creator": {
      "comment": "persister:fs",
      "name": "Polly.JS",
      "version": "6.0.6"
    },
    "entries": [
      {
        "_id": "53731f113c5341d99963ad220bdd10ce",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 449,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "449"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.26.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.26.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 464,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": \"Albert Einstein: A Genius Unveiled Albert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy.\"\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 10173,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 10173,
            "text": "[\"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\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-02-12T22:19:31.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "tC2lqcJQ_G1cRBKOZ58JxYLKGwLRTQ_LCL1VPnYEzbQ-1707774571-1-ATLOZUdzDp9Ebkpn9Ffa9PC4F4J+bT/4xOMvlmRuCyNw1GMaC59xjZkLQz8rAIQTsq8HCZ/gPbIDKVmWI8vQrFo="
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "FOhRUhpFDMU2GQmwpwqTbWZ0WX6K4haYPTY6TxhHiOM-1707774571633-0-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 12 Feb 2024 21:49:31 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "27"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "5000000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "4999901"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "1ms"
            },
            {
              "name": "x-request-id",
              "value": "req_ec90fa7fe8a525369d3d9383ba7b0c77"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=tC2lqcJQ_G1cRBKOZ58JxYLKGwLRTQ_LCL1VPnYEzbQ-1707774571-1-ATLOZUdzDp9Ebkpn9Ffa9PC4F4J+bT/4xOMvlmRuCyNw1GMaC59xjZkLQz8rAIQTsq8HCZ/gPbIDKVmWI8vQrFo=; path=/; expires=Mon, 12-Feb-24 22:19:31 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=FOhRUhpFDMU2GQmwpwqTbWZ0WX6K4haYPTY6TxhHiOM-1707774571633-0-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "85480abf2ceb94da-HFA"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1161,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-02-12T21:49:31.163Z",
        "time": 443,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 443
        }
      },
      {
        "_id": "a1c5e55686fd39bdf46c043216085807",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 4233,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "4233"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.26.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.26.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 465,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": \"/* * Copyright Traceloop * * Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      https://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \\\"AS IS\\\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ import { context } from \\\"@opentelemetry/api\\\"; import { AsyncHooksContextManager } from \\\"@opentelemetry/context-async-hooks\\\"; import { LlamaIndexInstrumentation } from \\\"../src/instrumentation\\\"; import * as assert from \\\"assert\\\"; import { BasicTracerProvider, InMemorySpanExporter, SimpleSpanProcessor, } from \\\"@opentelemetry/sdk-trace-base\\\"; import type * as llamaindexImport from \\\"llamaindex\\\"; import { Polly, setupMocha as setupPolly } from \\\"@pollyjs/core\\\"; import NodeHttpAdapter from \\\"@pollyjs/adapter-node-http\\\"; import FSPersister from \\\"@pollyjs/persister-fs\\\"; const memoryExporter = new InMemorySpanExporter(); Polly.register(NodeHttpAdapter); Polly.register(FSPersister); describe(\\\"Test LlamaIndex instrumentation\\\", async function () { const provider = new BasicTracerProvider(); let instrumentation: LlamaIndexInstrumentation; let contextManager: AsyncHooksContextManager; let llamaindex: typeof llamaindexImport; setupPolly({ adapters: [\\\"node-http\\\"], persister: \\\"fs\\\" }); before(() => { provider.addSpanProcessor(new SimpleSpanProcessor(memoryExporter)); instrumentation = new LlamaIndexInstrumentation(); instrumentation.setTracerProvider(provider); llamaindex = require(\\\"llamaindex\\\"); }); beforeEach(function () { contextManager = new AsyncHooksContextManager().enable(); context.setGlobalContextManager(contextManager); const { server } = this.polly as Polly; server.any().on(\\\"beforePersist\\\", (_req, recording) => { recording.request.headers = recording.request.headers.filter( ({ name }: { name: string }) => name !== \\\"authorization\\\", ); }); }); afterEach(() => { memoryExporter.reset(); context.disable(); }); it(\\\"should set attributes in span for LLM instrumentation\\\", async () => { const model = \\\"gpt-3.5-turbo\\\"; const prompt = \\\"Tell me a joke about OpenTelemetry\\\"; const openai = new llamaindex.OpenAI({ model, temperature: 0 }); const res = await openai.complete(prompt); assert.ok(res); assert.ok(res.message); assert.ok(res.message.role); assert.ok(res.message.content); const spans = memoryExporter.getFinishedSpans(); assert.strictEqual(spans.length, 2); const chatAttributes = spans[0].attributes; const completionAttributes = spans[1].attributes; assert.strictEqual(chatAttributes[\\\"llm.vendor\\\"], \\\"OpenAI2\\\"); assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\"); assert.strictEqual(chatAttributes[\\\"llm.request.model\\\"], model); assert.strictEqual(chatAttributes[\\\"llm.top_p\\\"], 1); assert.strictEqual(chatAttributes[\\\"llm.prompts.0.content\\\"], prompt); assert.strictEqual(chatAttributes[\\\"llm.prompts.0.role\\\"], \\\"user\\\"); assert.strictEqual(completionAttributes[\\\"llm.response.model\\\"], model); assert.strictEqual(chatAttributes[\\\"llm.completions.0.role\\\"], \\\"assistant\\\"); assert.ok(chatAttributes[\\\"llm.completions.0.content\\\"]); assert.strictEqual(completionAttributes[\\\"llm.vendor\\\"], \\\"OpenAI2\\\"); assert.strictEqual( completionAttributes[\\\"llm.request.type\\\"], \\\"llm.completions\\\", ); assert.strictEqual(completionAttributes[\\\"llm.request.model\\\"], model); assert.strictEqual(completionAttributes[\\\"llm.top_p\\\"], 1); assert.strictEqual(completionAttributes[\\\"llm.prompts.0.content\\\"], prompt); assert.strictEqual(completionAttributes[\\\"llm.response.model\\\"], model); assert.strictEqual( completionAttributes[\\\"llm.completions.0.role\\\"], \\\"assistant\\\", ); assert.ok(completionAttributes[\\\"llm.completions.0.content\\\"]); }); it(\\\"should set attributes in span for LLM instrumentation in case of streaming response\\\", async () => { const model = \\\"gpt-3.5-turbo\\\"; const prompt = \\\"Tell me a joke about OpenTelemetry\\\";\"\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 10279,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 10279,
            "text": "[\"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\",\"AwD/IMnU74IAAA==\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-02-12T22:19:32.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "5fk_MlVtunLqNKyGo3mSSUJJh497C6VmJ3Gid2GxD7k-1707774572-1-AWDz2YBjXFgt8IyQmIUQZz5M8B8tJSddGtqzfyNr0Ci2smDzGSIG5cwd8R7Q/yWaM8v//j0gXvoD4du8LzFWlEE="
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "4qzW347TSBeiKATmGyykUiGkM7mU8K8u_8Lb_Wc7LtA-1707774572144-0-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 12 Feb 2024 21:49:32 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "70"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "5000000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "4998979"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_fda7717c8b8f3db24e91d20e38f4ebee"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=5fk_MlVtunLqNKyGo3mSSUJJh497C6VmJ3Gid2GxD7k-1707774572-1-AWDz2YBjXFgt8IyQmIUQZz5M8B8tJSddGtqzfyNr0Ci2smDzGSIG5cwd8R7Q/yWaM8v//j0gXvoD4du8LzFWlEE=; path=/; expires=Mon, 12-Feb-24 22:19:32 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=4qzW347TSBeiKATmGyykUiGkM7mU8K8u_8Lb_Wc7LtA-1707774572144-0-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "85480ac20f6594da-HFA"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1162,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-02-12T21:49:31.616Z",
        "time": 610,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 610
        }
      },
      {
        "_id": "726541e5742361da62c5064bccd5495a",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 2803,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "2803"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.26.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.26.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 465,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": \"const prompt = \\\"Tell me a joke about OpenTelemetry\\\"; const openai = new llamaindex.OpenAI({ model, temperature: 0 }); const res = await openai.complete(prompt, undefined, true); assert.ok(res); let message = \\\"\\\"; for await (const messageChunk of res) { message += messageChunk; } assert.ok(message); const spans = memoryExporter.getFinishedSpans(); assert.strictEqual(spans.length, 2); const chatAttributes = spans[0].attributes; const completionAttributes = spans[1].attributes; assert.strictEqual(chatAttributes[\\\"llm.vendor\\\"], \\\"OpenAI2\\\"); assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\"); assert.strictEqual(chatAttributes[\\\"llm.request.model\\\"], model); assert.strictEqual(chatAttributes[\\\"llm.top_p\\\"], 1); assert.strictEqual(chatAttributes[\\\"llm.prompts.0.content\\\"], prompt); assert.strictEqual(chatAttributes[\\\"llm.prompts.0.role\\\"], \\\"user\\\"); assert.strictEqual(completionAttributes[\\\"llm.response.model\\\"], model); assert.ok(chatAttributes[\\\"llm.completions.0.content\\\"]); assert.strictEqual(completionAttributes[\\\"llm.vendor\\\"], \\\"OpenAI2\\\"); assert.strictEqual( completionAttributes[\\\"llm.request.type\\\"], \\\"llm.completions\\\", ); assert.strictEqual(completionAttributes[\\\"llm.request.model\\\"], model); assert.strictEqual(completionAttributes[\\\"llm.top_p\\\"], 1); assert.strictEqual(completionAttributes[\\\"llm.prompts.0.content\\\"], prompt); assert.strictEqual(completionAttributes[\\\"llm.response.model\\\"], model); assert.ok(completionAttributes[\\\"llm.completions.0.content\\\"]); }); it(\\\"should add span for all instrumented methods\\\", async () => { const directoryReader = new llamaindex.SimpleDirectoryReader(); const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" }); const embedModel = new llamaindex.OpenAIEmbedding(); const vectorStore = new llamaindex.SimpleVectorStore(); const serviceContext = llamaindex.serviceContextFromDefaults({ embedModel, }); const storageContext = await llamaindex.storageContextFromDefaults({ vectorStore, }); const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, { storageContext, serviceContext, }); const queryEngine = index.asQueryEngine(); const result = await queryEngine.query(\\\"Where was albert einstein born?\\\"); assert.ok(result.response); const spans = memoryExporter.getFinishedSpans(); const spanNames = spans.map((span) => span.name); assert.ok(spanNames.includes(\\\"get_query_embedding.task\\\")); assert.ok(spanNames.includes(\\\"retrieve.task\\\")); assert.ok(spanNames.includes(\\\"retrieve.task\\\")); assert.ok(spanNames.includes(\\\"open_ai_2.chat\\\")); assert.ok(spanNames.includes(\\\"open_ai_2.completion\\\")); assert.ok(spanNames.includes(\\\"synthesize.task\\\")); assert.ok(spanNames.includes(\\\"query.task\\\")); }).timeout(60000); });\"\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 10227,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 10227,
            "text": "[\"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\",\"AwBnZ20/loIAAA==\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-02-12T22:19:32.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "oplbSZ.vTjohVKa3r.jhdNeJmjqmlm53D.3L9m_kkTM-1707774572-1-Ae7QIjkPJCr2kkiSu4Yp8ie4ed3db3TkGFfDlrmBlJSiIxHr2ESao8lT7CUDbEnJoxRANfpdFPo/b9wHPXjDyBo="
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "jLxZhw9cKBgqNsBqUzQQIAljow5AlRghwJ1NtFrcYM0-1707774572760-0-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 12 Feb 2024 21:49:32 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "42"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "5000000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "4999328"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "8ms"
            },
            {
              "name": "x-request-id",
              "value": "req_6d51ac69fd162a7f1091d3045e7d4e9c"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=oplbSZ.vTjohVKa3r.jhdNeJmjqmlm53D.3L9m_kkTM-1707774572-1-Ae7QIjkPJCr2kkiSu4Yp8ie4ed3db3TkGFfDlrmBlJSiIxHr2ESao8lT7CUDbEnJoxRANfpdFPo/b9wHPXjDyBo=; path=/; expires=Mon, 12-Feb-24 22:19:32 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=jLxZhw9cKBgqNsBqUzQQIAljow5AlRghwJ1NtFrcYM0-1707774572760-0-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "85480ac60ac594da-HFA"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1161,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-02-12T21:49:32.234Z",
        "time": 622,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 622
        }
      },
      {
        "_id": "c321dd431636f26b8d294ef10913d5ac",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 85,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "85"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.26.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.26.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 463,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": \"Where was albert einstein born?\"\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 10204,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 10204,
            "text": "[\"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\",\"AwDGd/1Vs4IAAA==\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-02-12T22:19:33.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "WFpl6gAFlGY57VG0hR1LFpder5v3uWPEywKaFLbJVPE-1707774573-1-AThl0l0W+t6pG5A226//7+ikYt+CsHILUp2IgQT4NmhlXnQkANrP91hpOOt/YXd6ISpFkxGD0XeCzEd3JoCi+m4="
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "q9oCm3sqtWh.2fCTfZp7GzlNu4DbEontfLRhIajkFeM-1707774573341-0-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 12 Feb 2024 21:49:33 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "39"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "5000000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "4999993"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "0s"
            },
            {
              "name": "x-request-id",
              "value": "req_490298e2b946ab91f7bd99242540b2de"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=WFpl6gAFlGY57VG0hR1LFpder5v3uWPEywKaFLbJVPE-1707774573-1-AThl0l0W+t6pG5A226//7+ikYt+CsHILUp2IgQT4NmhlXnQkANrP91hpOOt/YXd6ISpFkxGD0XeCzEd3JoCi+m4=; path=/; expires=Mon, 12-Feb-24 22:19:33 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=q9oCm3sqtWh.2fCTfZp7GzlNu4DbEontfLRhIajkFeM-1707774573341-0-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "85480ac9fd9e94da-HFA"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1160,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-02-12T21:49:32.866Z",
        "time": 501,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 501
        }
      },
      {
        "_id": "1888a6fea0bb0589c7a30a4592ee048d",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 3505,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "3505"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.26.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.26.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 471,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"gpt-3.5-turbo\",\n  \"temperature\": 0.1,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Context information is below.\\n---------------------\\nAlbert Einstein: A Genius Unveiled Albert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy. const prompt = \\\"Tell me a joke about OpenTelemetry\\\"; const openai = new llamaindex.OpenAI({ model, temperature: 0 }); const res = await openai.complete(prompt, undefined, true); assert.ok(res); let message = \\\"\\\"; for await (const messageChunk of res) { message += messageChunk; } assert.ok(message); const spans = memoryExporter.getFinishedSpans(); assert.strictEqual(spans.length, 2); const chatAttributes = spans[0].attributes; const completionAttributes = spans[1].attributes; assert.strictEqual(chatAttributes[\\\"llm.vendor\\\"], \\\"OpenAI2\\\"); assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\"); assert.strictEqual(chatAttributes[\\\"llm.request.model\\\"], model); assert.strictEqual(chatAttributes[\\\"llm.top_p\\\"], 1); assert.strictEqual(chatAttributes[\\\"llm.prompts.0.content\\\"], prompt); assert.strictEqual(chatAttributes[\\\"llm.prompts.0.role\\\"], \\\"user\\\"); assert.strictEqual(completionAttributes[\\\"llm.response.model\\\"], model); assert.ok(chatAttributes[\\\"llm.completions.0.content\\\"]); assert.strictEqual(completionAttributes[\\\"llm.vendor\\\"], \\\"OpenAI2\\\"); assert.strictEqual( completionAttributes[\\\"llm.request.type\\\"], \\\"llm.completions\\\", ); assert.strictEqual(completionAttributes[\\\"llm.request.model\\\"], model); assert.strictEqual(completionAttributes[\\\"llm.top_p\\\"], 1); assert.strictEqual(completionAttributes[\\\"llm.prompts.0.content\\\"], prompt); assert.strictEqual(completionAttributes[\\\"llm.response.model\\\"], model); assert.ok(completionAttributes[\\\"llm.completions.0.content\\\"]); }); it(\\\"should add span for all instrumented methods\\\", async () => { const directoryReader = new llamaindex.SimpleDirectoryReader(); const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" }); const embedModel = new llamaindex.OpenAIEmbedding(); const vectorStore = new llamaindex.SimpleVectorStore(); const serviceContext = llamaindex.serviceContextFromDefaults({ embedModel, }); const storageContext = await llamaindex.storageContextFromDefaults({ vectorStore, }); const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, { storageContext, serviceContext, }); const queryEngine = index.asQueryEngine(); const result = await queryEngine.query(\\\"Where was albert einstein born?\\\"); assert.ok(result.response); const spans = memoryExporter.getFinishedSpans(); const spanNames = spans.map((span) => span.name); assert.ok(spanNames.includes(\\\"get_query_embedding.task\\\")); assert.ok(spanNames.includes(\\\"retrieve.task\\\")); assert.ok(spanNames.includes(\\\"retrieve.task\\\")); assert.ok(spanNames.includes(\\\"open_ai_2.chat\\\")); assert.ok(spanNames.includes(\\\"open_ai_2.completion\\\")); assert.ok(spanNames.includes(\\\"synthesize.task\\\")); assert.ok(spanNames.includes(\\\"query.task\\\")); }).timeout(60000); });\\n---------------------\\nGiven the context information and not prior knowledge, answer the query.\\nQuery: Where was albert einstein born?\\nAnswer:\"\n    }\n  ],\n  \"top_p\": 1,\n  \"stream\": false\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/chat/completions"
        },
        "response": {
          "bodySize": 440,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 440,
            "text": "[\"H4sIAAAAAAAAA1SQMU/DMBCF9/yKk+ekalRCqmxUlC4gGMqAEKoc95oabF9kX1RK1f+OnKYtLB7eu+/uPR8SAKHXogKhtpKVbU029W/LcrmbzomeXh7nP7PFzKvnh+BCR/cijQTVn6j4TI0U2dYga3InW3mUjHFrXo7LsrwpyklvWFqjiVjTcjYZFRl3vqZsfJtPBnJLWmEQFbwnAACH/o0Z3Rq/RQXj9KxYDEE2KKrLEIDwZKIiZAg6sHQs0qupyDG6PvadqdEzzLULjNrBTgaoyTvQDl6NTWGB3kq3H4kBP17uGmpaT3XM6DpjLvpGOx22K48ykIs3AlN7wo8JwEffr/sXWbSebMsrpi90cWE5Lk77xPVLr24+lBdMLM0fKi+SIaEI+8BoVxvtGvSt133dmDM5Jr8AAAD//wMAe+wU7O0BAAA=\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-02-12T22:19:34.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "9rP.hDqvl2s__cLqnvqH_HQ2hlIyTZ3XCJxkNJX5nxM-1707774574-1-Ade0CBlyAty3tza72DpAJpvSQyNrRdRl7hO3v8qW+fCQV+zgaRlO4FXt9fGKZY0mqSbrJ5ruMZbKmIC1Ft0ugYA="
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "fDFzapJ47u_Q9rFuP7KuRpIBHQa8RrJQl13wkr7W3IY-1707774574090-0-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 12 Feb 2024 21:49:34 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "cache-control",
              "value": "no-cache, must-revalidate"
            },
            {
              "name": "openai-model",
              "value": "gpt-3.5-turbo-0613"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "229"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "160000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "159164"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "313ms"
            },
            {
              "name": "x-request-id",
              "value": "req_028b941c8e1a9161dcee48ce34dd96e7"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=9rP.hDqvl2s__cLqnvqH_HQ2hlIyTZ3XCJxkNJX5nxM-1707774574-1-Ade0CBlyAty3tza72DpAJpvSQyNrRdRl7hO3v8qW+fCQV+zgaRlO4FXt9fGKZY0mqSbrJ5ruMZbKmIC1Ft0ugYA=; path=/; expires=Mon, 12-Feb-24 22:19:34 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=fDFzapJ47u_Q9rFuP7KuRpIBHQa8RrJQl13wkr7W3IY-1707774574090-0-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "85480acd288194da-HFA"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1200,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-02-12T21:49:33.398Z",
        "time": 1520,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 1520
        }
      }
    ],
    "pages": [],
    "version": "1.2"
  }
}
