{
  "log": {
    "_recordingName": "Test LlamaIndex instrumentation/should add span for all instrumented methods",
    "creator": {
      "comment": "persister:fs",
      "name": "Polly.JS",
      "version": "6.0.6"
    },
    "entries": [
      {
        "_id": "a6cf33eae98daa6ec10de68e97245d7a",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 449,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "449"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.26.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.26.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 464,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": \"Albert Einstein: A Genius Unveiled Albert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy.\"\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 10161,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 10161,
            "text": "[\"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\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-02-12T23:26:24.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "GOvwhc29HAV8ohHkMptthQzQRWkTmdF1bstcV8FK3dE-1707778584-1-AdF/meoIRQ9NTWzC/RkcInPTK8DXUGj4Bd3yfOH4+urXiHQYCRnuzNdo7vCaM4K6LIL8a1waWjjOqnQmXM3vp9I="
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "hdOrD5UAcwazdltqSaOtSWVuy6vY_EsAkNHm9ClBQ.8-1707778584106-0-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 12 Feb 2024 22:56:24 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "902"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "5000000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "4999901"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "1ms"
            },
            {
              "name": "x-request-id",
              "value": "req_eb0a472c9c4f4ce206f583dc61f94f6f"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=GOvwhc29HAV8ohHkMptthQzQRWkTmdF1bstcV8FK3dE-1707778584-1-AdF/meoIRQ9NTWzC/RkcInPTK8DXUGj4Bd3yfOH4+urXiHQYCRnuzNdo7vCaM4K6LIL8a1waWjjOqnQmXM3vp9I=; path=/; expires=Mon, 12-Feb-24 23:26:24 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=hdOrD5UAcwazdltqSaOtSWVuy6vY_EsAkNHm9ClBQ.8-1707778584106-0-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "85486caf9b8094dd-HFA"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1162,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-02-12T22:56:22.693Z",
        "time": 1401,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 1401
        }
      },
      {
        "_id": "f456eebaebba5da3fcd68a057bdea7de",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 4216,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "4216"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.26.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.26.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 465,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": \"/* * Copyright Traceloop * * Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      https://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \\\"AS IS\\\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ import { context } from \\\"@opentelemetry/api\\\"; import { AsyncHooksContextManager } from \\\"@opentelemetry/context-async-hooks\\\"; import { LlamaIndexInstrumentation } from \\\"../src/instrumentation\\\"; import * as assert from \\\"assert\\\"; import { BasicTracerProvider, InMemorySpanExporter, SimpleSpanProcessor, } from \\\"@opentelemetry/sdk-trace-base\\\"; import type * as llamaindexImport from \\\"llamaindex\\\"; import { Polly, setupMocha as setupPolly } from \\\"@pollyjs/core\\\"; import NodeHttpAdapter from \\\"@pollyjs/adapter-node-http\\\"; import FSPersister from \\\"@pollyjs/persister-fs\\\"; const memoryExporter = new InMemorySpanExporter(); Polly.register(NodeHttpAdapter); Polly.register(FSPersister); describe(\\\"Test LlamaIndex instrumentation\\\", async function () { const provider = new BasicTracerProvider(); let instrumentation: LlamaIndexInstrumentation; let contextManager: AsyncHooksContextManager; let llamaindex: typeof llamaindexImport; setupPolly({ adapters: [\\\"node-http\\\"], persister: \\\"fs\\\", recordIfMissing: process.env.RECORD_MODE === \\\"NEW\\\", matchRequestsBy: { headers: false, }, }); before(() => { if (process.env.RECORD_MODE !== \\\"NEW\\\") { process.env.OPENAI_API_KEY = \\\"test\\\"; } provider.addSpanProcessor(new SimpleSpanProcessor(memoryExporter)); instrumentation = new LlamaIndexInstrumentation(); instrumentation.setTracerProvider(provider); llamaindex = require(\\\"llamaindex\\\"); }); beforeEach(function () { contextManager = new AsyncHooksContextManager().enable(); context.setGlobalContextManager(contextManager); const { server } = this.polly as Polly; server.any().on(\\\"beforePersist\\\", (_req, recording) => { recording.request.headers = recording.request.headers.filter( ({ name }: { name: string }) => name !== \\\"authorization\\\", ); }); }); afterEach(() => { memoryExporter.reset(); context.disable(); }); it(\\\"should set attributes in span for LLM instrumentation\\\", async () => { const model = \\\"gpt-3.5-turbo\\\"; const prompt = \\\"Tell me a joke about OpenTelemetry\\\"; const openai = new llamaindex.OpenAI({ model, temperature: 0 }); const res = await openai.complete(prompt); assert.ok(res); assert.ok(res.message); assert.ok(res.message.role); assert.ok(res.message.content); const spans = memoryExporter.getFinishedSpans(); assert.strictEqual(spans.length, 2); const chatAttributes = spans[0].attributes; const completionAttributes = spans[1].attributes; assert.strictEqual(chatAttributes[\\\"llm.vendor\\\"], \\\"OpenAI2\\\"); assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\"); assert.strictEqual(chatAttributes[\\\"llm.request.model\\\"], model); assert.strictEqual(chatAttributes[\\\"llm.top_p\\\"], 1); assert.strictEqual(chatAttributes[\\\"llm.prompts.0.content\\\"], prompt); assert.strictEqual(chatAttributes[\\\"llm.prompts.0.role\\\"], \\\"user\\\"); assert.strictEqual(completionAttributes[\\\"llm.response.model\\\"], model); assert.strictEqual(chatAttributes[\\\"llm.completions.0.role\\\"], \\\"assistant\\\"); assert.ok(chatAttributes[\\\"llm.completions.0.content\\\"]); assert.strictEqual(completionAttributes[\\\"llm.vendor\\\"], \\\"OpenAI2\\\"); assert.strictEqual( completionAttributes[\\\"llm.request.type\\\"], \\\"llm.completions\\\", ); assert.strictEqual(completionAttributes[\\\"llm.request.model\\\"], model); assert.strictEqual(completionAttributes[\\\"llm.top_p\\\"], 1); assert.strictEqual(completionAttributes[\\\"llm.prompts.0.content\\\"], prompt); assert.strictEqual(completionAttributes[\\\"llm.response.model\\\"], model); assert.strictEqual( completionAttributes[\\\"llm.completions.0.role\\\"], \\\"assistant\\\", ); assert.ok(completionAttributes[\\\"llm.completions.0.content\\\"]); });\"\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 10125,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 10125,
            "text": "[\"H4sIAAAAAAAAA4xZza5eSQ3cz1NcZT0g2+XfvAqrGRKhQTAsyAJpXh75u4LJKV8kssiib3/dbrtcLvv89sPb26d//PzXr3/+9unz26e//fLPb59+3LUvP3376dPntz/98Pb29vbb6//Hzq9///nrly+//PqX1/bXH3/59cvXf336/Cb/Xfl9039O2n/yR5GRyXD78ftFC4lK5O+Lf9itFejOea6aYPRsbc2Y9sepamkww3OrqiOd\",\"V8VkBN8f8FqdaJNQPiE9PPkJndmaj0URdVcE4rk3ExGgh2n6oOW5VTHibrQ4VjpDBpgkMut5KBqi3z/29fNMyARdP1UyTb9XK5Vu9qFbhBTHwFLQ87Rq3MrU2INWHt/ftb/3sBZX9tV4lJGxQIQLo0ADKcPhkgik+jMyH4c74ToRdCyq3ZL9hT3VhI+AoseLNgciq5qvq8hMob3i46naD3sxpg15BlI6zYNgMBXSTU6EeOsJrSQOCgWA+0wxDEs7aNGzM/FMOgnziVRGDMJEkjHnQEyfRJgaKL0103pjznlrhkhl104J3JrsncnWYdd0J+0UcZdGiNHbZhTKNmgU2Dcm5hA9Vo0KP9dSq4SvGh0Zp5CZa6twOpvFyByScrGSPkkOCeOYZ/aYDbNn5IAdq56wbD7X3dFFrm14QwgfFrZP5jdoqZNfQ0A49oKKHq9GdjC0oNHBkbIlgpg6bJTVztiMLFU0kSx0Rjg5MtuVmMBqpvLJOr6Fyo1+riPtHsTx7lNNxA901SOo75H2+T78L2bwypPwAWCKoF7u7kn0KFoyeODvvSDXgLNKqwVkqLinJAeqBNPFjGkTCJUDCMFMM/4LmORqkpb+qLHvt3n7GNcILPW7cYnozhqmHJ/OqFPmCqPBr6hS16HipemYDkqLLZNKrC2NdE5hmWkuBEvkagQWGcTEY/XlLjU+E2rdYBJtvBBDhGtSMgyiTbdYucSp1RXWc4LQ1s3V2zwzA0/I6lbkohBgqbXN/p/XCrC5RUSqWHgUwds0rYvCHT0IMA9YRCOFMTfS0OYTkNIPyL1eOwkDvUFWBUamKsnImgEJWanUKZZmphVwSkbpEbM6QDIM06uKSHbpEXzi6nLotFuLmGsln1c5gTG1ssiwJVmVsFM3PpIQsuU/KW2QkuZzCn36OMdh24FKolmpihi7cmci2GFdEqekWEmWcqHehKo+5473AppXG23M1aMldfKsErACJ7rN8telryUG1pGwKCJ2XYiIclUbBVjPmzUMzfTjLmhia5NV8/Qun9wiyNmo4VwCtASwYPtRiNJOruFRrkeXhEIjWKEqIoKx7GniJKJWKq0b2bB284POGFktyrFVgXUccbKd0oH9rJY7ZFlwN46DOnoGfJ1ovOA0BJDlBB8u0QGEse5ERuspOpZQXv2oZkmMopJjKbk9GPtB0bq0S9p7QiuILtsbnA0mZR28CseIPsVsmorO7Qxd1Ol2c6uaw6r2Us5HuqiNsMZTq/UVuD1XXfnICJ3prRBHp0YL1fNY7Zms/iHiFVQbTCzSh6cG4i0OJsDlRY4sMN0MRZOUUhqnZGpoM4pMtbiK6TKPNOs/tdQd1HCeT3c069LV6jXZrGuXP5kVvRR+qcaHm72sbZCpp8iu4gYwzQrGs4hwaetTMTfrmJNNxIXljMK30/Hjl5HHyOD9/SMe1N37BtZPfe/QLC5i1jl9gFE+YC2SbjtIIBCXrhJgMdSYvhKpOnrI/2K+2o9kffQE90870bNrlAxoRBQ73XE7ADJoZpIIUK+xBvGji8cIV0WTKYsTwg9Sy0yjpZR7ZZk6pFOTOKml2BENJbH76CHHLmkwEcWSXnKsBWGZLSc5sfrmqJBl4ltBS7yMaUs10UUku3JQHvn9zpxWcRp76xQKjanX5iKXk3SwVdq+85nTsUcdDWIZdSZMts66XVD3OBmFF+KYXadswcljN6glzvAQsR0X4c2w7HRA5M5MrmtAndlMj7eOHTWNaC5H2xobCQI0YovsYe1rgFgu4xxFYF1WZECN40jLD9pV3bA0C3wXjUi5HoxuPY38hy7c25bNno+1cu/TGA==\",\"RlWP8IRB1NvPTFYgPlqs53dEVMrVyA1L6eSH6rYe3hrwOj22hZeBH+E3jap2+MKNVoz66akEy2YhRMfjksc10NJpJoiPm1B4Twzf9nFNtA7s9Izs7c1aPiBth4eUd8skrH/ENcse31jel6WncD5n5OyNhMZt8Ic/0vjqHS1u29EAT1/WNZbkmTPWfZ/TREgfOh0NSb3G1qbJ6Sggj7bof+FeXFsq+7YIGkrVFkDGGRFI1oCbduxkdfz4OwfmREnIQjYzJXYK12St6gp0/q6n2upXcFT3nBGcwTON+Se2S+k6c1z10zmo2GSzEzDefQZbNrbOYU6RVY2HquADSnJU6PDQXjoMIFa9o9T3BPk3AAAA//8=\",\"jF3dinTJcbzXUyx7v1D5W1l6F2FktAhjSSusNRiM3t3E6V7DRNRoBl0IRp9mus+pysqMvwqvKMbATneaoBllXV1CeaLpoOPa7OFHR54Wuml6izvOOtpcLLzFZJrGJp3mcByXGMXlJUxE8ugQZ3qk7Vknk8uvnypTOHhPn+SJJOu48+FqUxmbX7gwaD99DhDgY9nmT7AicxGf8vAUqIA8Q4Ke9M0N4cmzUyCG8ZwlKO9J/WZpEc1DiY0V6i3/9ICo+bhA8aHki6FxunyqnN35Bf/16mit5/Ay7KnjMpo/2CIfQJmAxWjXX7b32rXKiv/lLB6+Pd1M6m4CdtosEXjGGeYIrA7ODzqYrQYYmTRSPCU8DwpvxKU3GbcjnZC7A3m2r2nNO/0HTA8zDX1cAPIRzUDbWJ0URB/8h6fJKlzgsrnG3FbW8w1qF38LnM58tmd2HBmhVlaaYsmzs5f03xjPP5TvZzPvyrOEjZ6ZIw14DaoX82NAwwUD9My9N9MV+AyzWO3Qs9D6NXcNDn6HBuSKtdeS+tnP2DdMOV1UJG1+evMU1jbNDQ7Y4YgLTI5Fwp2T+0HtYbYiai1a5cCtQ2DJOHWaEYr0at4jaejF6KGkT4xSWZX8uoEN5RaAaSJEDZB1oVKx5Id3La329x6oMHpINnEqmA3ZedAi06rEj6mvwo9M2g8rO8eMyYGpKSqln1Qdhx5EGKFw6Fe4ZV2T6ENpWrbBaudfQJjb+7dmFPcJ+/D8bhZhxG1HTK1NBcSrNnolRragNRjWldn+0Ni/TzELbypAdzjc6+yUOuplXjxcrKoTKKQ8YnXM4ZM0C+3qYcxvZu9meA17GgDR1mazDn85CxAGVEBA6AUNhJgnvVhgYSgqtFoTDT9NR9Y4ozcruHJ1y+ePzG3GZ6+7YQsw9u+HD0O8qRTcep1YD3JOz/WBbGgLbGAgMm/ss3eIlqfnYMMyTxHDhdZxjE3wbusYTOXyBldXiwwOcpRsei8PGk2VIRo0Fn2qndtadD9ZMS5l0eeAp2DpkeyPF0+AlpQ6khzwhvxia4+INICd8xMEJ1MynxqKgPE5nr334mbkKhuFYtD8SB8Qvg/zzz22PxxAr7dtEyIeAzYVMl3G7lMs+nwwYiokqxoc6Vb656IdWzZ9KvlXREUkA0P2wKsp40qtMSk6C3i20JmRkdT9+Tztnyg0Y4neULUUb+1tuLQhqyEsEjbU9mY8wfL0GTlK3GxthgN+o8sYcTvRw3PJnWS9Lvl1PHNYUItHkLzBAbGWoP9nxxFV15xogaWEmXsrHr2CBQtoZQSHTAf4y+dGT0kd8RoV+VqHHdnwENaxlOXEDu7NIJOS1nAf6+SCBX20O1exmQx3lvKemnbFbNcsUerdWOQAItY0bfuj5ZVt4Xvb+Mev356WxFMFikDyc/Ide2jtQXgwTtzXigQJbawcQG8PZpXOt3V6DY+Q7dDwFQNEH8HD14oArstkiq19iqcLlFyvWDLCA4epFrLyxOJ29NZNLow9KeUdTP45cujdEdBc+zD+6I3nwEUMnJa3gPxXZvg+6IGoaJHb3QshoDeolGkhocSbzKXgES+dBpZdSIXPPrLAI8w9uVm8Tk9e4O1lMEhIxVlivKBFFU0XZtgjathHf76Hhe0dZx8X4ZFXxxLqeKBJ/c4xsSAR1tez1gxDCZgN9ClCgU8KY9VTv1GqnSbNcu+yElAPyKy4EwK8pYDLjh1BBQmaz/6G9tYMCmcdT6zS7OzvuQW2j7dwQOkxa8Q10ZGHeu4Y3+lyJvu4HFMoa32GdeLoa1h8sU8tnoTAOYaLUAIM4WlpLQ==\",\"d++hSrnC8qFZhb+BrEygbKvYxVg2nspqhaLPs6O/Otqe/hSoSbuq5aCBY3FO2EppYvbsvkiMbgrite3k4c6g1t4MSaw9qHQl0n4v44qEgwSlRoDPWXuGpWagCZY01NYPDSN7p06U4lfky3nRB8VCxDXGzpO1oSAYVp4CEmIiz31DSKHHEDwTzEythgKBfmp1UKWE3kvg3owr0kj9Rt03kEn6UzDUlIqzn7cg3ekKeVtrAuLCrVLsrB3qHPEokQZA5S/U+idmDu/lh/u8AObKqxPQhtTPO4FyV944tF9bpKuO03jx+4W1ihXPgJM7FKe+C0dudri1gViK7KIzt86L56hSLHex5yxOpZ3NmNlUsyXEZtcpVoHv6Bg6VoC2prTk7einRsTDs924p+wpE4UMpkKML4xlrZplgk7DlcLgMkQXdY62Bod195YYyEZ1rz1GYOiamhQLSdRkb7Ha4CscBn2lhf8XkAW4zAiph7FyH9Eh6F56ldQ6PFrcm4YF6UtJLxBWS6bgGjs5DLv3RldajEf5iAJs9YHijqUNNdUs7xTG6Nkve5r1imG5WRzq3hnFsvKGjN5Fv716a883W6h7n3NUhW/RHipoYvXXyy63lolFsyFKY6LI0LQJuAI8r8+Sbo5545fspgG9xRdyjfepDIGw6DWyTyrrhx5xHfEowPMUOsn1Sqawaq+d7tKQn4GN5Vuw6OrcucVaE7XFCmBRogIrSOaZGHBsDu1zAaLLOzsBzYmzwhSTwsf3WM865hbGYjqkjbKZcVZvXdRuSk28+kDvkacKCYcdoZpsWnulm7d7TQVgGpooCuYTeXwQSbGu5ECHyeVNhtjXjDDoN7mR3X46RHC5W87jT6T+C5y6iRASo5Zoaw5MVOKyhVBdJJ+q7nkLITeGWOZhp4pFh5DRALugE2mPiSYNR2V+hKpezo8xqoef4s1ntXPX6lCKCzsBNTGLvAx2RBHBWGE0DK1nkKWJKLyg6y7/yvT1koQd+q4YassYhb/yyGtDXMQ+X8uTzvPQKkhnpb2FLYtVPPi2DftfMwJmPodVuvAPiPAL0qBgNleL/7vG9nZjr/IzygzPy+s5qblnPrOjWHzQKGViIIVxZ9jCaUAiQhjBnPEQG0GddHHuQ/DvYh+CxhOyNF4Ig9Uo0MdVFIYpdnrJwoOANlSElpiXnKf/T4yFDim3MXw5+5zh0tYFByLvFIgZuSMVp8uzSAyDRsuZC5OC9BOG6XTxJCcf69V6VHsTMxSwbsiMH2uWj6vkGCeEHISAQMR+ZhDjSyQJJEgnjiRfnNknzhdui7eIDNVlf2eRxI5h0bNDItOrBbOzM8yb9giKpebftwPQKkdFe2c3HwTl2TYieLtKTTHnb2dvjE91LrEbXofZyGfEE18yHqwmy2zIdEyqwGW+wbrbs0WCb459xgDwDZmGyT4slsoCAKKIrAfdootTFsNfc7fQu+MwpYHBTSIFVuU5Z5nMXht92FdGqzfk0Z1nS1DFgRhXFOCFyBFGaPzxEYrH4iQf4EhWgU+fVPjj4v2/Pxl4rk+yAE+41remLry4PyurbVt47A2MKkybgPGhV+YQHbDmSqbiV9e4ga/bV+v53UJ4qBXi+rlULv9CnAE6MHjXvfIEM0uo7tLOrnNi7xKVF8Ro0jfOw+6yKGrvLVYTGJCWSQ3MCf1bELjVYTM6PMtymBTOTgatswcuEQm3AtLaLCu0gMlcLBK7+nDF3QHBV32nTTYrGKao67NxzSSCla8zZNbY7RJHg8bLFVzekDylSo8RduAS6DH7LDkh6iwRNq2E0FeF4b2TAY4wwOMiS4yuzTBTIQ==\",\"GSEZlEPWgKd9ZyVV7d5sXqx8kGD+Cg4KnGs+dL5+JNWmIJrZLORRMdSDisFkwEd6rPHDUkhgPz5Okxwm7mIBQ6JRlgQWBKolNxpX2ZjZ4DBj5xtmJaIyIXIENMjsrynq8cjWdqcq7gGp8fIEC5Xqi+Vz/hWptrJk1TeEuy7O3pOycYGfbbEizGkT1fmKjV/iosJASZLufdcJ7Q0N7ZaAmxZ9PFkYmfVRvvfeTWU6E1zsEBrB8s682khB4Cee0DKVBIJM5JGWBEJyYe3WU2dkeIfOCzlbjJn2HBWkAH8Sk5c99f3jR4PlaAsdYPi6ElGR4J+b7eRUl1/7Gd5SoYbgp2AWCjEBl/EFlJ10yD5drNzB1Doa3BNwbnBFg953fxkM83beLzMWNkLVJt59Xz2zGH55A5b8DbadkuyST2zOcOlFiPetKkR2i6qKrBOdnhLeCklvqhM80kNUJRLtnhSr+gLdNvyxOmxS3NDQUAggcAyWTa5IOO1K/NBA6Y9kvbw9BizXumQcYvb62K2+8zPZG+qGJfOlP/bTYAcD28UOYdXj/HS3MrwiTtwFHbzmXSxkX0oLLsPUi4wdjCyCCqXzAboG8ruUsDmsILEMtYbt4RdgBUnh821WMhHeKe3wNatLsNtth5m8zDibh+0r3reQU7WE/0GPJh08ZEoZTN37ibLzVXvzWSjolZcBjgLVnvRB5qm6sBMihMWhVNbfAJMNvaC8RD9wEA3zmAz5vM/EvbZa1TfI9/mWwgVfAjZ+FlPalARPXhI9Da6/Q/pMwwCir/BqBYyIfZSfzV0pLORes51hUMnt+1z6hUGUX5fn4GEr5BqR4i42T8ceF23enpIYpVjC/1hA/MCvVnQd7yMZAlsmLTcyP4RsC6nE99kWHsEs8cqCd+/NOAsU7TzWIYZDuu4+Hz2SP719dHh+fEZeGrt7gJweZv9CFQiZro2YVzFDihNPTNuv6Tz9KLHXidCrzeRJnhBVX0ex6UeqwxtpPiZmBdS3DlYhwdx0dovWrsZCsj+vptSCyV0ojQyDGIgXXNqIj8camZ6MnIBDA38hdQcqEJVweMJcLHKuU6VCTE+QpEIcP2iCVM9JAWAdDaLYRdH1xRZiJaEgYLgKLCXCcRjryUE+kHzlxuEoDbm3l/Pmac/VYmvrtt4Cmd/Imcz0VFPQ7Q2tfS5o76NSjWYw8cBfK/UHY0pK83zjlxBwVJzHagezPJ8MMLwmDxrgWJJBQ+9J4T4DQ6BEqYus76WCnszNxB8we81yx1S2uIThYGrZPIi20U7Gu3exOhBgQogeyFCDRXRhlYUc7g8/tT5o3Wh1zk7JSOwn+sN4yXJ246uTK5sjeYasQH4WhsF54t9oen5rLiTgCGkLwzkn3aH21CunCwDvaHou0uBHzmYMq1tisjKL6V8HmWouOSdnh7PXApwjx4mssztZBgFPB0LNeG88PjCGPB9OjDkBjOY2AtYhseeoVSLC1YjWGwGJ/ZUO/HNDOUBAxBizIdQjBB8ArdGcmHCNF4Q2cjHX5z2wxYYQjhNlHKAFwDDCWio42GY5idR+/WZjR6QQu+F6YnQQsCvn1F8Ed58E3aLEQenKu/Sa13VVxBrqP/NDYTYfP+pvB+kciXmCbIFLYj7Rwgy6bvCovOwOYouOmj/PJTy/n+hY7h4tJDzzLq4Te8+7fwSUq0qGSwt/5/kavjlR/1pBNc+u/sotnkgHFrPkgg93DJJiAj4ic3U0jyxAA0F3ToRW//EQwBIzkPhy0XIE20oWQhbFZibnz5tDcd/a53FM+Wu8hCuNow3Cl1ZEBKDyCBTVk8yw7+2b+2ckBw==\",\"z6hHYoFR1UQZtTYbHuyWpOWKR73LKY8Q3c93MlzXrq6RWz+sV+k2IB/VT1f/3RsJN01BQo/ML2AhbuPjRQPv6rBKiGZsYj8ir4NmDiHQEhlUyvs72OKo+FZYGIQ3IWZy3312CYVy64evG+zioHspmLJZWVVohtRhjW3P7KvKjN68yAVFhNjE2EeE5N4SO3udx3XJARAUyf6qh0tNNTdjL9huDEFb9VNpHEaOTI4tPTKu3IgUy2buaaICMQtIRvNAxzdK+HFEloF8dl1W0F3yaZSxBfXouRzcN3s/mkuQbeJnyVjB4TkFZ5bIzHJ6Pu6Yp7z18Ytw1vhuFs0ze70oWOE2J+shlZuF1k+A0Bb2ymCodG7QlW98vwFfrknbke0s7wKMLZrF+ymHJVXMBNxxBxvzj/Ftr8F6rxLVWEDiJqHt18A9ZKvH4oeAEBVWLN79BneL4fY1ep5ds3wHbpYl6muCjl71Aim0ijjMKj4jDEdk0OLQOO23UAHifMnPhK6DZYKVKVhn4/YiAYEVAPzNlYUJVtstjK8th0TERmIet7EX0Rkaq+BH88mHcKAxZ74+wa+8IjK5Y5KPSkiaVCOIJJbm0gPr95Yw3VtSRYbCvQuk5hKY6xrKLVbTzy4YAV7a8Lux5OaJXTwcd7IrRenZcVwD/B7/1IiBCk23JJ4UbryQc75Pl4jFJU75fStRrBZsNVd2ieTmmsAtu+b9HXDZk0i6qkM6eSxMQUzOTIsoFZ0RLosROBrMZgh7YrA+sMkDyLPD5s0LrMs4jeWqYb0H04GMbuG6bpoG64qUtGcbiNup9oR9VKZcjRNv8RfADeGJAme7RGG42RO0xq1N99kyuvhAZ5kqAreKbLF8cUf8viRsRXHOBc5L+mPb1zZ2dN7Ae/ParY58UE1LI8TI5//Gzor7EKSjtLQh2B9VMrtd8OZ7+M8tAS7hjwhx+uAmKeM2eg3uC+z8yuL4hqC7nS+qudnrALVi/mRFPAJf+VoLSz9cz7xxbaZopqHZZOxyAlfy+BempGvc+LtIY0mwbQMEvc18LcYFLP9RTPsWfJ6PmZOv82gwfYqXE0O1FMMT+3AxvErBLp3sa8cjcZihqSuRLMFDz5+aXnu2YPVbobwctzzfuY4HJnwVCS7c27f9W9epogkCaCeqddy+c1g+fYshN0yOY19TeNnl+/DWxJV2oWg/B4B/npmSsJmOGoV3cCISoj6k40QyPKFwiXg/YZyeY1bjg8qjcgllDhtiSiR4YBquL0X477KPxyLt3s0JeAwXCIqeIn0FXwKDgP0UadacXS5ZMtNmGrwHxRV0TEcuPxtbxZ0Ynpoc/7fAdgg1p01vdXvpD9X0di42z+sNn8dx569zTGr3iGhMrhF+d7h4nZwJeOnbNV/5lRwNNEpGvYWca3b4V4hOcg3uyuVYDAD+KeBrDu46cIl96oM7oGSwhQwnOEztlWCoczRZeV5LbLo0LBYBfrJ5QV8Op+olbp5RdetACCXyHFzvdcSX7IJ218EzYPbsCXf6TkQMYvaQEsPJkuNLCEy1MH9y8+fdG3S1IdhGzHPLvVTV2fs7hrRrLrBHfEyieUsnt5fcCNoD4Z0acLuLGWjcyJAiz9qBoMKvlZOwKiDHildKm4muB+1a8u3SkJgL3ZMVT/w5N3Zpksl+s5WviTFOXnNEgjOBrgv9WSgH/5E8JQppu6c7XC/XvtsyXqMJDOzi0c0gGG7A3vPMpi6ct4TtbK5g1y+PpXOc4YRrRcAAs2Q0Ag/q4nvASRhHMqWx+Ot856K1a17xJyw3DE7N9EcCAjosIIeUv7fyBNCwbU6de8RxPA==\",\"XV7zqtFjZXG6MrJ5zze2mgM2F+zierkgRJO4YZBWEITaHN4oCRsvqYYJnf6JNOcG71+fCVgyEy8awjGOisfHWvOWWDf8kg7Aliz+auScLb3HFXdOiQYQt3voAGBxjHl7VOqsHd+R1jlMqhqKimON5XLIT9gS0QIsYx85Wfg23E/vu3gl071/9Ifnv//5ux9++AP+1Y9//eVPP//lx9//8OOvP//Prz/9/Nd///lPf/qPv/35pz/+6Y8/reU/Pv/ov//xxz///OPvf/jf5//849//65e//v3Xf/v1l//8+W//+PH3P/z/1dg//vrLr3/8y4f/4Xf4Y//83f8BAAD//wMATvC7PHiCAAA=\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-02-12T23:26:26.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "FTs2Xh8GTAMxnTmwgJTRbzMdJSkRigs0fOZ8_QTDMmU-1707778586-1-AUgME+SxEEiWcJcEMYa09Nial3fgzNKDL+OfHktSyBcJQS711DCn2xZNDvhDn2U8ZIO8lxzeDf3MVKSW+t7YEj8="
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "lElgtLQ_VjYAkZMovFrtjaK4XcoeWYPEpnKCPA9wtXc-1707778586829-0-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 12 Feb 2024 22:56:26 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "2206"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "5000000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "4998982"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_1b67924d7802a8832a906a3f7ebe1696"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=FTs2Xh8GTAMxnTmwgJTRbzMdJSkRigs0fOZ8_QTDMmU-1707778586-1-AUgME+SxEEiWcJcEMYa09Nial3fgzNKDL+OfHktSyBcJQS711DCn2xZNDvhDn2U8ZIO8lxzeDf3MVKSW+t7YEj8=; path=/; expires=Mon, 12-Feb-24 23:26:26 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=lElgtLQ_VjYAkZMovFrtjaK4XcoeWYPEpnKCPA9wtXc-1707778586829-0-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "85486cb859ee94dd-HFA"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1164,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-02-12T22:56:24.108Z",
        "time": 2670,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 2670
        }
      },
      {
        "_id": "550eeaa55c1088b46a182bdae72d0931",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 3013,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "3013"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.26.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.26.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 465,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": \"); assert.ok(completionAttributes[\\\"llm.completions.0.content\\\"]); }); it(\\\"should set attributes in span for LLM instrumentation in case of streaming response\\\", async () => { const model = \\\"gpt-3.5-turbo\\\"; const prompt = \\\"Tell me a joke about OpenTelemetry\\\"; const openai = new llamaindex.OpenAI({ model, temperature: 0 }); const res = await openai.complete(prompt, undefined, true); assert.ok(res); let message = \\\"\\\"; for await (const messageChunk of res) { message += messageChunk; } assert.ok(message); const spans = memoryExporter.getFinishedSpans(); assert.strictEqual(spans.length, 2); const chatAttributes = spans[0].attributes; const completionAttributes = spans[1].attributes; assert.strictEqual(chatAttributes[\\\"llm.vendor\\\"], \\\"OpenAI2\\\"); assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\"); assert.strictEqual(chatAttributes[\\\"llm.request.model\\\"], model); assert.strictEqual(chatAttributes[\\\"llm.top_p\\\"], 1); assert.strictEqual(chatAttributes[\\\"llm.prompts.0.content\\\"], prompt); assert.strictEqual(chatAttributes[\\\"llm.prompts.0.role\\\"], \\\"user\\\"); assert.strictEqual(completionAttributes[\\\"llm.response.model\\\"], model); assert.ok(chatAttributes[\\\"llm.completions.0.content\\\"]); assert.strictEqual(completionAttributes[\\\"llm.vendor\\\"], \\\"OpenAI2\\\"); assert.strictEqual( completionAttributes[\\\"llm.request.type\\\"], \\\"llm.completions\\\", ); assert.strictEqual(completionAttributes[\\\"llm.request.model\\\"], model); assert.strictEqual(completionAttributes[\\\"llm.top_p\\\"], 1); assert.strictEqual(completionAttributes[\\\"llm.prompts.0.content\\\"], prompt); assert.strictEqual(completionAttributes[\\\"llm.response.model\\\"], model); assert.ok(completionAttributes[\\\"llm.completions.0.content\\\"]); }); it(\\\"should add span for all instrumented methods\\\", async () => { const directoryReader = new llamaindex.SimpleDirectoryReader(); const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" }); const embedModel = new llamaindex.OpenAIEmbedding(); const vectorStore = new llamaindex.SimpleVectorStore(); const serviceContext = llamaindex.serviceContextFromDefaults({ embedModel, }); const storageContext = await llamaindex.storageContextFromDefaults({ vectorStore, }); const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, { storageContext, serviceContext, }); const queryEngine = index.asQueryEngine(); const result = await queryEngine.query(\\\"Where was albert einstein born?\\\"); assert.ok(result.response); const spans = memoryExporter.getFinishedSpans(); const spanNames = spans.map((span) => span.name); assert.ok(spanNames.includes(\\\"get_query_embedding.task\\\")); assert.ok(spanNames.includes(\\\"retrieve.task\\\")); assert.ok(spanNames.includes(\\\"retrieve.task\\\")); assert.ok(spanNames.includes(\\\"open_ai_2.chat\\\")); assert.ok(spanNames.includes(\\\"open_ai_2.completion\\\")); assert.ok(spanNames.includes(\\\"synthesize.task\\\")); assert.ok(spanNames.includes(\\\"query.task\\\")); }).timeout(60000); });\"\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 10209,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 10209,
            "text": "[\"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\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-02-12T23:26:27.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "nvXPzyYnDkwdIl7_aiAW7S2GUqMTmjfWJxvMYLAk5yM-1707778587-1-Ad/cSh1tdq2qOpSG1uTMI83cTnJCTy/aI30Rjiz1Rpfa1ScVoxgcSu14ajB2aVsTRLtPoVaRcykHRq+KijbnWAU="
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "TJJXoyNMAjt16oGObChpCqnzYG1bawDR9Qi0TIvsx.4-1707778587282-0-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 12 Feb 2024 22:56:27 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "36"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "5000000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "4999277"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "8ms"
            },
            {
              "name": "x-request-id",
              "value": "req_879061884804ce2db8e56e350da3b73c"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=nvXPzyYnDkwdIl7_aiAW7S2GUqMTmjfWJxvMYLAk5yM-1707778587-1-Ad/cSh1tdq2qOpSG1uTMI83cTnJCTy/aI30Rjiz1Rpfa1ScVoxgcSu14ajB2aVsTRLtPoVaRcykHRq+KijbnWAU=; path=/; expires=Mon, 12-Feb-24 23:26:27 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=TJJXoyNMAjt16oGObChpCqnzYG1bawDR9Qi0TIvsx.4-1707778587282-0-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "85486cc92f3894dd-HFA"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1161,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-02-12T22:56:26.788Z",
        "time": 433,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 433
        }
      },
      {
        "_id": "a6fdde5cb88f9b90337ceffc9c9c13e9",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 85,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "85"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.26.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.26.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 463,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": \"Where was albert einstein born?\"\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 10206,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 10206,
            "text": "[\"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\",\"AwDGd/1Vs4IAAA==\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-02-12T23:26:27.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "lOic0XM9ZZlATejEyj2IT4WCl7Umxdf08pmFWOHMlNA-1707778587-1-AWSXu6oydhGXoYDOiiXu4kWjoORnN1m7c6asWDfuSXc2ZHgKh3fTyBu0NJHeWsIl68JWB+eCTZ6ox7XcW8TTcW8="
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "G_9FtsZpdCsFhuYBxlcgDmkRp4febn3OeLsbPymyTd0-1707778587734-0-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 12 Feb 2024 22:56:27 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "25"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "5000000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "4999993"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "0s"
            },
            {
              "name": "x-request-id",
              "value": "req_a5da3d687b00e22474c3899e5f64e80d"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=lOic0XM9ZZlATejEyj2IT4WCl7Umxdf08pmFWOHMlNA-1707778587-1-AWSXu6oydhGXoYDOiiXu4kWjoORnN1m7c6asWDfuSXc2ZHgKh3fTyBu0NJHeWsIl68JWB+eCTZ6ox7XcW8TTcW8=; path=/; expires=Mon, 12-Feb-24 23:26:27 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=G_9FtsZpdCsFhuYBxlcgDmkRp4febn3OeLsbPymyTd0-1707778587734-0-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "85486ccbc9a894dd-HFA"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1160,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-02-12T22:56:27.239Z",
        "time": 437,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 437
        }
      },
      {
        "_id": "6b138a1b40fc9240d6a6dc7ab7b58cb6",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 3715,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "3715"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.26.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.26.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 471,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"gpt-3.5-turbo\",\n  \"temperature\": 0.1,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Context information is below.\\n---------------------\\nAlbert Einstein: A Genius Unveiled Albert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy. ); assert.ok(completionAttributes[\\\"llm.completions.0.content\\\"]); }); it(\\\"should set attributes in span for LLM instrumentation in case of streaming response\\\", async () => { const model = \\\"gpt-3.5-turbo\\\"; const prompt = \\\"Tell me a joke about OpenTelemetry\\\"; const openai = new llamaindex.OpenAI({ model, temperature: 0 }); const res = await openai.complete(prompt, undefined, true); assert.ok(res); let message = \\\"\\\"; for await (const messageChunk of res) { message += messageChunk; } assert.ok(message); const spans = memoryExporter.getFinishedSpans(); assert.strictEqual(spans.length, 2); const chatAttributes = spans[0].attributes; const completionAttributes = spans[1].attributes; assert.strictEqual(chatAttributes[\\\"llm.vendor\\\"], \\\"OpenAI2\\\"); assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\"); assert.strictEqual(chatAttributes[\\\"llm.request.model\\\"], model); assert.strictEqual(chatAttributes[\\\"llm.top_p\\\"], 1); assert.strictEqual(chatAttributes[\\\"llm.prompts.0.content\\\"], prompt); assert.strictEqual(chatAttributes[\\\"llm.prompts.0.role\\\"], \\\"user\\\"); assert.strictEqual(completionAttributes[\\\"llm.response.model\\\"], model); assert.ok(chatAttributes[\\\"llm.completions.0.content\\\"]); assert.strictEqual(completionAttributes[\\\"llm.vendor\\\"], \\\"OpenAI2\\\"); assert.strictEqual( completionAttributes[\\\"llm.request.type\\\"], \\\"llm.completions\\\", ); assert.strictEqual(completionAttributes[\\\"llm.request.model\\\"], model); assert.strictEqual(completionAttributes[\\\"llm.top_p\\\"], 1); assert.strictEqual(completionAttributes[\\\"llm.prompts.0.content\\\"], prompt); assert.strictEqual(completionAttributes[\\\"llm.response.model\\\"], model); assert.ok(completionAttributes[\\\"llm.completions.0.content\\\"]); }); it(\\\"should add span for all instrumented methods\\\", async () => { const directoryReader = new llamaindex.SimpleDirectoryReader(); const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" }); const embedModel = new llamaindex.OpenAIEmbedding(); const vectorStore = new llamaindex.SimpleVectorStore(); const serviceContext = llamaindex.serviceContextFromDefaults({ embedModel, }); const storageContext = await llamaindex.storageContextFromDefaults({ vectorStore, }); const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, { storageContext, serviceContext, }); const queryEngine = index.asQueryEngine(); const result = await queryEngine.query(\\\"Where was albert einstein born?\\\"); assert.ok(result.response); const spans = memoryExporter.getFinishedSpans(); const spanNames = spans.map((span) => span.name); assert.ok(spanNames.includes(\\\"get_query_embedding.task\\\")); assert.ok(spanNames.includes(\\\"retrieve.task\\\")); assert.ok(spanNames.includes(\\\"retrieve.task\\\")); assert.ok(spanNames.includes(\\\"open_ai_2.chat\\\")); assert.ok(spanNames.includes(\\\"open_ai_2.completion\\\")); assert.ok(spanNames.includes(\\\"synthesize.task\\\")); assert.ok(spanNames.includes(\\\"query.task\\\")); }).timeout(60000); });\\n---------------------\\nGiven the context information and not prior knowledge, answer the query.\\nQuery: Where was albert einstein born?\\nAnswer:\"\n    }\n  ],\n  \"top_p\": 1,\n  \"stream\": false\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/chat/completions"
        },
        "response": {
          "bodySize": 440,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 440,
            "text": "[\"H4sIAAAAAAAAA1SQzW7CMBCE73mKlc8JAiGSlFsrVRWHVr3QX1XISZZganste6OCEO9eOQRoLz7M7Lc740MCIFQj5iDqjeTaOJ2V/uMlNK/N++5u8dS90f5mQY623VI/4rNII0HVFms+U6OajNPIiuzJrj1Kxrh1UoyLoihnZdkbhhrUEWsdZ9PRLOPOV5SN88l0IDekagxiDp8JAMChf2NG2+BOzGGcnhWDIcgWxfwyBCA86agIGYIKLC2L9GrWZBltH/tWV+gZ7pUNjMrCjwxQkbegLCy1SeEBvZF2PxIDfrzc1dQ6T1XMaDutL/paWRU2K48ykI03ApM74ccE4Kvv1/2LLJwn43jF9I02Lixm+WmfuH7p1Z0M5QUTS/2HyvNkSCjCPjCa1VrZFr3zqq8bcybH5BcAAP//AwCQBnHV7QEAAA==\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-02-12T23:26:28.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "34QuyIzNysrr5hKAil39VMJr4NgOXP3hgkIkeQQJuR4-1707778588-1-AcKnVWACYSt/obtfhrjjrUzVgn1i6GhckQpoHyhZD8QI/bAcXl5179flWxFXzRM1dNHvLpGG5iHFueIZioRALvg="
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "k8RpEbL5j0Gt8obq.oCCWhPeszZE2OGK.hqwFfjr5AM-1707778588362-0-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 12 Feb 2024 22:56:28 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "cache-control",
              "value": "no-cache, must-revalidate"
            },
            {
              "name": "openai-model",
              "value": "gpt-3.5-turbo-0613"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "194"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "160000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "159113"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "332ms"
            },
            {
              "name": "x-request-id",
              "value": "req_b4543ba6928879164e85d86792be00c3"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=34QuyIzNysrr5hKAil39VMJr4NgOXP3hgkIkeQQJuR4-1707778588-1-AcKnVWACYSt/obtfhrjjrUzVgn1i6GhckQpoHyhZD8QI/bAcXl5179flWxFXzRM1dNHvLpGG5iHFueIZioRALvg=; path=/; expires=Mon, 12-Feb-24 23:26:28 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=k8RpEbL5j0Gt8obq.oCCWhPeszZE2OGK.hqwFfjr5AM-1707778588362-0-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "85486cceec6b94dd-HFA"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1200,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-02-12T22:56:27.710Z",
        "time": 452,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 452
        }
      }
    ],
    "pages": [],
    "version": "1.2"
  }
}
