{
  "log": {
    "_recordingName": "Test LlamaIndex instrumentation/should add span for all instrumented methods",
    "creator": {
      "comment": "persister:fs",
      "name": "Polly.JS",
      "version": "6.0.6"
    },
    "entries": [
      {
        "_id": "f551fbadc626e695523e8afb90f57137",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 9656,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "9656"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.38.3"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.38.3"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 465,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"Albert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy.\",\n    \"/*\\n * Copyright Traceloop\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License. * You may obtain a copy of the License at\\n *\\n *      https://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and\\n * limitations under the License.\",\n    \"* See the License for the specific language governing permissions and\\n * limitations under the License. */\\n\\nimport { context } from \\\"@opentelemetry/api\\\";\\nimport { AsyncHooksContextManager } from \\\"@opentelemetry/context-async-hooks\\\";\\nimport { LlamaIndexInstrumentation } from \\\"../src/instrumentation\\\";\\nimport * as assert from \\\"assert\\\";\\nimport {\\n  BasicTracerProvider,\\n  InMemorySpanExporter,\\n  SimpleSpanProcessor,\\n} from \\\"@opentelemetry/sdk-trace-base\\\";\\nimport type * as llamaindexImport from \\\"llamaindex\\\";\\n\\nimport { Polly, setupMocha as setupPolly } from \\\"@pollyjs/core\\\";\\nimport NodeHttpAdapter from \\\"@pollyjs/adapter-node-http\\\";\\nimport FSPersister from \\\"@pollyjs/persister-fs\\\";\\n\\nconst memoryExporter = new InMemorySpanExporter();\\n\\nPolly.register(NodeHttpAdapter);\\nPolly.register(FSPersister);\\n\\ndescribe(\\\"Test LlamaIndex instrumentation\\\", async function () {\\n  const provider = new BasicTracerProvider();\\n  let instrumentation: LlamaIndexInstrumentation;\\n  let contextManager: AsyncHooksContextManager;\\n  let llamaindex: typeof llamaindexImport;\\n\\n  setupPolly({\\n    adapters: [\\\"node-http\\\"],\\n    persister: \\\"fs\\\",\\n    recordIfMissing: process.env.RECORD_MODE === \\\"NEW\\\",\\n    matchRequestsBy: {\\n      headers: false,\\n    },\\n  });\\n\\n  before(() => {\\n    if (process.env.RECORD_MODE !== \\\"NEW\\\") {\\n      process.env.OPENAI_API_KEY = \\\"test\\\";\\n    }\\n\\n    provider.addSpanProcessor(new SimpleSpanProcessor(memoryExporter));\\n    instrumentation = new LlamaIndexInstrumentation();\\n    instrumentation.setTracerProvider(provider);\\n    llamaindex = require(\\\"llamaindex\\\");\\n  });\\n\\n  beforeEach(function () {\\n    contextManager = new AsyncHooksContextManager().enable();\\n    context.setGlobalContextManager(contextManager);\\n\\n    const { server } = this.polly as Polly;\\n    server.any().on(\\\"beforePersist\\\", (_req, recording) => {\\n      recording.request.headers = recording.request.headers.filter(\\n        ({ name }: { name: string }) => name !== \\\"authorization\\\",\\n      );\\n    });\\n  });\\n\\n  afterEach(() => {\\n    memoryExporter.reset();\\n    context.disable();\\n  });\\n\\n  it(\\\"should set attributes in span for LLM instrumentation\\\", async () => {\\n    const model = \\\"gpt-3.5-turbo\\\";\\n    const prompt = \\\"Tell me a joke about OpenTelemetry\\\";\\n    const openai = new llamaindex.OpenAI({ model, temperature: 0 });\\n    const res = await openai.chat({\\n      messages: [{ role: \\\"user\\\", content: prompt }],\\n    });\\n\\n    assert.ok(res);\\n    assert.ok(res.message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    assert.strictEqual(spans.length, 1);\\n    const chatAttributes = spans[0].attributes;\\n\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.system\\\"], \\\"OpenAI\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\");\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.request.model\\\"], model);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.request.top_p\\\"], 1);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.prompt.0.content\\\"], prompt);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.prompt.0.role\\\"], \\\"user\\\");\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.completion.0.role\\\"], \\\"assistant\\\");\\n    assert.strictEqual(\\n      chatAttributes[\\\"gen_ai.completion.0.content\\\"],\\n      res.message.content,\\n    );\\n  });\\n\\n  it(\\\"should set attributes in span for LLM instrumentation in case of streaming response\\\", async () => {\\n    const model = \\\"gpt-3.5-turbo\\\";\\n    const prompt = \\\"Tell me a joke about OpenTelemetry\\\";\\n    const openai = new llamaindex.OpenAI({ model, temperature: 0 });\\n    const res = await openai.chat({\\n      messages: [{ role: \\\"user\\\", content: prompt }],\\n      stream: true,\\n    });\\n\\n    assert.ok(res);\\n    let message = \\\"\\\";\\n    for await (const messageChunk of res) {\\n      if (messageChunk.delta) {\\n        message += messageChunk.delta;\\n      }\\n    }\\n    assert.ok(message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    assert.strictEqual(spans.length, 1);\\n    const chatAttributes = spans[0].attributes;\\n\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.system\\\"], \\\"OpenAI\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\");\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.request.model\\\"], model);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.request.top_p\\\"], 1);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.prompt.0.content\\\"], prompt);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.prompt.0.role\\\"], \\\"user\\\");\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.completion.0.content\\\"], message);\\n  });\\n\\n  it(\\\"should add span for all instrumented methods\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n    });\\n\\n    assert.ok(result.response);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    const spanNames = spans.map((span) => span.name);\\n\\n    // TODO: Need to figure out why this doesn't get logged\\n    // assert.ok(spanNames.includes(\\\"get_query_embedding.task\\\"));\\n\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"llamaindex.open_ai.chat\\\"));\\n    assert.ok(spanNames.includes(\\\"response_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n\\n    assert.ok(retrieverQueryEngineSpan);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.input\\\"]);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.output\\\"]);\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.input\\\"\\n        ].toString(),\\n      ).kwargs.query,\\n      \\\"Where was albert einstein born?\\\",\\n    );\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.output\\\"\\n        ].toString(),\\n      ).response,\\n      result.response,\\n    );\\n  }).timeout(60000);\\n\\n  it(\\\"should build proper trace on streaming query engine\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n      stream: true,\\n    });\\n\\n    for await (const res of result) {\\n      assert.ok(res);\\n    }\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    // TODO: Need to figure out why this doesn't get logged\\n    // assert.ok(spanNames.includes(\\\"get_query_embedding.task\\\"));\\n\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n    const synthesizeSpan = spans.find(\\n      (span) => span.name === \\\"response_synthesizer.synthesize\\\",\\n    );\\n    const openAIChatSpan = spans.find(\\n      (span) => span.name === \\\"llamaindex.open_ai.chat\\\",\\n    );\\n\\n    assert.strictEqual(\\n      synthesizeSpan?.parentSpanId,\\n      retrieverQueryEngineSpan?.spanContext().spanId,\\n    );\\n    assert.strictEqual(\\n      openAIChatSpan?.parentSpanId,\\n      synthesizeSpan?.spanContext().spanId,\\n    );\\n  }).timeout(60000);\\n});\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 30129,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 30129,
            "text": "[\"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\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-04-29T14:20:35.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "x7Hr.sfmuoO2p06aXzfj1B6APq3Lv0Ws930U0hhV908-1714398635-1.0.1.1-nJUeKh1MLtpUEvRCmwlPts8RaxdgalBbR9TqYNv2zU7m0Tmgc.iWjPtCiaM2omO55Oou.6oqvBzUfnb92YtVbw"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "zEL_gWmSSgg4YlLtVRW7SH2ZdRa4Fz7fFLo71yn.fKY-1714398635212-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Apr 2024 13:50:35 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "81"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_087176de946ee64f58a27b23c9bdb691"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=x7Hr.sfmuoO2p06aXzfj1B6APq3Lv0Ws930U0hhV908-1714398635-1.0.1.1-nJUeKh1MLtpUEvRCmwlPts8RaxdgalBbR9TqYNv2zU7m0Tmgc.iWjPtCiaM2omO55Oou.6oqvBzUfnb92YtVbw; path=/; expires=Mon, 29-Apr-24 14:20:35 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=zEL_gWmSSgg4YlLtVRW7SH2ZdRa4Fz7fFLo71yn.fKY-1714398635212-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "87bfc30ba9c84bf7-MXP"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1066,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-04-29T13:50:34.760Z",
        "time": 941,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 941
        }
      },
      {
        "_id": "35e4e3d1b757b5697226d1cf6efde888",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 95,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "95"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.38.3"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.38.3"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 463,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"Where was albert einstein born?\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 10227,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 10227,
            "text": "[\"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\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-04-29T14:20:36.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "mu9ksiuHr4fjxxeIAz1RfWrlIcEk4ufahh.wdCfJI_0-1714398636-1.0.1.1-mmqb1CZcK2ejATCIEem9_tdTdT_QsLXHUUgraA0yomcziuNHJg4mQHCagWzGKIoN.VnE0eEhTGeA.PJH14JDZg"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "XTSb5SD5Qa.Dt5BzHkH.1xIN8vAt9RLR0rEhanz1YxU-1714398636001-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Apr 2024 13:50:36 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "19"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_8d91c4fb6ad8ccf4df9549565cf8a0ad"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=mu9ksiuHr4fjxxeIAz1RfWrlIcEk4ufahh.wdCfJI_0-1714398636-1.0.1.1-mmqb1CZcK2ejATCIEem9_tdTdT_QsLXHUUgraA0yomcziuNHJg4mQHCagWzGKIoN.VnE0eEhTGeA.PJH14JDZg; path=/; expires=Mon, 29-Apr-24 14:20:36 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=XTSb5SD5Qa.Dt5BzHkH.1xIN8vAt9RLR0rEhanz1YxU-1714398636001-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "87bfc311aa894bf7-MXP"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1066,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-04-29T13:50:35.716Z",
        "time": 378,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 378
        }
      },
      {
        "_id": "b46a7ea6d50c48e02d597c41e83be54e",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 1357,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "1357"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.38.3"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.38.3"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 471,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"gpt-3.5-turbo\",\n  \"temperature\": 0.1,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Context information is below.\\n---------------------\\nAlbert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy. /*\\n * Copyright Traceloop\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License. * You may obtain a copy of the License at\\n *\\n *      https://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and\\n * limitations under the License.\\n---------------------\\nGiven the context information and not prior knowledge, answer the query.\\nQuery: Where was albert einstein born?\\nAnswer:\"\n    }\n  ],\n  \"top_p\": 1,\n  \"stream\": false\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/chat/completions"
        },
        "response": {
          "bodySize": 452,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 452,
            "text": "[\"H4sIAAAAAAAAA1SQzU7DMBCE73mKlc9JRRoS2tw4oCJUIS4cAKHISbapqf+wtypR1XdHTtIWLj7M7Lc742MEwETLSmDNllOjrEyWT+vu+/CiCnlYZe/y2eLbo1r3hdRZv2NxIEz9hQ2dqVljlJVIwujRbhxywrA1vUtvs+WiyIrBUKZFGbDOUpLN8oT2rjbJTTrPJ3JrRIOelfARAQAchzdk1C3+sBJu4rOi0HveISsvQwDMGRkUxr0XnrgmFl/NxmhCPcS+lzU6ggehPaHQcOAeauM0CA2vUsWwQqe47mdswk+Xu9J01pk6ZNR7KS/6Rmjht5VD7o0ONzwZO+KnCOBz6Lf/F5lZZ5SliswOdVg4zxfjPnb90qubTuUZGeLyD1Usoikh870nVNVG6A6ddWKsu7FVVi/zouVZUbPoFP0CAAD//wMAYdFlh/gBAAA=\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-04-29T14:20:36.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "qCDGE_ds7U3RsTsPtfd_w8W0cWkSZU0zx2TamsFSshM-1714398636-1.0.1.1-36J1AF7uAyN.Z_ovM47knuoHKSmHGQq0N_i9IbbBPfjC66x4oossB7dOcuBWtBzR4FyJNScFiMwtI9wF2_if_A"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "jT8B8_ntEAkc5czM5T8n7WSeIRRp4UcN_ny8jOwaoz0-1714398636997-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Apr 2024 13:50:36 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "cache-control",
              "value": "no-cache, must-revalidate"
            },
            {
              "name": "openai-model",
              "value": "gpt-3.5-turbo-0125"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "539"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "160000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "159689"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "116ms"
            },
            {
              "name": "x-request-id",
              "value": "req_95c1e7a99f60f12000e1622bd6fb13b3"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=qCDGE_ds7U3RsTsPtfd_w8W0cWkSZU0zx2TamsFSshM-1714398636-1.0.1.1-36J1AF7uAyN.Z_ovM47knuoHKSmHGQq0N_i9IbbBPfjC66x4oossB7dOcuBWtBzR4FyJNScFiMwtI9wF2_if_A; path=/; expires=Mon, 29-Apr-24 14:20:36 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=jT8B8_ntEAkc5czM5T8n7WSeIRRp4UcN_ny8jOwaoz0-1714398636997-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "87bfc3141e334bf7-MXP"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1210,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-04-29T13:50:36.108Z",
        "time": 844,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 844
        }
      }
    ],
    "pages": [],
    "version": "1.2"
  }
}
