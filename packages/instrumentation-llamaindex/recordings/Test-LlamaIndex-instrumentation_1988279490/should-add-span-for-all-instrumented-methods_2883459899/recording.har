{
  "log": {
    "_recordingName": "Test LlamaIndex instrumentation/should add span for all instrumented methods",
    "creator": {
      "comment": "persister:fs",
      "name": "Polly.JS",
      "version": "6.0.6"
    },
    "entries": [
      {
        "_id": "35e4e3d1b757b5697226d1cf6efde888",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 95,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "95"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 463,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"Where was albert einstein born?\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 10196,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 10196,
            "text": "[\"H4sIAAAAAAAAA4xay44uZw3c8xSjsw7I5bvzKqyARCiIy4IskPLyyP8MgS6PNGSRRZ+ev7t9KVeVv19+8/b27R9//MuPf/r52/dv3/760z9//vbdXvvhDz//4dv3b7//zdvb29svr/8/7vzxb3/88Ycffvr7n1+3v/7xp7//8OO/vn3/Jr9e+e9N//ml/U9+JwhIQP27Xy/+Vn4nUqVeg+/+91ZBhczE81aV8UYYXUWJdNTjB5DRISh6VprnRNNlwLTblR4nFt0QT7p7ZmD/e/NeNB0LnedFRCjE6KKERyj9aEeqpz6jkCqZavy6LZpp/CzkWIFu1QiLVg7ulDooYsiUcHrZ1Oq250UJS088A2BAuKHp+ZLtUc8=\",\"V5WyrKigH61pq+c7aah5OcVKOgGPZ8VAxSQ44TbSkxQUcRePaXq+hw2G/j6jh2Oa6d3CSQkJl6FItUXqPD9KTAfezRXgaSb9fCtFyPhwaU9VUVWKuiDt+efmoWrB5dNuMP4qaavk+pFCTpvk860mZ8Y4gIVOB7e3h3UE3QzLkHIqgTERS4pW5WhPPgPrpWLBLyumFlpuHJqINOWW05wJE4qORfsg6CtUq0PTzrelS1LNaJmWCOFDQxl2VEQnhgtJ1N2tOGtjog5qD2kkg+RMyyn5mSjr4exmeKo9swufkRMXEahPR/rzZnFkUs7QOh6UXEx6dvLXam0I5pToOAgN1dUmOTFmnik4yO1b+1R0HRXKWGgdOz6oPEtwWyzC088AU4SFMB4IoLXBfX5DR6CcAi4T6pwbSzV0c3naGEVWI0STK9YWpI2/YNLa6fFSERocbOROL/sqh+8DHO24s1bde05YxKbodyEj1QQRmksWjD4LJTkNyrcp1EYYTtSEsl0iRsAPN5vkhkF1p4lxXT67+PWZC7HFEI/snAtQVdFaJygjJaU8ewIp3JwiCqntUf6IDPD07Nf0e/6qR0zK6SKMhfSp9x2z7ZSXcgGjU2lnDkW7O5dT8JyTbQv6UdMJonCagy6aPIasGX793HTBOCRVQ8+RHkCjv0Ls9xft1NIDz6M5jM6yk0RoTIp5mTZ3prRJaDJuI3JwkFC0MtTOW0xONREL3VkZfkZXl0fm6cPQwGExI+bO9ameFhxe1RqljENcxw/Dt6rUPgxfS+q8bWnF1DNr4ZtMockTgmhQH5y4vPedj+/PchAaZmIcRUThJHg7YZqn34ua8K0dYhtfQqNa3sqhkY60Cz4hFkWjY9RXDfAI7+hyTmPq5v1AR0/bgFoiUV56YuaKdGWSmqVhwTM0FMbMQEe6gkfFMs88gqYgLc2jMkWrriaLsRkmDDY5yeS5J1arMaWfAj8r3qctta+5BrqvpJph+SPTXUrkAiOlxc3U0/HA2nel6FHK4ya9Fxcp2rDaIUJVKy1JhOeDQtAQ9+iJdlZ/hmQapCHZPVwDC8tBfdevGaonrzHgejOIjyQxLpSVkE5scSszzt9qz+eT0rvEGNUjs+OMujUbpHjUlSUw1DAfopyFJjzsMKtU6zh1Vd1tzhwuocOafFaRGpe1AyJUVSpaODNQwiwGTHi0dURxeIy6HQtCpRFOTZA5VRPO4C2IaCYhsf4MBTEWCulOwc66ERa7ipQzF31CxSgJhoEnlTsWY0kitSBoSn2OCwt4pna8hq4xgrYdSJHsC0l1BsgXWgpaGfSh6gs51GsOs+cfu3fjuhcDFHig687SYzW1lEZ+YZS8jIJpHHkbSMsG41coy5oPUObSibS2CXY/VjT7fdao0cRCrSlC7y9pHTdPNkMk5YOwiz0Y7HumFO6tB5g00g40hHl4Me2XGlkbxq7sw9MderWhairYCIrBsA+G2AizntBYv0XjDKjuoXsRDpjwLMv0PHqkDUg/VGeJRieD8XQ1cTDxil6dxxZEVTonE8tPyfLBQBm3UaXrGrHIXOnEnqWtmiACt96eVh0SyhF4ZWBlg3BcE5BhryVtK+/Q86iSw64/9w8w1aVyEKYC1fml8fZezwnzOc3jZUJ9Ym7jlz+Vr41zPG2vThB2ArW31vlkWwJ2TDYJaQHNnwh16WSgrxG2d+DL4Irh30ZRxPLFKta7orR1IIrLdr/BhbXDFtND2r1QOaOSDReIu4LN2i18VedVhGlE5dFa4ildegeOLXWPgzea5npyHA1nH3RNjgxtdgk+BTgv7IwmP8DH9LpqYTV5bAr1sQ==\",\"u41g6vcObbEJbXauS5UHFwCX47R8ZqdfPvwRXokOP6oELd1nTTDl0aetgOCOh+S+8eWPg7b4Qna+iswqHjztVSEp6wwdPtaow0jSl/jE6RMVO/Z9oEHGnKkuGNJ0wLjrNaDi0qRx92L3R2uaSSYSs8LuVGwMTrV4HiGvS2fprx3toWe8OnLXNMfMmLQ8bmV2txxKEL67xfq/sPlTz3lHCfxoeTW3GGG21asi+XdDRkyPbMcuFHhNgUYk+2A7+jJ4GoXGktXjmaLA/CWgquCVhLVkzxxtu99mxxSSSRJ36FwtRbizrnWfPcXCZ5C4WqRtt7NF25Wnn4HzWiPxyrRr03YYn43JHItPLEbjSA6JEOa4UtUdxboL5gpw1qtneHaLScFxTCip1R1x5uyg4yHH3r9aXeLMEs121aO/N/PDbSHhqofz7OIsHhziY+PeeeDiM60hrWIqZym8W109ZumOHTbI/DX18rJRqZnTQbML47OujN1OeLHDZVjL4mt0k5xSYd8sI8qPDBPf3T6ujDfer4SLdrM42gW81Kkbbwqs5guwr2OvU0rRLsTRmhUGkDGkoYrhpdf6V8MQqJ5lzlcR5Sa8MHBzLWobzOwrEPp0+pTeVMesmc/PGq+7r466xF3h6c0nI3pM3XiRYLarMJ64E2N69GIqTLjgV+Kon/lqL9uSSWi9APt8b618YJt2WWyV8lb29bBT2eYqJGoKaR44NEnachfZ53pquCaX4lYnb49iZ63K8Z52K3p3DJ/LbKSs/cdzco/U1GHf5xjPK6GvxQ5Tg9bpPm4tJrPYF53SlQUUd0m3zmCpkG4HyyFeLpXsl75DBUN2a/Q5GiO2WHFiic70ONZE5cxVjqmuwscP9sSIC4fMy3D2XuMYPVaFL5k+AvGos/f3WrHMS7aUaTQThl1bZvFBkD3jdJZeO8OLeT52w/tsbetdHZyjX9VzFi075ydO0Xin9X3U61jEcWM/o2cI9XAG3U/PYOyWZY7JXLkclc2Sc27rA57gWcdt8O41dLnsxq39sJBx6Zb+Ylf6cSbNcq7N6e5rgrMQdfU6RxMqquUcCgurzi/3wu/EJntoyCKwXswQyXwBBb8VfA+jnBUOSo4yLF2SaGyxRWjdMzYnY9rvXIcN2OhzYuAuyz8KqWTq0Et79cJZQtsU8yozYNjqMJXSLp7qVmPgszC2cHLWAq9DCKdFPz0YJr5yh+1mwI6nKuktnEEfPd2xVBznrBqdIfnwEUJ58qLcpnieY8p79FDr3S05E7UJH5zm2hNKZVxC4jMso/E6LoG71s8+rG6n6DkLZb1HS6mwzPxi9NL6YoNH09uHB7nWu2I4Bym06ppdLeudPnu7o5dBEfTuNx3sxTo0QYWp3jAeBya2y03/wo99fyvb0xz8tUh1Y8CQdj9yY+Bz6rde+717KCHEud9fmvbMuJhSnO3gDqryTw4zuetR259tAlfcofmQVmvhgIN0VpxDapPew2uJKJf51Vv4NwAAAP//\",\"jJtLbuRADEOvpL+q7n+xAd0NzIQ0kNn2IojtKokin/4qvxf/HSqopDagwvsVrOKY9Dm3zPyB8r4GEJ/+3T8t4++bBQy9EvA8kQtfubPZPIbB0zRqENAuq9BNArPjD5MeyIIuYx2nKfKM3UFb54Q844SMsXu9eWApVBaxS6LQ0GWOyuQOHblxM+MXvPuLzG5n90gz8h4wCXRl+84P0v4LRNi5yUPIwTEmuTawZCVLts0ol2QFcutw686eNf6/4Gkca8YKNU/+FL4+y9xTll9JnlH7xyRYsbHtl7fAmuLLaWU5NTqPE0i1uUp2H0vK3/Fyo/nPxmN6a51223uEhU2rkGYhT/xdj0hJUDqOj7T/6Iu7wwbAHHAQdEg54PqULpjTikMFOpDQOU/eIxh+jrE/FnHbXa1oeobPI0CJ8SMkhtnLv8ZTEV1iPjtXFTYQ01iOamJ9k6VsZdyrXQQVJC+Pay/eeXxoueVz35VcKqryDlMnkw4pxudoZpwvNIrfFQfV+tQEu8vvjOfjL7I48LK7IcOA4LefYj3rLvnRTmmIDSCgtsnVAOESrrJr5hSlGo7E10PD6Wf5gU3nEyKbYi1wnhUUalChZPK9CS9faHTSKFhS4aTH2i1NdNNOdtGnia24xsA+KDE2Hm1yxiSqeh9IIPODma6p2ysxCZTjoTIXlluaYGN60DwkZo3Vxdi4mMRfXJ3tWOzU6FYMrAkZNN5NN++zJ3hSOc+7kXB03a6UrnswAskqQ7hxItOPEbdKJcVl81ojnQ+UVblcksN2r5ZJq12E86JS4ublwQiiusxkowMI8lHsrh8ug+eNh/BRLPftkjYSFOFfwwb0ET0zY3NfnTIjPHjZzwWrL3Y3MCn4qx14yfub3faFTENw+jp+gxdCkP1SZ6qCQZpM8sU+9iIp3Z5lazv6MHQZoMDXZRuiIjql/ENIcO29C9+HT9yH5CheHZlo8dDBS8ThKWxugaJmkCMRD4mzvmkcvPfJkHEvrLSpetTJcsbzBu9Qd50aiGbpOmZW8kvIuDUC2mTG3eEblmmzjIHBVy2TgiTK78MJQy+LWjeCB78qIo8H5wi9YFT2f7j98AARJ54pHKHiZtMJRdX9HyhY3TGdGqvBouRvJPu3gL5QK+/JPtjGKLa6Cmpb3s0BcsLrAHBXFUMfMNyiDsZxblxopfXi0QsO4g53kQctD9fn/XnCPl4FLolwyJ0n+Us+P3npilrfbCVJEwmAbBJfpMlc5/Jgn2xUxiMj/lcP/AEAAP//\",\"jJ3dilxHEoTv/RRi7geqMquyMv0uZtEiYZa1LLPWwsLid1+izhFsR9So58ogxvPT3acqMzLiy+tFZ0/HNcnN4kv6bFD2yGoSMXZEJWS6gkTDYJl7GTmgLmFhezlZrujRxc2rdtLrMu4Y+zwrU+6L28fq/bnls8fwXvyQ7auGClXztfUlrujGFNHQtvlPnlCbmtbshlkuVWmj9SZWLQgjqH/9qUXuBxPW8xQEYlqIBWIWgimHgGxE16cf0ZKKJ/rQdXxMz+RKaXiaqXyeSGtJiQMhhWXp7cjhtEjL5dVEgQ44qWiqb2jwgq32zfvQaN0cOyNEB1gtD5bTzq4CSFEpd47NPp2zGeK/uDq8lLOrhcFwz51NpMkze8YdbJdPri6K6C5gRJhHFlBdJAdfhuGC5sgMXhgxcOKGb17vGlj1rCZBSEiMxWLavNoTvnPdejUbTzqpq95fFZYuUW9EBoNdGDF54NKr+liLXwBY/rkitvvKZW+IWaT8AvDnp1gMp+OXkK+13tc0qX1sLJeTSqyXr0dd5b71t77FsREI2ayQdYeXWFSQ04xKEQW3GSmdixwUnCv5D/aB1kBLn4Tew25XLnKuRjfXkF8AEc8hc9YshBbZ/rUwDlJ8hE8Im9ohZCjr5BC+UaLDdQu2ePQp3UmZajG6ZBzWSsq1uVVMOWnn7mrFyGI5kDlhVgUm+RrTwK3JB6hhhJwhIQGEc9eTseA+1Qp5Nb6z3eaJ9jFTctg9aphJwY22frh0KRYzXaAS5nCVS+nkvURu7QG3pBiCvEPdcBbfdoSWJ/GWvnjS4EhicTZ5eI+uvuvVoJSKYWbXq3LBD1jUUsQYhI80TaRRghZ4pP2pBfTywe7DleOc0djx1yu7LQm9+eMA5jpDJ2LfbDCIgZi9TAbTTGZAaLp6yDQbHoc++PO580IU0+r49dk0N8eqISHFhiyfiY4jF/fNAGlKN5Fh0V1XWsgnDtJfzRZPapzrYzidP1txOfz45y+XogFWUlssdCKTnI2aBcUv3AfHGrMFH9VuGg4nv9L3EqdSdLfIbiGGvdHGchnyeIueQ+KfPQfSYCTF4PQVBVpyivcF4H0sMbrNa3LMBdGeOyvbAzkGSQfMjuJcLCwtR0nnGPAFGL28yP4LG+qQy3u9PuMgVHDyffiqrj4zVv+uF6J7mXwpx99ej/6mtyNWaL/Q5EiCDt5vlsWmN+CcpPYImfXAxyvy4zE4bpimdtK0kBBdIuFC8+YgcI+x3CUG2dH6CWEMb3qoPdui5+zMepuID7lYCzb9RYr+cONMifmWLLXVLlQ6dKaw9exGMzxisu6YW5NK8ZhhjNlyKHkN0zYpyWxnz+gTB+kLHUrKR6MOPgrETm28ayy1PJok2mClmZL8uAZIwhlZiWAAv7vTAwcZwx1a1aPC/t3+Crssq0wYyPLTgPxM69xQWO1AK2taOEldKgqP8MmjPPTm3rgXGLOkhuzwPcRjX3tZLwb3iS1rCvXJokcZS0xWVgfiG7v9745o5OD8rmWschYx446nSwt8AbT4z3XPeCfXDDZkidAe5s93Cjr1N5i5+NtqFOHuV8cI8TJW4qHmbwCHJOsDBtejBmXGQIcuudpEVyY3VwaC9nzYjIzBdgjMiq1xyOGy2NW7XBpQmY0eVdujcTafgtSnECkrW1l8XOGidiu1LPfOan9zlFUmhgqQZGrJuQAxgaMiHaA/NT4YCovepDM8PJIClrzzdkAGdG1k52Kb3J391tx0piRXHfWd8zhHjv27FpvLNMMLvlaKAoIBFKp3SZxQ4327/QrZXvabeEjLaKhpOWw/5hrFFCZYTYbU7jnQ3vLgPzsTbgwksSEVybDQiTOwZRKfh9Nt8iGOZzybMo0eJ5U/ABDGnCUfmA4Tk4nllU0a14/q3L4azMEiM/UCdYtLGnwqOq49LvZMwtqwelbXQvhInx0rfKlOPjvQZ3T5u2db1G2fR4qouoEzWU/ctbfAbB5cJqBmhk2B5yLmLmeiAqBuQQbFrYzuDuzYAn+XjB7wfFWqC6pqC+XymQlM9/mtnDMBB5YYBbGa7vmuO9gPwhuqsbiLE//E65uTEPxaS0b0O6gr0+gT7RUZ07BHjeAuakDClZc3gv2sZuXpUwPAzoQAVERujGxZtnry1AmSWJNGSz8fVz1gGr5B2rQUY3x6zCEloO8W4E40jXF0nD8iRlxUVPrU9XpMOt1Xm7sUDnD5RnOOVnpbMhLdwTCWxI6fl1ZIFuj5I9zpa4iM/F9/B5EUQ9KhLI+TaQnZdMnyWO9eAk0+J2GWISHMsb2o5oLNwmnEIov3DBmj2w7pj/eMsBG3nUsJXaebtmXVYBYXAmVwa0rAZlapSW1mTtd3cU4QvcUmXJUH6+8B/nb8yHrvzSUl1LK36oL3BVSyQikBxwB4C8R0Dq11uNDS0s16k+pkwPjFpVcuB3CTn9GanqJZJm4nvglPBhDLS97ke3Aml37mZRxlOMG3gLSekrrAmNaV83L0jLUBwHMn6b3j3KUHtBWSnxK+Zprl1c8CAi+sQERyGHiyvbglpicAQZsG0mvN2XSUljy8OCv0LVII0+dQLQ6dVu1wIVTxIX0mrgJVWI/e1PsC3TYihquoh9569cXpoTMXqNtCcET07bnSmyjJp6coPbMLBj5zTo71dxC9Zah75CDCLjtDQRWJbkv96zHXEJADXIKSTYPCHpNjeIKCez2i5K/7J2uKAPpG0wiT2eTOV7OMVzEGpAUbspkRfBUcrbgiPkbBUeeuJW1Bmxs8JcI3tF36DkeW/YX3k/4W4lZj77RZocoUTbLc2VXjmKhMF3fBbCqbgarelama05tEbbB7QtE1KwAQFF/PBo1yjTsOHNtzv9rgXO78iJzcKA48XVDT7YXTRyBfa6QpJzRHDIl2uQ0h8sDCOXSaOixlAG+GpQwpM8+1aqymxz9oR4zMgvyprEXciPyy4KquQxCefbd3TEZp/voivh6B6WdQxu3FWzE5jA5jljcxHsP5fIAkFy8L2W+4S4bZYSNYvMUEgxdNEAHLwMPcWbGGgOR97sG6YLRTboWNoFtsAdghwcdQ6NWOb9xJiF8LEBq+x3fGX0G6IN6omUModKpgX+c3UO4cSxrWKzrXVnA5H2wy5xnD2g5wEhg3bJKOOSiRTGsCwu6QTSdn1xlgcY1dMx+CxdfOm1jeREtI2CAEDVPDRX7Cr9+Chl9+ieISpFvZrXhQJnndO/JdIaXwuT5zUDH5tt9RK3qvjybkGVmR4gYaYwpUE5P/JbrkmWAFyx5cEY//upkc2u+eDEUqUl9v7cy2ZBcN7bnY59OakaI6W4DfJ/UhuNWM4z6lat8wlglA5E6EVjSpKh7PhhvyB5gxO1jm7GoKGZhpLnFOTfQ49GfBBagYexxkbJHvBZOUDKxqwNfC06VYxUZMGOB8aYLOPU11Nqz4MR39IbgZAn0bPni8Xij9O69gqQg1HAbkS38yQ77uB2zGkOcNXW7jAgh4KePJBSrQwYIzDobQRT6ykOpmw1Zno10iyKIKHa/UuG7eVd5464D4lI+9zNkkfP3/wC/LJX9texEJF7FAZk2erH6+tkCYIl1Gl1dbJbo7qLxSI/fMEjoScy5fpKcYNjcKoiQHFJMnFucL5g3j71FNPKno24sCPpEUT/oewuCLBQvEqOAi5/skCEK+mNZ4Wdwd5l+Doep4U2KUOh5OVFrhFlylHtCAmRJFAKeOcQioN0epIrdg0RCD0sT+KDn5sBxG6jIQcIeA8Du4bCLgOoZwciIy1PkeMSBLKcC/trqsaDgiM2ExC2dUg1R7d+czV1No58mnsld9ZM/nhKA9jEUDw3UsZptTUkchOwYcPvLelCU6rU0OtgGEKCuFjkhaDLaiGZe8HosLXkDzWmjEi5vS+3l65D/suiSzuiA/dcUdwoKy1ATjoKEB0O07gTcp3tFAe/isIX4H+GEqWF+xbD4ZOYaqdVmT0BS9XLe6XeKYEtL+DyLJR/T0aGs558YgFQ+mo997BhkOiGQP94jYUujOtjl32LfHfNKnXgpXDv6r3lj2cioMtlWjTMC+MBQCE8v5zg0i5A9crBL9FgnjPrgXWPR03rU4CnSZkDiWfsVzt0YPTNT6U2b2fe65M368j8Ugm+2F5LtyYMAlA3o4Mh65AOeP0DEGd3djKxlnaQBwLRnX8tTo6k8SagW3/pZdFkVKbuX688dc4obqZn1O0loga0UTEi922LSSABc8e2KTxx0RusgIv+1UCDTWR9V4IhVffW6VSUj52hzQqThzqyYmSwfdmtNikd7Fe3FaTGLDYXOpp4P0m209dYfLcaOC7Li7ZLBlHpw7vKgNAmyLPgZLEmHgn6znf2ufOSYTLY8b76RvvOZz4dZCFm1MFNO8yOTQTAa2dIptDV1TiZPMhoPrq2Qer2Q64nAMFDln39dIvUwxKWj6qiJ5wLsRYoNB/cn4+H40FnuC9Bi7dTUU4yKIn0gYfg0She+aJQgJ/KCmvciAj0y2AdLawWs1UHeZEyBQxlnpbtDzZQZ0nJipdH/zhncIkIGv27kvvZQ7N35vWOYdwcZgc8aoUSXr/U4AIUG43oXHMN6b0yfMOJKXRE7FWLEFe0c18sKZJ91gpU3xRXVHKpxvM1hLTAb7Mz1iCk58YKUZK45dhqn4EHsxT+e8I1kPpyMx8PXNZSJY3CiLDPeHXdzno7DYT1iOfBPcRQqywLKoQFbr3t/YOv+5ME5D8jR55vxxqdvbCzeOuvdx0qE7OC+5CGagzjTHbiL77u28eM0no6xGiC12VQhH5XxLT3SSwtQ5LCHUZRs3+saGO2ueTlaae/oCx4gMloDX5pdlOdzcgoWd1owt3se72w0rZ7nKQDtNpZYrbq/t/XfO492T4Gi4X+eh48XabD2zxo400nu9dVQ1J7YM2fJw1bBCOupKjQE1UxHVYUPJgDBgDLHkIf7Puj2U3GElwOORGDVpqt5RxbOFYq10KddxHSlNsrJqaeiXyQLXDpHeXEJrC0vbxE2/pRqO8wDgeyCQazC2VY+9jU3MX49R9Xs5/Pb63v/4y/7vXz99+PALvu7ly9dPn397+fnDy7fP//n2+vnL3z9/+vSP3399/fjp42tr9rK/6N9/fvz188vPH/67/+eXP/719csf3/727es/P//+58vPH+536OXb128ff/u/f/4JP+ivn/4HAAD//wMAxnf9VbOCAAA=\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-03-04T12:35:59.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "nQSFqeDoNXuPG0Pf.3wPeTomTlad9XUpJjdh8AoRPTg-1709553959-1.0.1.1-27lXE1skOtMjwTyXt98VSLWjyyexrDIz9GE8fQwT.QNVQP53VdsLEzN0BaY.MU65XlU4wIcvd8KZCqw_xAjWUg"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "2kDAHmFR1ud8diK.7R3AsHvoD_7yJU9sdpLBBepQAuY-1709553959085-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 04 Mar 2024 12:05:59 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "23"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_3f9ebf5d086222f4253835c062894b1f"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=nQSFqeDoNXuPG0Pf.3wPeTomTlad9XUpJjdh8AoRPTg-1709553959-1.0.1.1-27lXE1skOtMjwTyXt98VSLWjyyexrDIz9GE8fQwT.QNVQP53VdsLEzN0BaY.MU65XlU4wIcvd8KZCqw_xAjWUg; path=/; expires=Mon, 04-Mar-24 12:35:59 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=2kDAHmFR1ud8diK.7R3AsHvoD_7yJU9sdpLBBepQAuY-1709553959085-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "85f1bcd2d9fe4c3d-MXP"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1066,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-03-04T12:05:58.799Z",
        "time": 404,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 404
        }
      },
      {
        "_id": "b46a7ea6d50c48e02d597c41e83be54e",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 1357,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "1357"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 471,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"gpt-3.5-turbo\",\n  \"temperature\": 0.1,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Context information is below.\\n---------------------\\nAlbert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy. /*\\n * Copyright Traceloop\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License. * You may obtain a copy of the License at\\n *\\n *      https://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and\\n * limitations under the License.\\n---------------------\\nGiven the context information and not prior knowledge, answer the query.\\nQuery: Where was albert einstein born?\\nAnswer:\"\n    }\n  ],\n  \"top_p\": 1,\n  \"stream\": false\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/chat/completions"
        },
        "response": {
          "bodySize": 452,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 452,
            "text": "[\"H4sIAAAAAAAAA1SQO0/DQBCEe/+K1dV2ZCdy7LijiEhBCoQQBULW+bKxD+6lu43IQ/nvyA8SaK6Y2W935i4RAJM7VgETHSehnUrKc7albPskN+X6rVm/FNlZPKeyO+p2uWFxT9jmEwX9UjNhtVNI0prRFh45Yb81K9JVni9W+WowtN2h6rHWUbKY5QkdfGOTNJvnE9lZKTCwCt4jAIDL8PYZzQ6PrII0/lU0hsBbZNVtCIB5q3qF8RBkIG6IxXdTWENohtgPqkFPsJYmEEoD3zxAY70BaeBV6Rge0WtuTjM24dfbXWVb523TZzQHpW76XhoZutojD9b0NwJZN+LXCOBj6Hf4F5k5b7WjmuwXmn7hPC/Hfez+pXc3m8ozssTVH2pZRlNCFk6BUNd7aVr0zsux7t7V86YoSrFsFjmLrtEPAAAA//8DAPDujBP4AQAA\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-03-04T12:35:59.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "_GiytcR_rpao8AXfO6c3hkEFY2bks6XC9c0NllXAAJs-1709553959-1.0.1.1-BCIjjQWenZa3Thd2ypba.BawaPSWgXNqmeh9skhkZvPbTlofAHIHoBIQnCHRQ1LT4Q9dtMHI1qQtNT5fkGoikA"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "eBEwteTQeWdibP2mRG9kH2oNIjLhQDjDqbbuONKa3lw-1709553959939-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 04 Mar 2024 12:05:59 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "cache-control",
              "value": "no-cache, must-revalidate"
            },
            {
              "name": "openai-model",
              "value": "gpt-3.5-turbo-0125"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "454"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "160000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "159689"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "116ms"
            },
            {
              "name": "x-request-id",
              "value": "req_ec48913955b4c237af97b7a8e41a3881"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=_GiytcR_rpao8AXfO6c3hkEFY2bks6XC9c0NllXAAJs-1709553959-1.0.1.1-BCIjjQWenZa3Thd2ypba.BawaPSWgXNqmeh9skhkZvPbTlofAHIHoBIQnCHRQ1LT4Q9dtMHI1qQtNT5fkGoikA; path=/; expires=Mon, 04-Mar-24 12:35:59 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=eBEwteTQeWdibP2mRG9kH2oNIjLhQDjDqbbuONKa3lw-1709553959939-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "85f1bcd57eae4c3d-MXP"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1210,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-03-04T12:05:59.218Z",
        "time": 693,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 693
        }
      },
      {
        "_id": "e9c888ada9d8e42f86c48598496be73f",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 7177,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "7177"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 465,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"Albert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy.\",\n    \"/*\\n * Copyright Traceloop\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License. * You may obtain a copy of the License at\\n *\\n *      https://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and\\n * limitations under the License.\",\n    \"* See the License for the specific language governing permissions and\\n * limitations under the License. */\\n\\nimport { context } from \\\"@opentelemetry/api\\\";\\nimport { AsyncHooksContextManager } from \\\"@opentelemetry/context-async-hooks\\\";\\nimport { LlamaIndexInstrumentation } from \\\"../src/instrumentation\\\";\\nimport * as assert from \\\"assert\\\";\\nimport {\\n  BasicTracerProvider,\\n  InMemorySpanExporter,\\n  SimpleSpanProcessor,\\n} from \\\"@opentelemetry/sdk-trace-base\\\";\\nimport type * as llamaindexImport from \\\"llamaindex\\\";\\n\\nimport { Polly, setupMocha as setupPolly } from \\\"@pollyjs/core\\\";\\nimport NodeHttpAdapter from \\\"@pollyjs/adapter-node-http\\\";\\nimport FSPersister from \\\"@pollyjs/persister-fs\\\";\\n\\nconst memoryExporter = new InMemorySpanExporter();\\n\\nPolly.register(NodeHttpAdapter);\\nPolly.register(FSPersister);\\n\\ndescribe(\\\"Test LlamaIndex instrumentation\\\", async function () {\\n  const provider = new BasicTracerProvider();\\n  let instrumentation: LlamaIndexInstrumentation;\\n  let contextManager: AsyncHooksContextManager;\\n  let llamaindex: typeof llamaindexImport;\\n\\n  setupPolly({\\n    adapters: [\\\"node-http\\\"],\\n    persister: \\\"fs\\\",\\n    recordIfMissing: process.env.RECORD_MODE === \\\"NEW\\\",\\n    matchRequestsBy: {\\n      headers: false,\\n    },\\n  });\\n\\n  before(() => {\\n    if (process.env.RECORD_MODE !== \\\"NEW\\\") {\\n      process.env.OPENAI_API_KEY = \\\"test\\\";\\n    }\\n\\n    provider.addSpanProcessor(new SimpleSpanProcessor(memoryExporter));\\n    instrumentation = new LlamaIndexInstrumentation();\\n    instrumentation.setTracerProvider(provider);\\n    llamaindex = require(\\\"llamaindex\\\");\\n  });\\n\\n  beforeEach(function () {\\n    contextManager = new AsyncHooksContextManager().enable();\\n    context.setGlobalContextManager(contextManager);\\n\\n    const { server } = this.polly as Polly;\\n    server.any().on(\\\"beforePersist\\\", (_req, recording) => {\\n      recording.request.headers = recording.request.headers.filter(\\n        ({ name }: { name: string }) => name !== \\\"authorization\\\",\\n      );\\n    });\\n  });\\n\\n  afterEach(() => {\\n    memoryExporter.reset();\\n    context.disable();\\n  });\\n\\n  it(\\\"should set attributes in span for LLM instrumentation\\\", async () => {\\n    const model = \\\"gpt-3.5-turbo\\\";\\n    const prompt = \\\"Tell me a joke about OpenTelemetry\\\";\\n    const openai = new llamaindex.OpenAI({ model, temperature: 0 });\\n    const res = await openai.chat({\\n      messages: [{ role: \\\"user\\\", content: prompt }],\\n    });\\n\\n    assert.ok(res);\\n    assert.ok(res.message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    assert.strictEqual(spans.length, 1);\\n    const chatAttributes = spans[0].attributes;\\n\\n    assert.strictEqual(chatAttributes[\\\"llm.vendor\\\"], \\\"OpenAI\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.model\\\"], model);\\n    assert.strictEqual(chatAttributes[\\\"llm.top_p\\\"], 1);\\n    assert.strictEqual(chatAttributes[\\\"llm.prompts.0.content\\\"], prompt);\\n    assert.strictEqual(chatAttributes[\\\"llm.prompts.0.role\\\"], \\\"user\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.completions.0.role\\\"], \\\"assistant\\\");\\n    assert.strictEqual(\\n      chatAttributes[\\\"llm.completions.0.content\\\"],\\n      res.message.content,\\n    );\\n  });\\n\\n  it(\\\"should set attributes in span for LLM instrumentation in case of streaming response\\\", async () => {\\n    const model = \\\"gpt-3.5-turbo\\\";\\n    const prompt = \\\"Tell me a joke about OpenTelemetry\\\";\\n    const openai = new llamaindex.OpenAI({ model, temperature: 0 });\\n    const res = await openai.chat({\\n      messages: [{ role: \\\"user\\\", content: prompt }],\\n      stream: true,\\n    });\\n\\n    assert.ok(res);\\n    let message = \\\"\\\";\\n    for await (const messageChunk of res) {\\n      if (messageChunk.delta) {\\n        message += messageChunk.delta;\\n      }\\n    }\\n    assert.ok(message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    assert.strictEqual(spans.length, 1);\\n    const chatAttributes = spans[0].attributes;\\n\\n    assert.strictEqual(chatAttributes[\\\"llm.vendor\\\"], \\\"OpenAI\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.model\\\"], model);\\n    assert.strictEqual(chatAttributes[\\\"llm.top_p\\\"], 1);\\n    assert.strictEqual(chatAttributes[\\\"llm.prompts.0.content\\\"], prompt);\\n    assert.strictEqual(chatAttributes[\\\"llm.prompts.0.role\\\"], \\\"user\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.completions.0.content\\\"], message);\\n  });\\n\\n  it(\\\"should add span for all instrumented methods\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n    });\\n\\n    assert.ok(result.response);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    const spanNames = spans.map((span) => span.name);\\n\\n    // TODO: Need to figure out why this doesn't get logged\\n    // assert.ok(spanNames.includes(\\\"get_query_embedding.task\\\"));\\n\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.query\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"llamaindex.open_ai.chat\\\"));\\n    assert.ok(spanNames.includes(\\\"response_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n  }).timeout(60000);\\n});\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 30188,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 30188,
            "text": "[\"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\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-03-04T19:45:52.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "4VVJ1U641OjDwBh7ZuJq0taMog0gJO3urXIEMSA6h34-1709579752-1.0.1.1-BhL3s3dotVbbnUBdGVZBpc8EYACfPH1fsu4eA5US4fBWP4XpfMsX.09wrY3ddLR.J74RbhbwDDxCEFE2zrmTsg"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "Hxl8YYOLVWF8fJ6X9Qi.M2A5YFZaUJWRm9J9cui2Kz0-1709579752392-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 04 Mar 2024 19:15:52 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "54"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_64f23968b2f5bb994618abbf6753ee69"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=4VVJ1U641OjDwBh7ZuJq0taMog0gJO3urXIEMSA6h34-1709579752-1.0.1.1-BhL3s3dotVbbnUBdGVZBpc8EYACfPH1fsu4eA5US4fBWP4XpfMsX.09wrY3ddLR.J74RbhbwDDxCEFE2zrmTsg; path=/; expires=Mon, 04-Mar-24 19:45:52 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=Hxl8YYOLVWF8fJ6X9Qi.M2A5YFZaUJWRm9J9cui2Kz0-1709579752392-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "85f4328a9d5ebab8-MXP"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1066,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-03-04T19:15:51.990Z",
        "time": 717,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 717
        }
      }
    ],
    "pages": [],
    "version": "1.2"
  }
}
