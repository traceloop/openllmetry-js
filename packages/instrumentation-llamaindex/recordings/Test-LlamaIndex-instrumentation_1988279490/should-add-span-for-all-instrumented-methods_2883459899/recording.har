{
  "log": {
    "_recordingName": "Test LlamaIndex instrumentation/should add span for all instrumented methods",
    "creator": {
      "comment": "persister:fs",
      "name": "Polly.JS",
      "version": "6.0.6"
    },
    "entries": [
      {
        "_id": "35e4e3d1b757b5697226d1cf6efde888",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 95,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "95"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.38.3"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.38.3"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 463,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"Where was albert einstein born?\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 10227,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 10227,
            "text": "[\"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\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-04-29T14:20:36.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "mu9ksiuHr4fjxxeIAz1RfWrlIcEk4ufahh.wdCfJI_0-1714398636-1.0.1.1-mmqb1CZcK2ejATCIEem9_tdTdT_QsLXHUUgraA0yomcziuNHJg4mQHCagWzGKIoN.VnE0eEhTGeA.PJH14JDZg"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "XTSb5SD5Qa.Dt5BzHkH.1xIN8vAt9RLR0rEhanz1YxU-1714398636001-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Apr 2024 13:50:36 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "19"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_8d91c4fb6ad8ccf4df9549565cf8a0ad"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=mu9ksiuHr4fjxxeIAz1RfWrlIcEk4ufahh.wdCfJI_0-1714398636-1.0.1.1-mmqb1CZcK2ejATCIEem9_tdTdT_QsLXHUUgraA0yomcziuNHJg4mQHCagWzGKIoN.VnE0eEhTGeA.PJH14JDZg; path=/; expires=Mon, 29-Apr-24 14:20:36 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=XTSb5SD5Qa.Dt5BzHkH.1xIN8vAt9RLR0rEhanz1YxU-1714398636001-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "87bfc311aa894bf7-MXP"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1066,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-04-29T13:50:35.716Z",
        "time": 378,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 378
        }
      },
      {
        "_id": "6533ac867328b34227a3f7fad6b3fd52",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 8699,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "8699"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v20.9.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-retry-count",
              "value": "0"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 492,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"file_name: essay.txt\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/essay.txt\\n\\nAlbert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy.\",\n    \"file_name: instrumentation.test.ts\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/instrumentation.test.ts\\n\\n/*\\n * Copyright Traceloop\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.* You may obtain a copy of the License at\\n *\\n *      https://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and\\n * limitations under the License.*/\\n\\nimport { context } from \\\"@opentelemetry/api\\\";\\nimport { AsyncHooksContextManager } from \\\"@opentelemetry/context-async-hooks\\\";\\nimport { LlamaIndexInstrumentation } from \\\"../src/instrumentation\\\";\\nimport * as assert from \\\"assert\\\";\\nimport {\\n  BasicTracerProvider,\\n  InMemorySpanExporter,\\n  SimpleSpanProcessor,\\n} from \\\"@opentelemetry/sdk-trace-base\\\";\\nimport type * as llamaindexImport from \\\"llamaindex\\\";\\n\\nimport { Polly, setupMocha as setupPolly } from \\\"@pollyjs/core\\\";\\nimport NodeHttpAdapter from \\\"@pollyjs/adapter-node-http\\\";\\nimport FSPersister from \\\"@pollyjs/persister-fs\\\";\\n\\nconst memoryExporter = new InMemorySpanExporter();\\n\\nPolly.register(NodeHttpAdapter);\\nPolly.register(FSPersister);\\n\\ndescribe(\\\"Test LlamaIndex instrumentation\\\", async function () {\\n  const provider = new BasicTracerProvider();\\n  let instrumentation: LlamaIndexInstrumentation;\\n  let contextManager: AsyncHooksContextManager;\\n  let llamaindex: typeof llamaindexImport;\\n\\n  setupPolly({\\n    adapters: [\\\"node-http\\\"],\\n    persister: \\\"fs\\\",\\n    recordIfMissing: true,\\n    matchRequestsBy: {\\n      headers: false,\\n    },\\n  });\\n\\n  before(() => {\\n    if (process.env.RECORD_MODE !== \\\"NEW\\\") {\\n      process.env.OPENAI_API_KEY = \\\"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\\\";\\n    }\\n\\n    provider.addSpanProcessor(new SimpleSpanProcessor(memoryExporter));\\n    instrumentation = new LlamaIndexInstrumentation();\\n    instrumentation.setTracerProvider(provider);\\n    llamaindex = require(\\\"llamaindex\\\");\\n  });\\n\\n  beforeEach(function () {\\n    contextManager = new AsyncHooksContextManager().enable();\\n    context.setGlobalContextManager(contextManager);\\n\\n    const { server } = this.polly as Polly;\\n    server.any().on(\\\"beforePersist\\\", (_req, recording) => {\\n      recording.request.headers = recording.request.headers.filter(\\n        ({ name }: { name: string }) => name !== \\\"authorization\\\",\\n      );\\n    });\\n  });\\n\\n  afterEach(() => {\\n    memoryExporter.reset();\\n    context.disable();\\n  });\\n\\n  it(\\\"should add span for all instrumented methods\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n    });\\n\\n    assert.ok(result.message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n    const spanNames = spans.map((span) => span.name);\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n\\n    assert.ok(spanNames.includes(\\\"open_ai_embedding.get_query_embedding\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"base_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.query\\\"));\\n\\n    assert.ok(retrieverQueryEngineSpan);\\n    assert.ok(retrieverQueryEngineSpan.\",\n    \"file_name: instrumentation.test.ts\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/instrumentation.test.ts\\n\\nquery({\\n      query: \\\"Where was albert einstein born?\\\",\\n    });\\n\\n    assert.ok(result.message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n    const spanNames = spans.map((span) => span.name);\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n\\n    assert.ok(spanNames.includes(\\\"open_ai_embedding.get_query_embedding\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"base_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.query\\\"));\\n\\n    assert.ok(retrieverQueryEngineSpan);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.input\\\"]);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.output\\\"]);\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.input\\\"\\n        ].toString(),\\n      ).kwargs.query,\\n      \\\"Where was albert einstein born?\\\",\\n    );\\n    assert.deepStrictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.output\\\"\\n        ].toString(),\\n      ).message,\\n      result.message,\\n    );\\n  }).timeout(60000);\\n\\n  it(\\\"should build proper trace on streaming query engine\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n      stream: true,\\n    });\\n\\n    for await (const res of result) {\\n      assert.ok(res);\\n    }\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    const retrieverQueryEngineQuerySpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n    const synthesizeSpan = spans.find(\\n      (span) => span.name === \\\"base_synthesizer.synthesize\\\",\\n    );\\n    const retrieverQueryEngineRetrieveSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.retrieve\\\",\\n    );\\n    const openAIEmbeddingSpan = spans.find(\\n      (span) => span.name === \\\"open_ai_embedding.get_query_embedding\\\",\\n    );\\n    const vectorIndexRetrieverSpan = spans.find(\\n      (span) => span.name === \\\"vector_index_retriever.retrieve\\\",\\n    );\\n\\n    assert.strictEqual(\\n      synthesizeSpan?.parentSpanId,\\n      retrieverQueryEngineQuerySpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      retrieverQueryEngineRetrieveSpan?.parentSpanId,\\n      retrieverQueryEngineQuerySpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      vectorIndexRetrieverSpan?.parentSpanId,\\n      retrieverQueryEngineRetrieveSpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      openAIEmbeddingSpan?.parentSpanId,\\n      vectorIndexRetrieverSpan?.spanContext().spanId,\\n    );\\n  }).timeout(60000);\\n});\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 29998,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 29998,
            "text": "[\"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\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-12-15T17:33:32.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": ".PWiBeDxpwkKXZecevEpKaSDCEWxguyLA6zimb5O1OM-1734282212-1.0.1.1-2BuI0ICvnHb1xbDAn3rmf.V8LnNe9KjGFP6KrK61tnHTgnaJO26RtoV4kv_l8HqyrfHawAQQ5zOXMHRkeHPnMQ"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "0fyHPM_4X5PkSVcSuyehzOhSYyqj9eFzjtMkqdqwJJc-1734282212957-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Sun, 15 Dec 2024 17:03:32 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "access-control-expose-headers",
              "value": "X-Request-ID"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "195"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_2ad00cbd5bab257071701f32dbe96fdd"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=.PWiBeDxpwkKXZecevEpKaSDCEWxguyLA6zimb5O1OM-1734282212-1.0.1.1-2BuI0ICvnHb1xbDAn3rmf.V8LnNe9KjGFP6KrK61tnHTgnaJO26RtoV4kv_l8HqyrfHawAQQ5zOXMHRkeHPnMQ; path=/; expires=Sun, 15-Dec-24 17:33:32 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=0fyHPM_4X5PkSVcSuyehzOhSYyqj9eFzjtMkqdqwJJc-1734282212957-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "8f2801f4faa45083-ATL"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1154,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-12-15T17:03:31.845Z",
        "time": 1192,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 1192
        }
      },
      {
        "_id": "c3e52c5fd6bb7ec128fce2a7dfc1f82e",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 4610,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "4610"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v20.9.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-retry-count",
              "value": "0"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 498,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"gpt-4o\",\n  \"temperature\": 0.1,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Context information is below.\\n---------------------\\nfile_name: essay.txt\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/essay.txt\\n\\nAlbert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy.\\n\\nfile_name: instrumentation.test.ts\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/instrumentation.test.ts\\n\\nquery({\\n      query: \\\"Where was albert einstein born?\\\",\\n    });\\n\\n    assert.ok(result.message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n    const spanNames = spans.map((span) => span.name);\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n\\n    assert.ok(spanNames.includes(\\\"open_ai_embedding.get_query_embedding\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"base_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.query\\\"));\\n\\n    assert.ok(retrieverQueryEngineSpan);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.input\\\"]);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.output\\\"]);\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.input\\\"\\n        ].toString(),\\n      ).kwargs.query,\\n      \\\"Where was albert einstein born?\\\",\\n    );\\n    assert.deepStrictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.output\\\"\\n        ].toString(),\\n      ).message,\\n      result.message,\\n    );\\n  }).timeout(60000);\\n\\n  it(\\\"should build proper trace on streaming query engine\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n      stream: true,\\n    });\\n\\n    for await (const res of result) {\\n      assert.ok(res);\\n    }\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    const retrieverQueryEngineQuerySpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n    const synthesizeSpan = spans.find(\\n      (span) => span.name === \\\"base_synthesizer.synthesize\\\",\\n    );\\n    const retrieverQueryEngineRetrieveSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.retrieve\\\",\\n    );\\n    const openAIEmbeddingSpan = spans.find(\\n      (span) => span.name === \\\"open_ai_embedding.get_query_embedding\\\",\\n    );\\n    const vectorIndexRetrieverSpan = spans.find(\\n      (span) => span.name === \\\"vector_index_retriever.retrieve\\\",\\n    );\\n\\n    assert.strictEqual(\\n      synthesizeSpan?.parentSpanId,\\n      retrieverQueryEngineQuerySpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      retrieverQueryEngineRetrieveSpan?.parentSpanId,\\n      retrieverQueryEngineQuerySpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      vectorIndexRetrieverSpan?.parentSpanId,\\n      retrieverQueryEngineRetrieveSpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      openAIEmbeddingSpan?.parentSpanId,\\n      vectorIndexRetrieverSpan?.spanContext().spanId,\\n    );\\n  }).timeout(60000);\\n});\\n---------------------\\nGiven the context information and not prior knowledge, answer the query.\\nQuery: Where was albert einstein born?\\nAnswer:\"\n    }\n  ],\n  \"top_p\": 1,\n  \"stream\": false\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/chat/completions"
        },
        "response": {
          "bodySize": 551,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 551,
            "text": "[\"H4sIAAAAAAAAA4xSy27bMBC86ysWPFuBLLuJ7ZsPQYL2WAQoUBQCRa0kpiSXIVdojMD/XlB+SEZboBcednaGM4P9yACEbsQOhOolK+tNvkf7uX/e7l+e378Mm/Igw/rpzQ9F/fXt8E0sEoPqV1R8Yd0pst4ga3InWAWUjEl1+bBal5uyXK5GwFKDJtE6z/ma8rIo13mxyYv7M7EnrTCK\",\"HXzPAAA+xjdZdA2+ix0Ui8vEYoyyQ7G7LgGIQCZNhIxRR5aOxWICFTlGN7remxoDw6N2kVE7+CUj1BQcaAcvxi7gCYOV7nA35wdshyiTfTcYc54fr4YMdT5QHc/4dd5qp2NfBZSRXPo8MnkxoscM4McYfLjJInwg67li+okuCW4/PZz0xFT1hC7PrQgmlmbGur+wbvSqBllqE2fVCSVVj81EnXqWQ6NpBmSz1H+6+Zv2Kbl23f/IT4BS6BmbygdstLpNPK0FTJf4r7Vry6NhEQ+R0Vatdh0GH/TpGFpfbVtZy21brDYiO2a/AQAA//8DACsOSvgVAwAA\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-12-15T17:33:33.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "Us.0El4n5gIuLyK3gIihLoy4mx3tWG9PQrtms2LUux8-1734282213-1.0.1.1-DnfBxePjcQANL3KacQrFCmJltSeePgU7s7302HXH.SuFlGrmFZsuOIcl64rvMS6QeKrFkxEC20kG3sGZW1y8EQ"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "yh3yQXvDR6CxT_S7xuhw8CC03PSnuJph1i1y5g5V7m4-1734282213870-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Sun, 15 Dec 2024 17:03:33 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-expose-headers",
              "value": "X-Request-ID"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "392"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "800000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "798909"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "81ms"
            },
            {
              "name": "x-request-id",
              "value": "req_e6358575409b3e4f295f0a3a78178128"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=Us.0El4n5gIuLyK3gIihLoy4mx3tWG9PQrtms2LUux8-1734282213-1.0.1.1-DnfBxePjcQANL3KacQrFCmJltSeePgU7s7302HXH.SuFlGrmFZsuOIcl64rvMS6QeKrFkxEC20kG3sGZW1y8EQ; path=/; expires=Sun, 15-Dec-24 17:33:33 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=yh3yQXvDR6CxT_S7xuhw8CC03PSnuJph1i1y5g5V7m4-1734282213870-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "8f2801f9687c5083-ATL"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1188,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-12-15T17:03:33.074Z",
        "time": 690,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 690
        }
      }
    ],
    "pages": [],
    "version": "1.2"
  }
}
