{
  "log": {
    "_recordingName": "Test LlamaIndex instrumentation/should build proper trace on streaming query engine",
    "creator": {
      "comment": "persister:fs",
      "name": "Polly.JS",
      "version": "6.0.6"
    },
    "entries": [
      {
        "_id": "35e4e3d1b757b5697226d1cf6efde888",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 95,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "95"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.38.3"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.38.3"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 463,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"Where was albert einstein born?\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 10217,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 10217,
            "text": "[\"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\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-04-29T14:20:37.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "rWZfVLF42LlFcOBaRbD8isMxUU7IOCVr1SILEumTfFA-1714398637-1.0.1.1-aRGg8q9xvrgIGL9Tty2qvxbHELTwTZnTOLog6mdFKs.SJusVMJUKsMMC4h4dD1AU0qFSLY1UehDIaVrZZFR8VA"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "xqa5SyQlqUs5XDRzcVj2engcIsk5GCi8yj0CbVeA_yQ-1714398637973-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Apr 2024 13:50:37 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "22"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_32c202a995296498ee0f7311b239be36"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=rWZfVLF42LlFcOBaRbD8isMxUU7IOCVr1SILEumTfFA-1714398637-1.0.1.1-aRGg8q9xvrgIGL9Tty2qvxbHELTwTZnTOLog6mdFKs.SJusVMJUKsMMC4h4dD1AU0qFSLY1UehDIaVrZZFR8VA; path=/; expires=Mon, 29-Apr-24 14:20:37 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=xqa5SyQlqUs5XDRzcVj2engcIsk5GCi8yj0CbVeA_yQ-1714398637973-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "87bfc31dbc6a4bf7-MXP"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1066,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-04-29T13:50:37.644Z",
        "time": 426,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 426
        }
      },
      {
        "_id": "6533ac867328b34227a3f7fad6b3fd52",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 8699,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "8699"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v20.9.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-retry-count",
              "value": "0"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 492,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"file_name: essay.txt\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/essay.txt\\n\\nAlbert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy.\",\n    \"file_name: instrumentation.test.ts\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/instrumentation.test.ts\\n\\n/*\\n * Copyright Traceloop\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.* You may obtain a copy of the License at\\n *\\n *      https://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and\\n * limitations under the License.*/\\n\\nimport { context } from \\\"@opentelemetry/api\\\";\\nimport { AsyncHooksContextManager } from \\\"@opentelemetry/context-async-hooks\\\";\\nimport { LlamaIndexInstrumentation } from \\\"../src/instrumentation\\\";\\nimport * as assert from \\\"assert\\\";\\nimport {\\n  BasicTracerProvider,\\n  InMemorySpanExporter,\\n  SimpleSpanProcessor,\\n} from \\\"@opentelemetry/sdk-trace-base\\\";\\nimport type * as llamaindexImport from \\\"llamaindex\\\";\\n\\nimport { Polly, setupMocha as setupPolly } from \\\"@pollyjs/core\\\";\\nimport NodeHttpAdapter from \\\"@pollyjs/adapter-node-http\\\";\\nimport FSPersister from \\\"@pollyjs/persister-fs\\\";\\n\\nconst memoryExporter = new InMemorySpanExporter();\\n\\nPolly.register(NodeHttpAdapter);\\nPolly.register(FSPersister);\\n\\ndescribe(\\\"Test LlamaIndex instrumentation\\\", async function () {\\n  const provider = new BasicTracerProvider();\\n  let instrumentation: LlamaIndexInstrumentation;\\n  let contextManager: AsyncHooksContextManager;\\n  let llamaindex: typeof llamaindexImport;\\n\\n  setupPolly({\\n    adapters: [\\\"node-http\\\"],\\n    persister: \\\"fs\\\",\\n    recordIfMissing: true,\\n    matchRequestsBy: {\\n      headers: false,\\n    },\\n  });\\n\\n  before(() => {\\n    if (process.env.RECORD_MODE !== \\\"NEW\\\") {\\n      process.env.OPENAI_API_KEY = \\\"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\\\";\\n    }\\n\\n    provider.addSpanProcessor(new SimpleSpanProcessor(memoryExporter));\\n    instrumentation = new LlamaIndexInstrumentation();\\n    instrumentation.setTracerProvider(provider);\\n    llamaindex = require(\\\"llamaindex\\\");\\n  });\\n\\n  beforeEach(function () {\\n    contextManager = new AsyncHooksContextManager().enable();\\n    context.setGlobalContextManager(contextManager);\\n\\n    const { server } = this.polly as Polly;\\n    server.any().on(\\\"beforePersist\\\", (_req, recording) => {\\n      recording.request.headers = recording.request.headers.filter(\\n        ({ name }: { name: string }) => name !== \\\"authorization\\\",\\n      );\\n    });\\n  });\\n\\n  afterEach(() => {\\n    memoryExporter.reset();\\n    context.disable();\\n  });\\n\\n  it(\\\"should add span for all instrumented methods\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n    });\\n\\n    assert.ok(result.message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n    const spanNames = spans.map((span) => span.name);\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n\\n    assert.ok(spanNames.includes(\\\"open_ai_embedding.get_query_embedding\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"base_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.query\\\"));\\n\\n    assert.ok(retrieverQueryEngineSpan);\\n    assert.ok(retrieverQueryEngineSpan.\",\n    \"file_name: instrumentation.test.ts\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/instrumentation.test.ts\\n\\nquery({\\n      query: \\\"Where was albert einstein born?\\\",\\n    });\\n\\n    assert.ok(result.message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n    const spanNames = spans.map((span) => span.name);\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n\\n    assert.ok(spanNames.includes(\\\"open_ai_embedding.get_query_embedding\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"base_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.query\\\"));\\n\\n    assert.ok(retrieverQueryEngineSpan);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.input\\\"]);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.output\\\"]);\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.input\\\"\\n        ].toString(),\\n      ).kwargs.query,\\n      \\\"Where was albert einstein born?\\\",\\n    );\\n    assert.deepStrictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.output\\\"\\n        ].toString(),\\n      ).message,\\n      result.message,\\n    );\\n  }).timeout(60000);\\n\\n  it(\\\"should build proper trace on streaming query engine\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n      stream: true,\\n    });\\n\\n    for await (const res of result) {\\n      assert.ok(res);\\n    }\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    const retrieverQueryEngineQuerySpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n    const synthesizeSpan = spans.find(\\n      (span) => span.name === \\\"base_synthesizer.synthesize\\\",\\n    );\\n    const retrieverQueryEngineRetrieveSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.retrieve\\\",\\n    );\\n    const openAIEmbeddingSpan = spans.find(\\n      (span) => span.name === \\\"open_ai_embedding.get_query_embedding\\\",\\n    );\\n    const vectorIndexRetrieverSpan = spans.find(\\n      (span) => span.name === \\\"vector_index_retriever.retrieve\\\",\\n    );\\n\\n    assert.strictEqual(\\n      synthesizeSpan?.parentSpanId,\\n      retrieverQueryEngineQuerySpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      retrieverQueryEngineRetrieveSpan?.parentSpanId,\\n      retrieverQueryEngineQuerySpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      vectorIndexRetrieverSpan?.parentSpanId,\\n      retrieverQueryEngineRetrieveSpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      openAIEmbeddingSpan?.parentSpanId,\\n      vectorIndexRetrieverSpan?.spanContext().spanId,\\n    );\\n  }).timeout(60000);\\n});\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 30057,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 30057,
            "text": "[\"H4sIAAAAAAAAAwAAAP//\",\"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\",\"AwCcirRoSIcBAA==\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-12-15T17:33:34.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "8P0_gVNpBRl4f8YGR3q49WE5B7cX0gG0WHpgC2Y7F1E-1734282214-1.0.1.1-WyPrmVTTNrjztFClKcmGQ2EoF1qqPaHUujouaAeTdBdz8nI58Xxjn_Cb67ZNVmI4kme4.EnF0okLMqVAFQ.ILA"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "w_0WaOK6rvXP.6wega0AxNclFo2Irp6XdmEJM76i1.E-1734282214331-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Sun, 15 Dec 2024 17:03:34 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "access-control-expose-headers",
              "value": "X-Request-ID"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "208"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_fc66409ee26771547a97b81e759db143"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=8P0_gVNpBRl4f8YGR3q49WE5B7cX0gG0WHpgC2Y7F1E-1734282214-1.0.1.1-WyPrmVTTNrjztFClKcmGQ2EoF1qqPaHUujouaAeTdBdz8nI58Xxjn_Cb67ZNVmI4kme4.EnF0okLMqVAFQ.ILA; path=/; expires=Sun, 15-Dec-24 17:33:34 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=w_0WaOK6rvXP.6wega0AxNclFo2Irp6XdmEJM76i1.E-1734282214331-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "8f2801fdfd625083-ATL"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1154,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-12-15T17:03:33.801Z",
        "time": 507,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 507
        }
      },
      {
        "_id": "91170466a8791a0a4d62be6bf0f05c62",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 4609,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "4609"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v20.9.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-retry-count",
              "value": "0"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 498,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"gpt-4o\",\n  \"temperature\": 0.1,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Context information is below.\\n---------------------\\nfile_name: essay.txt\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/essay.txt\\n\\nAlbert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy.\\n\\nfile_name: instrumentation.test.ts\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/instrumentation.test.ts\\n\\nquery({\\n      query: \\\"Where was albert einstein born?\\\",\\n    });\\n\\n    assert.ok(result.message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n    const spanNames = spans.map((span) => span.name);\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n\\n    assert.ok(spanNames.includes(\\\"open_ai_embedding.get_query_embedding\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"base_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.query\\\"));\\n\\n    assert.ok(retrieverQueryEngineSpan);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.input\\\"]);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.output\\\"]);\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.input\\\"\\n        ].toString(),\\n      ).kwargs.query,\\n      \\\"Where was albert einstein born?\\\",\\n    );\\n    assert.deepStrictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.output\\\"\\n        ].toString(),\\n      ).message,\\n      result.message,\\n    );\\n  }).timeout(60000);\\n\\n  it(\\\"should build proper trace on streaming query engine\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n      stream: true,\\n    });\\n\\n    for await (const res of result) {\\n      assert.ok(res);\\n    }\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    const retrieverQueryEngineQuerySpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n    const synthesizeSpan = spans.find(\\n      (span) => span.name === \\\"base_synthesizer.synthesize\\\",\\n    );\\n    const retrieverQueryEngineRetrieveSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.retrieve\\\",\\n    );\\n    const openAIEmbeddingSpan = spans.find(\\n      (span) => span.name === \\\"open_ai_embedding.get_query_embedding\\\",\\n    );\\n    const vectorIndexRetrieverSpan = spans.find(\\n      (span) => span.name === \\\"vector_index_retriever.retrieve\\\",\\n    );\\n\\n    assert.strictEqual(\\n      synthesizeSpan?.parentSpanId,\\n      retrieverQueryEngineQuerySpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      retrieverQueryEngineRetrieveSpan?.parentSpanId,\\n      retrieverQueryEngineQuerySpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      vectorIndexRetrieverSpan?.parentSpanId,\\n      retrieverQueryEngineRetrieveSpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      openAIEmbeddingSpan?.parentSpanId,\\n      vectorIndexRetrieverSpan?.spanContext().spanId,\\n    );\\n  }).timeout(60000);\\n});\\n---------------------\\nGiven the context information and not prior knowledge, answer the query.\\nQuery: Where was albert einstein born?\\nAnswer:\"\n    }\n  ],\n  \"top_p\": 1,\n  \"stream\": true\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/chat/completions"
        },
        "response": {
          "bodySize": 3175,
          "content": {
            "mimeType": "text/event-stream; charset=utf-8",
            "size": 3175,
            "text": "data: {\"id\":\"chatcmpl-AemJi3xzKNJ3cMJvv3LZC9Xp8HQkB\",\"object\":\"chat.completion.chunk\",\"created\":1734282214,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_9faba9f038\",\"choices\":[{\"index\":0,\"delta\":{\"role\":\"assistant\",\"content\":\"\",\"refusal\":null},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-AemJi3xzKNJ3cMJvv3LZC9Xp8HQkB\",\"object\":\"chat.completion.chunk\",\"created\":1734282214,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_9faba9f038\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"Albert\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-AemJi3xzKNJ3cMJvv3LZC9Xp8HQkB\",\"object\":\"chat.completion.chunk\",\"created\":1734282214,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_9faba9f038\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" Einstein\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-AemJi3xzKNJ3cMJvv3LZC9Xp8HQkB\",\"object\":\"chat.completion.chunk\",\"created\":1734282214,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_9faba9f038\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" was\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-AemJi3xzKNJ3cMJvv3LZC9Xp8HQkB\",\"object\":\"chat.completion.chunk\",\"created\":1734282214,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_9faba9f038\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" born\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-AemJi3xzKNJ3cMJvv3LZC9Xp8HQkB\",\"object\":\"chat.completion.chunk\",\"created\":1734282214,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_9faba9f038\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" in\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-AemJi3xzKNJ3cMJvv3LZC9Xp8HQkB\",\"object\":\"chat.completion.chunk\",\"created\":1734282214,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_9faba9f038\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" Ul\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-AemJi3xzKNJ3cMJvv3LZC9Xp8HQkB\",\"object\":\"chat.completion.chunk\",\"created\":1734282214,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_9faba9f038\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"m\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-AemJi3xzKNJ3cMJvv3LZC9Xp8HQkB\",\"object\":\"chat.completion.chunk\",\"created\":1734282214,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_9faba9f038\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\",\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-AemJi3xzKNJ3cMJvv3LZC9Xp8HQkB\",\"object\":\"chat.completion.chunk\",\"created\":1734282214,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_9faba9f038\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" Germany\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-AemJi3xzKNJ3cMJvv3LZC9Xp8HQkB\",\"object\":\"chat.completion.chunk\",\"created\":1734282214,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_9faba9f038\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\".\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-AemJi3xzKNJ3cMJvv3LZC9Xp8HQkB\",\"object\":\"chat.completion.chunk\",\"created\":1734282214,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_9faba9f038\",\"choices\":[{\"index\":0,\"delta\":{},\"logprobs\":null,\"finish_reason\":\"stop\"}]}\n\ndata: [DONE]\n\n"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-12-15T17:33:34.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "hVJI8_TD7jDug0sjekI.N4o75Fdz3tVzDMgCy2fvaqI-1734282214-1.0.1.1-s9AQUJI3CU5Fdzm5RBPS9CTbKX1YZVE3vdVyM9ym7BRzuTOW1Y7fUZqj9n2GAr9mJwwKdg19vhE4aC1TmXIgsg"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "Xmai23rhhU3fWtKb9BGPoxxAeHl4X9_HWnD19ydKuMk-1734282214980-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Sun, 15 Dec 2024 17:03:34 GMT"
            },
            {
              "name": "content-type",
              "value": "text/event-stream; charset=utf-8"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-expose-headers",
              "value": "X-Request-ID"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "270"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "800000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "798909"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "81ms"
            },
            {
              "name": "x-request-id",
              "value": "req_095d95dc697596655d00b7b6a40498f0"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=hVJI8_TD7jDug0sjekI.N4o75Fdz3tVzDMgCy2fvaqI-1734282214-1.0.1.1-s9AQUJI3CU5Fdzm5RBPS9CTbKX1YZVE3vdVyM9ym7BRzuTOW1Y7fUZqj9n2GAr9mJwwKdg19vhE4aC1TmXIgsg; path=/; expires=Sun, 15-Dec-24 17:33:34 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=Xmai23rhhU3fWtKb9BGPoxxAeHl4X9_HWnD19ydKuMk-1734282214980-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "8f28020149405083-ATL"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1180,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-12-15T17:03:34.331Z",
        "time": 656,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 656
        }
      }
    ],
    "pages": [],
    "version": "1.2"
  }
}
