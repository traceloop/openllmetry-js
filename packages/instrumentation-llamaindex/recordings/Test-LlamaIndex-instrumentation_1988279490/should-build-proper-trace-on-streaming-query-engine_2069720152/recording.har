{
  "log": {
    "_recordingName": "Test LlamaIndex instrumentation/should build proper trace on streaming query engine",
    "creator": {
      "comment": "persister:fs",
      "name": "Polly.JS",
      "version": "6.0.6"
    },
    "entries": [
      {
        "_id": "35e4e3d1b757b5697226d1cf6efde888",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 95,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "95"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 463,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"Where was albert einstein born?\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 10177,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 10177,
            "text": "[\"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\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-03-11T19:12:48.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "JIWX69SknEXbxMZBdxHtCE.j8hG4ZSaXslQGkSEk3.0-1710182568-1.0.1.1-B58qjuEiZ5KrFtJSKujd7q4pCh02kzUUDXGzTcjxz7IKoyeFwG.E0FdeHIpB_s5g70x_jHgfZTwKSWn9ivpTgQ"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "bw6EZHz.GKDyJR6xR9c4us8R4.sulSJwGV86DFXe7Fc-1710182568876-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 11 Mar 2024 18:42:48 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "23"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_d751da8430713f9b4602f4b993eeb55c"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=JIWX69SknEXbxMZBdxHtCE.j8hG4ZSaXslQGkSEk3.0-1710182568-1.0.1.1-B58qjuEiZ5KrFtJSKujd7q4pCh02kzUUDXGzTcjxz7IKoyeFwG.E0FdeHIpB_s5g70x_jHgfZTwKSWn9ivpTgQ; path=/; expires=Mon, 11-Mar-24 19:12:48 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=bw6EZHz.GKDyJR6xR9c4us8R4.sulSJwGV86DFXe7Fc-1710182568876-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "862dafbe5af60e51-MXP"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1066,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-03-11T18:42:48.654Z",
        "time": 341,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 341
        }
      },
      {
        "_id": "b4d91742ad75611d7acc306ee8971613",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 1356,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "1356"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 471,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"gpt-3.5-turbo\",\n  \"temperature\": 0.1,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Context information is below.\\n---------------------\\nAlbert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy. /*\\n * Copyright Traceloop\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License. * You may obtain a copy of the License at\\n *\\n *      https://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and\\n * limitations under the License.\\n---------------------\\nGiven the context information and not prior knowledge, answer the query.\\nQuery: Where was albert einstein born?\\nAnswer:\"\n    }\n  ],\n  \"top_p\": 1,\n  \"stream\": true\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/chat/completions"
        },
        "response": {
          "bodySize": 3172,
          "content": {
            "mimeType": "text/event-stream",
            "size": 3172,
            "text": "data: {\"id\":\"chatcmpl-91etllKY75GK1kG3l6g4E2Gnj9YyF\",\"object\":\"chat.completion.chunk\",\"created\":1710182569,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_4f0b692a78\",\"choices\":[{\"index\":0,\"delta\":{\"role\":\"assistant\",\"content\":\"\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-91etllKY75GK1kG3l6g4E2Gnj9YyF\",\"object\":\"chat.completion.chunk\",\"created\":1710182569,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_4f0b692a78\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"Albert\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-91etllKY75GK1kG3l6g4E2Gnj9YyF\",\"object\":\"chat.completion.chunk\",\"created\":1710182569,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_4f0b692a78\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" Einstein\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-91etllKY75GK1kG3l6g4E2Gnj9YyF\",\"object\":\"chat.completion.chunk\",\"created\":1710182569,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_4f0b692a78\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" was\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-91etllKY75GK1kG3l6g4E2Gnj9YyF\",\"object\":\"chat.completion.chunk\",\"created\":1710182569,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_4f0b692a78\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" born\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-91etllKY75GK1kG3l6g4E2Gnj9YyF\",\"object\":\"chat.completion.chunk\",\"created\":1710182569,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_4f0b692a78\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" in\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-91etllKY75GK1kG3l6g4E2Gnj9YyF\",\"object\":\"chat.completion.chunk\",\"created\":1710182569,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_4f0b692a78\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" Ul\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-91etllKY75GK1kG3l6g4E2Gnj9YyF\",\"object\":\"chat.completion.chunk\",\"created\":1710182569,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_4f0b692a78\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"m\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-91etllKY75GK1kG3l6g4E2Gnj9YyF\",\"object\":\"chat.completion.chunk\",\"created\":1710182569,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_4f0b692a78\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\",\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-91etllKY75GK1kG3l6g4E2Gnj9YyF\",\"object\":\"chat.completion.chunk\",\"created\":1710182569,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_4f0b692a78\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" Germany\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-91etllKY75GK1kG3l6g4E2Gnj9YyF\",\"object\":\"chat.completion.chunk\",\"created\":1710182569,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_4f0b692a78\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\".\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-91etllKY75GK1kG3l6g4E2Gnj9YyF\",\"object\":\"chat.completion.chunk\",\"created\":1710182569,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_4f0b692a78\",\"choices\":[{\"index\":0,\"delta\":{},\"logprobs\":null,\"finish_reason\":\"stop\"}]}\n\ndata: [DONE]\n\n"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-03-11T19:12:49.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "UGdC5XMG77P0D7LwewkLoL7hp8MOsYplGbNY9OEtXCE-1710182569-1.0.1.1-CY66suwkzUMSDdqNKScd_xrNJNCaDosxM1INvXHK6bDJrGJpyzd3ze5QZTo9hSMDM.vOQHeVpPYKkuShgrA1dQ"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "vmwnOdAkBt0WfHcGby0r7I26G9dDLZAU0ZYKZJlxHlc-1710182569563-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 11 Mar 2024 18:42:49 GMT"
            },
            {
              "name": "content-type",
              "value": "text/event-stream"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "cache-control",
              "value": "no-cache, must-revalidate"
            },
            {
              "name": "openai-model",
              "value": "gpt-3.5-turbo-0125"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "71"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "160000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "159689"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "116ms"
            },
            {
              "name": "x-request-id",
              "value": "req_9793520f485093871f830207964c2b1c"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=UGdC5XMG77P0D7LwewkLoL7hp8MOsYplGbNY9OEtXCE-1710182569-1.0.1.1-CY66suwkzUMSDdqNKScd_xrNJNCaDosxM1INvXHK6bDJrGJpyzd3ze5QZTo9hSMDM.vOQHeVpPYKkuShgrA1dQ; path=/; expires=Mon, 11-Mar-24 19:12:49 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=vmwnOdAkBt0WfHcGby0r7I26G9dDLZAU0ZYKZJlxHlc-1710182569563-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "862dafc08ed50e51-MXP"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1186,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-03-11T18:42:49.007Z",
        "time": 658,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 658
        }
      },
      {
        "_id": "4d705d14a30eb714ad1b4db58213356a",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 9608,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "9608"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.28.4"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 465,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"Albert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy.\",\n    \"/*\\n * Copyright Traceloop\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License. * You may obtain a copy of the License at\\n *\\n *      https://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and\\n * limitations under the License.\",\n    \"* See the License for the specific language governing permissions and\\n * limitations under the License. */\\n\\nimport { context } from \\\"@opentelemetry/api\\\";\\nimport { AsyncHooksContextManager } from \\\"@opentelemetry/context-async-hooks\\\";\\nimport { LlamaIndexInstrumentation } from \\\"../src/instrumentation\\\";\\nimport * as assert from \\\"assert\\\";\\nimport {\\n  BasicTracerProvider,\\n  InMemorySpanExporter,\\n  SimpleSpanProcessor,\\n} from \\\"@opentelemetry/sdk-trace-base\\\";\\nimport type * as llamaindexImport from \\\"llamaindex\\\";\\n\\nimport { Polly, setupMocha as setupPolly } from \\\"@pollyjs/core\\\";\\nimport NodeHttpAdapter from \\\"@pollyjs/adapter-node-http\\\";\\nimport FSPersister from \\\"@pollyjs/persister-fs\\\";\\n\\nconst memoryExporter = new InMemorySpanExporter();\\n\\nPolly.register(NodeHttpAdapter);\\nPolly.register(FSPersister);\\n\\ndescribe(\\\"Test LlamaIndex instrumentation\\\", async function () {\\n  const provider = new BasicTracerProvider();\\n  let instrumentation: LlamaIndexInstrumentation;\\n  let contextManager: AsyncHooksContextManager;\\n  let llamaindex: typeof llamaindexImport;\\n\\n  setupPolly({\\n    adapters: [\\\"node-http\\\"],\\n    persister: \\\"fs\\\",\\n    recordIfMissing: process.env.RECORD_MODE === \\\"NEW\\\",\\n    matchRequestsBy: {\\n      headers: false,\\n    },\\n  });\\n\\n  before(() => {\\n    if (process.env.RECORD_MODE !== \\\"NEW\\\") {\\n      process.env.OPENAI_API_KEY = \\\"test\\\";\\n    }\\n\\n    provider.addSpanProcessor(new SimpleSpanProcessor(memoryExporter));\\n    instrumentation = new LlamaIndexInstrumentation();\\n    instrumentation.setTracerProvider(provider);\\n    llamaindex = require(\\\"llamaindex\\\");\\n  });\\n\\n  beforeEach(function () {\\n    contextManager = new AsyncHooksContextManager().enable();\\n    context.setGlobalContextManager(contextManager);\\n\\n    const { server } = this.polly as Polly;\\n    server.any().on(\\\"beforePersist\\\", (_req, recording) => {\\n      recording.request.headers = recording.request.headers.filter(\\n        ({ name }: { name: string }) => name !== \\\"authorization\\\",\\n      );\\n    });\\n  });\\n\\n  afterEach(() => {\\n    memoryExporter.reset();\\n    context.disable();\\n  });\\n\\n  it(\\\"should set attributes in span for LLM instrumentation\\\", async () => {\\n    const model = \\\"gpt-3.5-turbo\\\";\\n    const prompt = \\\"Tell me a joke about OpenTelemetry\\\";\\n    const openai = new llamaindex.OpenAI({ model, temperature: 0 });\\n    const res = await openai.chat({\\n      messages: [{ role: \\\"user\\\", content: prompt }],\\n    });\\n\\n    assert.ok(res);\\n    assert.ok(res.message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    assert.strictEqual(spans.length, 1);\\n    const chatAttributes = spans[0].attributes;\\n\\n    assert.strictEqual(chatAttributes[\\\"llm.vendor\\\"], \\\"OpenAI\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.model\\\"], model);\\n    assert.strictEqual(chatAttributes[\\\"llm.top_p\\\"], 1);\\n    assert.strictEqual(chatAttributes[\\\"llm.prompts.0.content\\\"], prompt);\\n    assert.strictEqual(chatAttributes[\\\"llm.prompts.0.role\\\"], \\\"user\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.completions.0.role\\\"], \\\"assistant\\\");\\n    assert.strictEqual(\\n      chatAttributes[\\\"llm.completions.0.content\\\"],\\n      res.message.content,\\n    );\\n  });\\n\\n  it(\\\"should set attributes in span for LLM instrumentation in case of streaming response\\\", async () => {\\n    const model = \\\"gpt-3.5-turbo\\\";\\n    const prompt = \\\"Tell me a joke about OpenTelemetry\\\";\\n    const openai = new llamaindex.OpenAI({ model, temperature: 0 });\\n    const res = await openai.chat({\\n      messages: [{ role: \\\"user\\\", content: prompt }],\\n      stream: true,\\n    });\\n\\n    assert.ok(res);\\n    let message = \\\"\\\";\\n    for await (const messageChunk of res) {\\n      if (messageChunk.delta) {\\n        message += messageChunk.delta;\\n      }\\n    }\\n    assert.ok(message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    assert.strictEqual(spans.length, 1);\\n    const chatAttributes = spans[0].attributes;\\n\\n    assert.strictEqual(chatAttributes[\\\"llm.vendor\\\"], \\\"OpenAI\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.model\\\"], model);\\n    assert.strictEqual(chatAttributes[\\\"llm.top_p\\\"], 1);\\n    assert.strictEqual(chatAttributes[\\\"llm.prompts.0.content\\\"], prompt);\\n    assert.strictEqual(chatAttributes[\\\"llm.prompts.0.role\\\"], \\\"user\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.completions.0.content\\\"], message);\\n  });\\n\\n  it(\\\"should add span for all instrumented methods\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n    });\\n\\n    assert.ok(result.response);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    const spanNames = spans.map((span) => span.name);\\n\\n    // TODO: Need to figure out why this doesn't get logged\\n    // assert.ok(spanNames.includes(\\\"get_query_embedding.task\\\"));\\n\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"llamaindex.open_ai.chat\\\"));\\n    assert.ok(spanNames.includes(\\\"response_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n\\n    assert.ok(retrieverQueryEngineSpan);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.input\\\"]);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.output\\\"]);\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.input\\\"\\n        ].toString(),\\n      ).kwargs.query,\\n      \\\"Where was albert einstein born?\\\",\\n    );\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.output\\\"\\n        ].toString(),\\n      ).response,\\n      result.response,\\n    );\\n  }).timeout(60000);\\n\\n  it(\\\"should build proper trace on streaming query engine\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n      stream: true,\\n    });\\n\\n    for await (const res of result) {\\n      assert.ok(res);\\n    }\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    // TODO: Need to figure out why this doesn't get logged\\n    // assert.ok(spanNames.includes(\\\"get_query_embedding.task\\\"));\\n\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n    const synthesizeSpan = spans.find(\\n      (span) => span.name === \\\"response_synthesizer.synthesize\\\",\\n    );\\n    const openAIChatSpan = spans.find(\\n      (span) => span.name === \\\"llamaindex.open_ai.chat\\\",\\n    );\\n\\n    assert.strictEqual(\\n      synthesizeSpan?.parentSpanId,\\n      retrieverQueryEngineSpan?.spanContext().spanId,\\n    );\\n    assert.strictEqual(\\n      openAIChatSpan?.parentSpanId,\\n      synthesizeSpan?.spanContext().spanId,\\n    );\\n  }).timeout(60000);\\n});\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 29997,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 29997,
            "text": "[\"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\",\"AwDTh+ar1IYBAA==\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-03-11T19:13:26.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "aZ9gGSKzLRf6CetGtPPoArbq3ECceGzbCYmg6BefVAY-1710182606-1.0.1.1-6KdUAsmpCR_7lNFvNt5pDTbYcWOYfNNwZKgaxyriQpn8sRjSXteMLDRLJJ7JkMDz.2Ic7RHpcLCnM_WXFXsSgQ"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "z_GvV3dlO7q1zFRkqjLDzHbtRU.S2YlgG51CKRIb5Sw-1710182606276-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 11 Mar 2024 18:43:26 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "68"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_66f25d4b21d666794c552aad3bb73750"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=aZ9gGSKzLRf6CetGtPPoArbq3ECceGzbCYmg6BefVAY-1710182606-1.0.1.1-6KdUAsmpCR_7lNFvNt5pDTbYcWOYfNNwZKgaxyriQpn8sRjSXteMLDRLJJ7JkMDz.2Ic7RHpcLCnM_WXFXsSgQ; path=/; expires=Mon, 11-Mar-24 19:13:26 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=z_GvV3dlO7q1zFRkqjLDzHbtRU.S2YlgG51CKRIb5Sw-1710182606276-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "862db0a75a8f0e13-MXP"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1066,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-03-11T18:43:25.937Z",
        "time": 698,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 698
        }
      }
    ],
    "pages": [],
    "version": "1.2"
  }
}
