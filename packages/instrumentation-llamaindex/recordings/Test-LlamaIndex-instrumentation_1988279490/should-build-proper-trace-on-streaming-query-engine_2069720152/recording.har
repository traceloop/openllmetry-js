{
  "log": {
    "_recordingName": "Test LlamaIndex instrumentation/should build proper trace on streaming query engine",
    "creator": {
      "comment": "persister:fs",
      "name": "Polly.JS",
      "version": "6.0.6"
    },
    "entries": [
      {
        "_id": "35e4e3d1b757b5697226d1cf6efde888",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 95,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "95"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.38.3"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.38.3"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 463,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"Where was albert einstein born?\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 10217,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 10217,
            "text": "[\"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\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-04-29T14:20:37.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "rWZfVLF42LlFcOBaRbD8isMxUU7IOCVr1SILEumTfFA-1714398637-1.0.1.1-aRGg8q9xvrgIGL9Tty2qvxbHELTwTZnTOLog6mdFKs.SJusVMJUKsMMC4h4dD1AU0qFSLY1UehDIaVrZZFR8VA"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "xqa5SyQlqUs5XDRzcVj2engcIsk5GCi8yj0CbVeA_yQ-1714398637973-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Apr 2024 13:50:37 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "22"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_32c202a995296498ee0f7311b239be36"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=rWZfVLF42LlFcOBaRbD8isMxUU7IOCVr1SILEumTfFA-1714398637-1.0.1.1-aRGg8q9xvrgIGL9Tty2qvxbHELTwTZnTOLog6mdFKs.SJusVMJUKsMMC4h4dD1AU0qFSLY1UehDIaVrZZFR8VA; path=/; expires=Mon, 29-Apr-24 14:20:37 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=xqa5SyQlqUs5XDRzcVj2engcIsk5GCi8yj0CbVeA_yQ-1714398637973-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "87bfc31dbc6a4bf7-MXP"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1066,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-04-29T13:50:37.644Z",
        "time": 426,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 426
        }
      },
      {
        "_id": "48cc1de00a51c7d50d16024465156f5a",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 11774,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "11774"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v20.9.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-retry-count",
              "value": "0"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 493,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"file_name: essay.txt\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/essay.txt\\n\\nAlbert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy.\",\n    \"file_name: instrumentation.test.ts\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/instrumentation.test.ts\\n\\n/*\\n * Copyright Traceloop\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.* You may obtain a copy of the License at\\n *\\n *      https://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and\\n * limitations under the License.*/\\n\\nimport { context } from \\\"@opentelemetry/api\\\";\\nimport { AsyncHooksContextManager } from \\\"@opentelemetry/context-async-hooks\\\";\\nimport { LlamaIndexInstrumentation } from \\\"../src/instrumentation\\\";\\nimport * as assert from \\\"assert\\\";\\nimport {\\n  BasicTracerProvider,\\n  InMemorySpanExporter,\\n  SimpleSpanProcessor,\\n} from \\\"@opentelemetry/sdk-trace-base\\\";\\nimport type * as llamaindexImport from \\\"llamaindex\\\";\\n\\nimport { Polly, setupMocha as setupPolly } from \\\"@pollyjs/core\\\";\\nimport NodeHttpAdapter from \\\"@pollyjs/adapter-node-http\\\";\\nimport FSPersister from \\\"@pollyjs/persister-fs\\\";\\n\\nconst memoryExporter = new InMemorySpanExporter();\\n\\nPolly.register(NodeHttpAdapter);\\nPolly.register(FSPersister);\\n\\ndescribe(\\\"Test LlamaIndex instrumentation\\\", async function () {\\n  const provider = new BasicTracerProvider();\\n  let instrumentation: LlamaIndexInstrumentation;\\n  let contextManager: AsyncHooksContextManager;\\n  let llamaindex: typeof llamaindexImport;\\n\\n  setupPolly({\\n    adapters: [\\\"node-http\\\"],\\n    persister: \\\"fs\\\",\\n    recordIfMissing: true,\\n    matchRequestsBy: {\\n      headers: false,\\n    },\\n  });\\n\\n  before(() => {\\n    if (process.env.RECORD_MODE !== \\\"NEW\\\") {\\n      process.env.OPENAI_API_KEY = \\\"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\\\";\\n    }\\n\\n    provider.addSpanProcessor(new SimpleSpanProcessor(memoryExporter));\\n    instrumentation = new LlamaIndexInstrumentation();\\n    instrumentation.setTracerProvider(provider);\\n    llamaindex = require(\\\"llamaindex\\\");\\n  });\\n\\n  beforeEach(function () {\\n    contextManager = new AsyncHooksContextManager().enable();\\n    context.setGlobalContextManager(contextManager);\\n\\n    const { server } = this.polly as Polly;\\n    server.any().on(\\\"beforePersist\\\", (_req, recording) => {\\n      recording.request.headers = recording.request.headers.filter(\\n        ({ name }: { name: string }) => name !== \\\"authorization\\\",\\n      );\\n    });\\n  });\\n\\n  afterEach(() => {\\n    memoryExporter.reset();\\n    context.disable();\\n  });\\n\\n  it(\\\"should set attributes in span for LLM instrumentation\\\", async () => {\\n    const model = \\\"gpt-3.5-turbo\\\";\\n    const prompt = \\\"Tell me a joke about OpenTelemetry\\\";\\n    const openai = new llamaindex.OpenAI({ model, temperature: 0 });\\n    const res = await openai.chat({\\n      messages: [{ role: \\\"user\\\", content: prompt }],\\n    });\\n\\n    assert.ok(res);\\n    assert.ok(res.message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    assert.strictEqual(spans.length, 1);\\n    const chatAttributes = spans[0].attributes;\\n\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.system\\\"], \\\"OpenAI\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\");\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.request.model\\\"], model);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.request.top_p\\\"], 1);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.prompt.0.content\\\"], prompt);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.prompt.0.role\\\"], \\\"user\\\");\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.completion.0.role\\\"], \\\"assistant\\\");\\n    assert.strictEqual(\\n      chatAttributes[\\\"gen_ai.completion.0.content\\\"],\\n      res.message.\",\n    \"file_name: instrumentation.test.ts\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/instrumentation.test.ts\\n\\nok(res.message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    assert.strictEqual(spans.length, 1);\\n    const chatAttributes = spans[0].attributes;\\n\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.system\\\"], \\\"OpenAI\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\");\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.request.model\\\"], model);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.request.top_p\\\"], 1);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.prompt.0.content\\\"], prompt);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.prompt.0.role\\\"], \\\"user\\\");\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.completion.0.role\\\"], \\\"assistant\\\");\\n    assert.strictEqual(\\n      chatAttributes[\\\"gen_ai.completion.0.content\\\"],\\n      res.message.content,\\n    );\\n  });\\n\\n  it(\\\"should set attributes in span for LLM instrumentation in case of streaming response\\\", async () => {\\n    const model = \\\"gpt-3.5-turbo\\\";\\n    const prompt = \\\"Tell me a joke about OpenTelemetry\\\";\\n    const openai = new llamaindex.OpenAI({ model, temperature: 0 });\\n    const res = await openai.chat({\\n      messages: [{ role: \\\"user\\\", content: prompt }],\\n      stream: true,\\n    });\\n\\n    assert.ok(res);\\n    let message = \\\"\\\";\\n    for await (const messageChunk of res) {\\n      if (messageChunk.delta) {\\n        message += messageChunk.delta;\\n      }\\n    }\\n    assert.ok(message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    assert.strictEqual(spans.length, 1);\\n    const chatAttributes = spans[0].attributes;\\n\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.system\\\"], \\\"OpenAI\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\");\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.request.model\\\"], model);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.request.top_p\\\"], 1);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.prompt.0.content\\\"], prompt);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.prompt.0.role\\\"], \\\"user\\\");\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.completion.0.content\\\"], message);\\n  });\\n\\n  it(\\\"should add span for all instrumented methods\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n    });\\n\\n    assert.ok(result.response);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    const spanNames = spans.map((span) => span.name);\\n\\n    // TODO: Need to figure out why this doesn't get logged\\n    // assert.ok(spanNames.includes(\\\"get_query_embedding.task\\\"));\\n\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"llamaindex.open_ai.chat\\\"));\\n    assert.ok(spanNames.includes(\\\"response_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n\\n    assert.ok(retrieverQueryEngineSpan);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.input\\\"]);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.output\\\"]);\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.input\\\"\\n        ].toString(),\\n      ).kwargs.query,\\n      \\\"Where was albert einstein born?\\\",\\n    );\\n    assert.strictEqual(\\n      JSON.\",\n    \"file_name: instrumentation.test.ts\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/instrumentation.test.ts\\n\\nname === \\\"retriever_query_engine.query\\\",\\n    );\\n\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"llamaindex.open_ai.chat\\\"));\\n    assert.ok(spanNames.includes(\\\"response_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n\\n    assert.ok(retrieverQueryEngineSpan);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.input\\\"]);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.output\\\"]);\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.input\\\"\\n        ].toString(),\\n      ).kwargs.query,\\n      \\\"Where was albert einstein born?\\\",\\n    );\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.output\\\"\\n        ].toString(),\\n      ).response,\\n      result.response,\\n    );\\n  }).timeout(60000);\\n\\n  it(\\\"should build proper trace on streaming query engine\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n      stream: true,\\n    });\\n\\n    for await (const res of result) {\\n      assert.ok(res);\\n    }\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    // TODO: Need to figure out why this doesn't get logged\\n    // assert.ok(spanNames.includes(\\\"get_query_embedding.task\\\"));\\n\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n    const synthesizeSpan = spans.find(\\n      (span) => span.name === \\\"response_synthesizer.synthesize\\\",\\n    );\\n    const openAIChatSpan = spans.find(\\n      (span) => span.name === \\\"llamaindex.open_ai.chat\\\",\\n    );\\n\\n    assert.strictEqual(\\n      synthesizeSpan?.parentSpanId,\\n      retrieverQueryEngineSpan?.spanContext().spanId,\\n    );\\n    assert.strictEqual(\\n      openAIChatSpan?.parentSpanId,\\n      synthesizeSpan?.spanContext().spanId,\\n    );\\n  }).timeout(60000);\\n});\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 39934,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 39934,
            "text": "[\"H4sIAAAAAAAAA4xZzY4exxG7+ykWe1YMFutfr5KTHQmBgsQ5RIcAfvmgdxHHw17A+Q46jHp7uuuHRXJ+/eHl5fWfP//t61++v35+ef37t399f/10nn356ftPr59f/vzDy8vLy69v/z5Wfv3Hz1+/fPn2y1/flr/957dfvnz99+vnF/z25H+L/rvT+f0JPwIGK7Lz02+P8SMsud7kp+faKke55/Mx4Wk+uhjNjYY/N+7Zcm/doc3r90vfdmi2kVmy2A==\",\"LZNusjiN5hPyOgsHQi4XtcB1uT23DnmZtee2yY0t05Pgc1ufScw+HpKoyZZToZhmV8AQ7dEhd4B3bEXM8ykRYfv7SJ6nk8vKlvtujrvsupPeppt6c1qDgIrexjzD6MYcjSK5wKNC3rKQ8NGMMYNXvBHlidbkDrKgdefZvtAw2hZwBdc3atJDYsAEbPUIvWyEXswT3Ge8gjXDyusOiJl6FkKsser59zbMSUkXbBOckGOZbZ2fPMVWE7ptob1MDmBlvtp5vQjNF2IHSXtWDL1z1p+72mbulNzVJpBo7dBd99VgMU4ONNqWk2UCCFbMLVlqg/A1uUCTbG2w8KqWo+YiQ4u40Hvh2Xr4chQJCmRrCVlPF+9bbfS4K/htTVyJOYDmtQoFYC1KCsYzB1Jw6NPewWfJc3yaK/nOOZH1C+Qw3tC1YZWPmj/tVRamCPXWcRoat9htgU6sZZk2vS3T/CojGLKT1OMOI+1KZVjHSCXD3NuLcogI+Lna82m1RQy0bKdZc2HPrOU+t/XsygnFrogPJkC2W68JHsAiaG0ybhZeldL5WcNuXUkzCBxgbbYUZJDDbEARKWqsfHSUZ2E1a527C8XEIHO2ZN+KKmrdAW2FjNahSyuz5f+TduvhUmeL7/Y4dThN5FKqzHxOKK6+vgrnfTaMrVIPmCMTF6mZqrpGvKWzWXbRovTRyoPHnvPJ5B7PNsnxrAbRy7m8QBgJMrRIUX4AXgIGmvX26nQgZjaEecRMj0SRs/S1uvDV4EKfzHLCGVcMWbZ1ZaE9FRu3cwc6S8HiyA3MWb2t7+LBUFNwxUyGQAWxFuM6ofegsNJSVA8vHn0uJSFEZdbEKHfK8bjI0+5GjhTB4QIzI5lp9l4YSiB4nQsRi0nXM0TNYTpPRpTlWxqtMsci5Ai1e5itzKeo7lFWOxupoOTjHnsNEsupUJa1MzrH2JGm2gKWSOTF6E7LIkZBwtjZQn4ctdGlPKEPHl26Z2Amf29GzgjY020z+mJUU+swRUTrgcQA807u5ahxDvBEEpa1i2DBwW5z4RK27cHSQ2lnvGN3winNHdH3yuxyN63WjDCuguYb84NQJKYRJYyYGV0S0yM446oAGzPsqIKaNCiKMK06r2LrsDStiZ3dizmjeI2HPYq37SoJmnSaAWF5oU2je5U1DtyhdNg4k6V8vrg7I5O+6oJ2hM1CVZLxqGXhshW7WX6N82rs+CWz6KE1ZRybo7m1W63LW/XTdpSv4nisQyWNbQU8lbf6eCpH9jrqQVUl0F3pytfyzD2/uBUCo0oFpGWVUsGPAd7ikDmxM3ACHpqIDIsou0b3esQ1egvbXhcYbqQxZQ8bnhdetCZ7GReFt+hRzWWdODbDM75jF2iZncSvWlN27iVhzDxsSxwKbDn9SlrHOMQOIY5i1ch69dJkqYNLFwXj23YSr9XMrRv1DyGHwjYIo7uQf56BpMPgYw1HzzB5lR/BviZh9T2puuCkrPIyHdKQSvy9xidLrBBYX54FY3bU/eKxIuaCg3WmmiYk2ByFs/Up0ThB97mb3voYNyrvvSzjGuaL4kr4h+mmzMc8tnAz896aUY9p/Igf4dBE5V6ntZ4zT6+mnwrV8dhTRpkXh54jeMX4qezWhnXGhSSHARtFpJmt78Vq0RU1qilZb4pOY9hYKiHCYngz+5rzkx1sbbv0sMbMCmmNzsxUbMqD3DaXYdCbaoCCeRSL9qa7I3T+w5eoS74eT1CdnwO7SWUF/eZrarirYtQC4KHlVx2i4F6hdzBnO3BlLH3TS4ZVo5yjsT2ia28Ol7Vpf4Sm76Fhu6vA6py+Ymunx1iXFcLMlA==\",\"QvZhXSzsTBjf63MAm1Y9FzlNnxXoPPPM/TZjPjLFCG43r48PG44pbfLT/M0/8JzfwHPHdXietBgzLs0xDFWp1seKUZzr7oMpkvBClYkWQxerXd2CjydNTSRH8LfyHE3xANtz0QoCWQ+u8O5cce0yQD6CSXhubFyGqSWEq/CMCjVGj5EFHWkfFnww2i/Wz2Q05PRudXle5sGjm+RN01l9TXQ/zozyBMQlG3i+A6Q6RR86hAQdFX6ZOptzMcOeJ6l6x2hyR8MS5rajUPSxD3dqMF1S/XEP2ZtKuqby+erS0crQ96hZreGM4k2EPdpVT9o0Oy8v36auLySnW3BF5ums4cf/AAAA//8=\",\"jF3Lii3Lcf0VceeCjHeEfsV4IksYGWxPPDAY/7tZVfsadaxs9dEdCA6b7t1VmZER65UYsFqLJ5Qc0KPUAdqxJjjBszJ33TbNMKfz12qwN4wGBOwNKoZY8D67Y7VkXFpGe1YXJD2uFXt+tQ5PI9zUxJVwjguqox0q9Ps1QBsTcYKRIwnFyw7fhUgFT2sXEkUruJoFOZWx36OqgRFKnjQ9Z78xdUtNo5VcIAf21HDiMF16GzsEZCGDPaqpMvTAT5jo2ad6ldtCRsxidNMbwBV6P0JP/foO3m2Q6KZtD2Nry3yo6eg6u0RUmZ/Vt6tmdAcd06dSgn/AuO8qiT7OxGPjiFEhRCl5ZmPYXU1feZ3q3UqOiewjvaJ5otS07i9MF8rkacsFT17lCJfm7nmvLiWbCHc51dQRlMYXgPpz+Jzu9UOxfjCT0dzyNBBrH4FmoJ5CsnLoHWi5iu3BBd/qTDEM0vL1w9fy+R5VrrLQLDyYQ3UHgEmZ0bM5PebK3empmbWWX/kIfV3Qs7LeLZgrwXBMGhTAWl/rJGBPH6HdbKktutUi7ZnFeoLBrEJ9iLXI3s6T5UJ/b3rkF1nHU8A9Y7ZWRCu9N6pex01yIwZEz97H3Q8xGrmRbiug6rSd1TWFiElwvjL0xK1xiOUP9etdCmBnDw8EGcx4UCvxLH0QITTuiXngbNitU5nO7r0jB4DCfpHZkQtyZbnIZ9ZxI+gENF3YIr7EBOc+bYcYooLctHqfICgUuknGCZFNm0Op4rkGGlHT7qZTdNpaNx4m7WW6vz9B7i9B7tKxp02pY1XUexYEFITz4OVCMpM/qJHeUgV6Z/cSKV1CyysbVXSfbhv/exV343rWcGtudXI3To+OKIXow4mZWLXj1PjZqPVEBR0N1DK8nRdQ3X1oq4J72JiWt07MghLMUsZi9zI2hyGxEKmtBRiJkvWspAxlam+uMmmhCWTcgrQPCTEQEduF0YhgvavAQEMPgRaq2kYKQvWGOGe1ufN1LHqnogwt4rO8/Bh3kwd4+XqsVd5EMh40z25nY1pmHnFkj8Ejdda21zoxEhsGF9cgwl6kbZReA95trHJgGVJCx1JhG/pmKg2/bIitLaH2W8K6NoOFv6H1yzD9/GGG2WiDfZlNo5XEGfU94GqewDC8tD12pvhsD7Ui3EJarGjZSgKs4wGxwIJu/Mw6Y9Wo6JiRrbJNP6UsMM0YD1Zu1AnNfVQV9k4yvag4LmgYNe0K6hXRImzAMTuhbaP+rcMlNlhmkeCbnHAJ0OwLHczEN2NJ1ajkVnrlgFHerQC4qi12Se0g6Pgb0BMk40jobk4DiGwXQxvoAUkAi+5py5jvY/2EtRPanQ1F0x4c8A12bUarGbsLvkFmQIkHpNF+DN0Ru4MD7KqkWMFLM3rBCmGAKh0vYzRibCjwhkS9+FrP2f+oMziIqQp30i+SspP7dBYbnAz7BWSoGdMCDhCF6CU7Y4dYL8vZBKNUQsXHOwQ4zOYQsLCC9Fw4yot0anKifYt15YxZbqEpmvMTHvqTxup9DpOzJ7pTwFyWJlQNs7atzgXERG6WD2+2maVza/Hk8xwjDoNkcuYEa3YVoGDswWe+whvvYgAhRwh0K7Q0JAeB4lVJEZHpSlrGPB30UQsfQpav3NedgwfekLpPrgD6F1tSlQcN51p5DtDCaYgGBzyHpobbi0g5fop0226+5V9H3c1OMnEjPkWapmndsCQQrVKaIG26tg4yYrbOCTOT1RLLXYdqwX/Diz7VRjdsImmitcuPJ8ZiWkVWQm+2ILYtYoafCWcLFqd6hkjBypaN+sso+jrfHefNGQ==\",\"cqMCsG+bqASXic06oC88sdsJhRRUDoGXqmO71gKVoIamK2v3pQ+KrlQ9A0My2TdSmtZaQw1Luirswz0xyKnRXmCHaXiKkGL01Rfs9RJhNrLJcYEwb1s1xs1q/TLJM2j/9oQKVTOJKXKiCNSw6M6gzwa0iQQBGyCM9bVuakWIp2tL205O9/QvWFWgG4kqSzqac4JAPqkq+E0IMqokOE9cxCSYSciLTufKEz5uCyH3WXDPJYph4uwT5XQ5SekjPXaJ/sYH1AFwiRhoCCSJBcf0bLOb+Bhgy/4jqPACAAfVhM5QPHZto8a84YEjx157Mv6Yp04YifQlo+WizXa9cD01GKS3zSdH2X/1qH2dVOcng2d2ELTR++c+a31bhW7ybFVLKyGJ2kzTUwAGCwvUpgQGLsfVJjlmY35vF9jl6sACylXHnCgUAJA17FuJp+X7ATp59WilQhypnDYcqOuzCe6UBLY2OOM379jQa5CU2kX21G6O/1HVBfRzmAAwszh7nWIPQuf8E7D3ijh0WPpz0p9JYavqE7JLciRKnSboOhtIwxLHoYM8BBE/lsLyLW+A/DXYvYe/GeL6Ley94Aw2Cshnt3ZYOiQ2EnwwCFSAbKOH8LE2yPkWfOzTBLxKSEwkqZXgxyXICjqubXYcHCqxpQ8x2sSVPvOes6m5jGuWjEhJUN2rjiHNu0KvVBtYx5BBlMVdSy7PMbzx53TYo/ZHowd8G2Gi01lkLhwLUzJSGliELUVWmJiKTC2tZ7Yg7zmwyCKL0+7XVGM4UiDuJJ9ZiM1qczW0vElwAhlqfJVLvChQnS2Vt8GkQiTRmdD5lR4FfoohaBpen2LRD3aPzoY5xJWIRax82W6dMzh5jMVopbnxGw0DULBRzc4cqEO24xBFgdyzWuxcU5wSh2FNFMIgX6w9ygKiE0gl/T4dAbdPJk2fLDYNrVHyw3yYbvE3lqM6uanu6ieiGd4P99kCF0xc0ySXDKhpl+cJwCHPYSC5qcuiQeRtdyNUNkDI/pIPjxmx5ys5Jsnj3bEI2a6dgk3tkCbanRsOBWNKSPzxOcMtXsJ1XYRzXDjTe/lhrPe7uVMND4Hg1FPmS+T0+9TEYnON3uys4FBXwjngBlfqQUqU0CIVyanNR1y5piOGgXKfkPnEcTjpSKGXXLscmu6z2+S7hkHcANfQA/PW5L/hpDqBHV0ncxs5rygWzJKtjLlV7fSDU25banCNScCEZ5FT5O1kryFg2qQOLAr+nfVYf91io3gkvbUDjAtdCYe3foO4iW12U7gmkthJhZmeNv5pVPDdoztadJYJBCFo6voVVvn0ElFC6OQDNuvPmAS6LJ3cLdW1mraXbGu71FgG9eyqE0YEgrvUSaJi2sFRE1juFULyCTuZrBOAu9GdwKXjdoI2Dbi2ot0MwnGK5A6Jbo90cBFfZXBvSRszJj3IYvt5vF6kXoW1zJPkeTJGAsnzVYj44vLwd9KTITfiH69L4aOFhGDESOsQ3UTwbEHTq4hC1g8/mOqo7fZRz7msWibK1SaxS9hpE+MkcQSalcmm6JwkhlabvQjox4bCTMQjonf2gSGWYikjbiY4LO4kB/tBTgOZatjQ+9HXnBSiKyagrDAOaUnycR1MulBrrVJrPrH2uQO/qdUrg72HBIBmniinVnkZ3j5SHjuQ2i7spWyMPGcw9cbWWGa1z0aq4ZnTsylfiQGcsR8iRPM5ZEwV+Gp+oSY/gqzYbttWkJ0krKgTh8DPAvK43VlASqE72ZOBYSSNn+XOLLD56P5NmME8XeO78ezMHXkCZ7DSWWMIYnASvRyD3TYuHg+oDulkQPILadbxtQ==\",\"GF18hb0b3AeDeeEPG3rZtQ4aapiNqwXyzpxQ9ANIaSMxSOTIJEj1ps52eGU4dAj0hFPxOdXYOLkVZGvAe0FkWEjih2X7eQhnUvcmMyCUJDlkSdHvKg51Agbux6Nigi+CY6Z0OwhPe3TszCA8LXWyuiu2upNcF/ohYp8G/cQQFwAXu/9KTpZYqMdaY9/wwOQAvLIJL0xWffZBOnVSSMuo6RN1yDaFIrYN+4je02kGldOEfCvwr5Md1xqOeVqMCabDaQ4g7+5nphWEtu0oozkEeWi/CnzSx8zjWPz7nyAj2UIewIFUYb+zsSHHg3qNULbX46c+fJi7+j70CookmnnsJcJI8tEaq4w6hBxCP+BmF9DCOFrEzyqkruwpx9FN4JsBFdyAhSKWi1Af1rV+CK+EIpvMO/wUxQpGnT3oirCq8lFgJqfSRCFtIn6h37xKmgDsw6xEKAQUADSSEUH4SFuBku99Cn8ES6wh8wl6XolwoYv278Q0mX+Y/lKYGLYqDPBYm27dtwdG0FVAS89Gcmh6fx3gLrJ/T5S0VdILAC+x4Us00T27MdU6M34oVQZBhRtwmW6hqkw45V3I8xJ9ZUB9fhC5v1/rSZggOWOgJSGeI4SCu/TJ8aRmQBDSRx2g4pHRn1sGqfxab8hlye17wbbX/WfN8dxyF0gQmyBCh9KOBWgbFnjpQM2m7EFLqBA30TJAZPl1w2hAzJ+a1BZAADUUnjyzcLJSguNJkkHeO3ONkDQiauAhaVIy33EBig77TsokChkx1VNL9drZJ2FJ+uxO6IJl8xNpXw0vr3NpAq3EbrDASzXz4HC+klfrNouBaWUnIxi4EhaqVT5xpPtknA7JH6UVH1UcEgm3cgh0Ma8FFdHxJmhjyVY+77eEhtr7qWCKAZaQurvXCaIushOKVOgR2mc87UN/WrKHiWtinTxwZ9O8H4HSTCSYiIKYiV8wqSNqtY1V9O7esS0KnY71x/uvNfl8uGnFn3rFmi+IMtVI9pbIPR6S4l7cHw86OLu+Q2ieBIQ+MIsSknjLGAb8JecSQ6Ec/gelaG9PIMwffETBN+179DGxUSMHjKvm/NrggO4jwghUggbUyW5ik7YZcgoheuk5BG3VD3E/HxsVYj7tgqwhU5cTphKjmRO4J81+NlIO/4OQqnvwhIdhhtKdeZjBcCwHoH+AXuNwlkvLdGCwYm0+2o3LTATmizLPtq7u02+o90WVYOixWcMQUMqQPvZpW0ldb0M7RQUe1d0dWPXXLL73O7ipHNacQ4AcRCyCfctNIiZG701+UcrjB85D+iQxk4O8DIIU9DRlU0hBKLvD2rFXz07zrmzC1Vk39p3p8RimJd0dQ2SOUUYdeMU9oSsS1zbMEbCyE/+IBGSnwobo9tkqeOhrktA8yIS9yKL5TW7c61Sh1czZAaenkUFIVNtqxt5ftVwxD9P2RE1Sz3Lx4puYNQnJDoR3vn1ECYSBomFPf4UdPrGgHWeJp64Gf+j50PvTgp+qIBt5YuxX7oOAwm9WbFwv/F1Zn23+aHEqMvKkrl0QHZymRGcNY6/jSPGqnxqQpz5A+LGC4KCr6a1USy/XjaVGxuQOTEMxD5uLDNX87EMscg7JJvQRtu8EUYNmirTPhYyDbYFH4h1RK62JfvGnHfdJMq6zg20xShi1B9c4BamysJ9iDz8OJCTCk+oL4gZSGSPBtglQA0nZ2yHHMTB//C74DzHiQ7MuKh79tRRD85kxFHk+WxB6Syv5RlNz0ep92PUgXzwmvcP661NnxwkB+QoOaIUEKYmT9Wd4odtHrNkehsSU08sDdT/8Dpw7m7aChkpsR2VSmA==\",\"wwdABKBGWsPb1xokiBOkdw+El+dUP9RtI3CNzJp+Oo4tRtCswvZq3sPxi0piaqEIcZEH8FxbTGeCNOlXqaG4wtS4A4G6z+ELB07ilwm7yE19Z+Xy5R+f5hVqbCqqJ03qa2bkp9hCa7ucvjHgoXdMi0JQykcAlF/7vJosOTu3E5Je8itVNJlemQL5nalTy/oF7bgbIsooG8odyPNqmsgb+149AXscIT3XWEBI36B+2CKD8EfzvDhrARW8Y3ytQY3Q3INDw+tsN5khUX39NrgbCJlCHDvUwusHI6cmmj3UJVtvCOScAU5SBb+HTto5+wqQia/E6Df3NlzZjm8pdjhVJInguuY7fZPZGA9TR9GE5Cn5B/ln+It1c9QMpX0qiwwp4r0E7ccmIHXOdn9d3Cdvn4VU0v3KADRRn4Uu5VD/eTZzJ48QlA7Ikq/miqdPLbVKuv7pgsth3uM7Y3ImlUawmCrmkA/QHXp8UO+pENsznttDhAiQpnbgnkBR+fgwdu0rR9I+NXWDk39jVLgagILtyKjzrXL5MaZ2EbZCwuyPnyZLflb+fxfDgcGkhqXDkhTeBQ79uJPmdLknPgZlgYufSLfo8I1N3gZUpFyWUa+HuLxs4sYbTO3hKyr8jAxLOLLP3uPXZXNfo1e/yKPVqC0mFXdrJ+7xmtN8QpDKyEGNlrbbYENwIAXOTVnLDsDB3HtqL0bracJPcK5obzj6FvcqkFWLkYVE82yR6xXXUahxt4LQoIMkRzjkUV5Mo5QUXfAFrPcYedUH592+rwY0zr7E5urT5gbnU9McMFb8yu9qxUUfRKMDLCXUW6xzz3MwteyMR6tLZlegiSfpGeDm7H3dDeV8vFDiEytCM8sOuvhoWvqQWBy+nq/878chEUhjoLyji92mcGSffZlY9nG+JMkK10SSz8vAiVLYj6GrpOyyzce9QgTECFEezXCuz2Mo43S++716iitr6MoYJASy8PYxVBQnPMB6kD8I3j9BkXQZGZnSnk65jMuOTjjTKaNuRjC+N5M3N8GUtqE8bAs8JhuKaUNIdm8c9QYg2YF3ewN7QAYJVQFVHSx7fgIxN2SK6E5C1HN2yX4ijrbZ6zFQ5halUtqG1iNe3L395ZYPQTb2HnsQUUGZGrico51vJvAuGgI0i2MevsGIkJ1IjiXImxYkayaWxE5fIw4fZ07ofnXw2xD0Rjc0vp+s2v8WJkHAmeAQp6yzaxwQOxDfWi+X4IOT2HecKLHjsP6BjxiK5q19CFU/QjkZ1zhaw0BMkgwMKzI0Akg/MQO7dGzG4CMnGOn9l0l50ByFSAiwmdT+mflOVHzaP9ya8GN44vvph2lyirVdMNP3+dDPpVt73cJU65unmmnIXLdhZM62yQqE5GerYemeyQ/rUdBc07cSzdiCl8ZFQAsagbPaNn6g+oxTLJfe3jso5NoYYQL9mBzXBsJSdz3hxuX9rtPFlClOUWo+TYC9bYYGK4awWTVzO84us1t8OdrP7l0RfHbwN7CDTqFLZSSLnGtqBxF/qyDc+xYEQPJlkolrLsl824X7hGXbNx5OaQPRkIZfLrPFbbT7KY6IXCTNkMhvMYY7+mVnZcAitd4WEjnyZODwpLt5jod8HYnfp2jBkmboeCikBWmC+8KjwFlFs1nI4WvDfXy274Biil4gDrcr7RkqkZ1GlpR9EceLNQNF658q57eJLYas0z0TIFv28M2ylMf+6h9wt8e+mui5/YXo+ZHzFdP4zrB1kJJf1OQgy4YlDr43VnjT9bMcDPMBxXHH8UYGVYzuPiR+5+1jcXPjlgI67mijm2sG2ZkkBRwdjmKIDPkqUQ==\",\"/9ZR+c1FcYiGpDtTrteIiFVVbbzTAhimXkBudGGbgcZl6wSTZxdXkQMB2gSxbK1J/FSepjsZtYXiVczia3rqPdPqU4IQHrigf6C7m749VV5eRQpHBPmSyqxqYmOlnpjMt8CLYK4/fms7lDmVLCF6unDwPqw6v6VwvRgH64jBi+6unxiETy+MDpUuukPfSDydVBZJiKydzeuQJx7fUnBcEiK2xRQJ9di+NgqwFoJ3t6wnMJ7OJQvv8y///Pz//74f+J/PP/72n3/+t7/+y3/99qc//PbXf//zX//yl7/9x7/+9vvP+O1v//GXv/73b3/6w/8/rr/70J/+8E9Lttixg5Seq44uSjscH34RXJkZBWDj2lQyeSM58NBMZYZbn1kT2tCDcWgtKAQKqNCBxWUPybgzihJI4FHuRbKpu+MKEfLxTpBqGA7j6P8DAAD//w==\",\"dJ3RkSQhDENTAgxuO//Erh4z+9HSXAJXV7XTYGTpSZ7uD84BHXCfSWmCLgB2s5DX53zHCzv/3dztadV+J3pvW1T2Gs826aBpgZbL7u4zbdtL1a+1qrHh1HasuAsMHSLjBqa9y6KtqYYS6LJHx4Rp4I+OhwG3dVWxI4yKEOwarD9mNO0Sy+bF4Wr4YTIOJ8StwnAl4JCDLceGtRzagEc0WnFKFN0sQ1thxq1h2hF8rqPCBkYAq/emLjK1Vw9ifba1ThHjmb7FT4ICXgtML64OUTGit3VbXNE3p93ut/vK+kBX1fBqH4xBRrGotM6NC0ort04UFR9hNczrRwVE8kAwcP7C02w/2o3ObkteRgZLrKweFgmj4RGekWmrs6bp1nn5tdqzRhPI+QEYZZ1p4S+QlSpyVaq9/TJD/B9d6yIf1CpDCeCQddHm7rCLYs4z7L7nCd1hWaquCStXV7THn24d9ehhTEtoOHN5Su706y9LzVYjpb3Zid8t99qKX0DEti0Lk425UZpthgKQNt0R9mrbFxCrLg7iJ/psi85c2pMLV02pzLxa0woxfh5ugPxDpamLdU4ngwLTOuZ3q7aKeyyTrkvtE/FGZX4zX/NHc8LO/Zgze9wOqGWC/TzsfR2ZHY+CUHEIKtg686B6a7y/zyin8RCiVd/szqXkIIj4YYxlcmxlrGtoRD9UXqBMcXSFWrnL0Cb/ObKwi6zy1s3OeqwbMYN+LK37oFLVlGIMzOH9OHObV5q+wtBnbYzupS/F2bRr6ryMptEuV+Vtj9BTZD2dbQUaCVlPy7R6ohnqqLMIwSuiMyCoWoqEacmJfTf2rBGbrliujkUXPVQWOyYubyTzXM4k5YfMgtljX+27cP62Z2rxJZ6G7Q0zeDuM4oQ/sJYyx7mSDT9/za56ojBb+rIKv66KpGtzfDoktNf7K/18OgeFTVUH/P1uZ+LHXLaLqXrjRD+f+UlF9pEHx12kgC/+CI99uyjY3nSWG26uJn/OhF+vreZ9C+49mJ/tiJWNdqmLE3w/Mrgzrim9YrF6sr17Au7xSfjm6i1MjOPFzfjMMLrKYxejtqOASmseU2waxwtBaxp28Wy6XLxtgNCeIQBGcmFbrq3zXeX4V3M9PVS/2eaoM5mq3FZ7UF2vsIKK6lkUSrqgO21oxtk83WIKcNd4bNhD7Uno/9lvpnIfheWByisTry4ExVYLQKRSzyNInVvLxjkkH3t7EBJTZPGal6ToXeUQ7UwAAPCw3wSSj1xADE6v8hu+9kh3I8W0vSERR99fzYGYbVUFK9c/AAAA//8=\",\"jJ3NjiY3dkRfReh9G+QleUnqVYzZjCUYY8DjzSwGMPzuRjCzhak4bFWtBAiN6q7vyyTvT8SJUZ1L10+4EyLQNcL0+1IKRpDAlyQwWKnXlliBTk2NiDHcJ1k8IPnO3mBZfEwomONe7nHlyfXu3aYiPpbrzJTmsf1O2L2nF/j1rFUXbpSNfGq1lL6OixOHBAewlAoyFGC/JKidy+4leveLcnUtnVAkb+n2nSyhxom16KzyY3thEEL8oG4UhgKkp8kZsmT0GMPXtRJpu+18LZD5Sea9E62f+M/ed+lLHd0dFVsvvTnp9J3yjRWJuHpekfYgmiJwxReyvaL7UveEqX/2PjzCsCrg0ysbNQ+5B3QHsqoAvFalbhrIRhCH3op6UScTlY1GlzdxvUZUF+qYJhOQvcaTEISF9x6XABu9D+kKqSZDlY+jNDjCAxZjknqvIV+jQUmACNbZKe8hc1lzKz/aCynrl16+Q8mLnIgYL432m2/sUzMf117vIYFEJ3dNBSqeusMusb9MAa7D9fqiiw1+M0tVI0Wcqw4Qe7pUrPDetTYQ9vPkEvoOLlW3Qlk6RlYQPaNH364nQ5/xynIaUosV7F6gupB0CysPDXKqKjwffx6FsC3KZMzBIEgWjYrXtovV6sMIdbddZrBGNFk4k0QKRq1CXSKx0tfQTxIwF9lHLI4g4KFxmA9ZCiNZZEbZBZd911DUz1Qts9Kfl6a5LDGQl4nmyVBrCR62FmLb+8Iu8OjGTGgf5BF0DPOjuOopz8olsEhx4TMaunZ9jBie6GpIX5o0MRupQ40hR5m3RGNXD/8SDG/CZtOUmtUJzxKSdXBSOnW9eX1nY/vvr28k4UcfvU83FaliCSQSKoCjeVR2lxN1AI7Qm9TyfnCIRczQPulcDEd6K0+1IWvupb4OU65NYYwhywUk1r1IyeYbsq3QaPBgQtPOICNUIigYM8V+wfUjXjtKqZKjqK9C+7Ab1Mihzd8EkD+1ZYHQXHGGUAKP1TvkI0NhfPBVxvFmNdwUH9dnDxyvCkMJZb8MTPjIpe0viLtNMa0wizjpj06iEzR5dIZzrhnDZ9kpDQdUKGrLwrWSmk5gXKcY9t032QpcNcmrNRbyD4SuQTkXU2HEyOoS6jB6TszZ10dc63NZSFFAuORUzrODtaSkgmop1jnU8Fu0QG3OMc27INXEj+hkMXFs59glVsfSMmTCxo/tik8EjT6ldQBXVcIbb/h2C9fMiIzmUZE1VLWZ/LL16B8RHe+bq+/M5yFjZyBfmHfQe/zWXKAVKfykTBclRluzYzHSNZ/cn8kXHpvyHmQsH1IQdMN1aBbRfeE4ahbkgyqsCz9giaWDCIgi0mP70rJA0M9K9VST9sfFvYrh8PpZq+PWfPy+dx+4G+SHLCSI1VY6Jj39mPuxiZJJzhv6HkqcIPpCiwH8b5n/6sXgu8Qo5R6kterpfVK8qTZ1uI0mdijqjohwuTe1FlmaoYCK2ur8ZN3/QApCHZYNPjVGdP6+zMCjI5OpyrwyIBeQtB4UyS4Rig0N24yPislnNlgXFJvaQJSJ+c1cqJ6F3+40LMiu0ZDM0DajtWoVMsiKGUHkkLcRszECOdec4E/VEYGVRB1NPn1Xjo05iivtY/Y2uC3aEtxCSG2F56MW1dsBmITEYFhmby06MPguc/VLUoIY6N7bbUE5GFi9x+yXirwuf6x1Tc2FrMu5qpeT0hdcQlA1SA7YmMPBrBLes+xVcXhs575Pn/USf7myQI0HFdfT8LaPANB3ZiLDh2uLNACDtDM0Vmt4WhXM5grbMvueYIJtjSesAxya5iAaRUjnWg==\",\"fS46uoN4dTfk9BdA3hhv7VkCvlE8Et1BjNEVsOOvqgj8nsx9LwzHsYsNtFNje9KbdrMjQS77SUnATdtjpdpqEnwKn/XCXV8O0iu9ktwsamDbg4TAdDCRKAQIwckhbz2Rf5q6+ZelBMu5OR0b2+dbVf7U4paeNtau6RVhV3AIQ9e2RB1uWm29D2A9aszZ0HT0VteGcVhz9ZmOWaxzCvVYITEQ6Wd7nabpHdfY4nJX7vgjMQHIk4+woC0D1KcIO1oo9t0qaaj83yePyCc53YdDKkk7xZAjC8pHrY9vUUxje0yKTkEUn4rxcOOgxhQfzYCvg2nm8iQNJbcwnEct8oXy6uXzD3pIvaxHZA/eXurKOrChe7gWTU33EE6tofYduPchIJAvuDITc8PeV4E996AoYyBbTuPYjU9RmQzDpluSrAvAhwldTGSoXcqJVw/fFRczGtuLSA6zMjtRCHOK0eBrGhlbAFnuDA+JqZWkK3uwA36IA1JeUhRrG8HvPyIr2nK1zSirwLAiaj42/Ceb+OMfFFwCBcUaTiCOOnsNDKeqNLXLdaM9I/eGjL0rfHy5VFfYC2LLitQgCQlzbAd61DFWmTALqXavQKUog4fCUy5B6hl2ISHliexzMNamSkjSSJz7R70+EDmQu4++/NSRhYUF6YkxpV1HH4r7C2q2Tg26Bh+JpIvQzbVgHtmzAiHYQ6anDWB0VKjIq8jDYBSLPLL7ZQY1yIBsTQNhr4u0xKYetmew1NGGanR6ydvJaMUuaM/0D3fOg/jhFr/P9N5uKcwBa6s5Oix+0nXl5C5I4DavYVoJxEtpMV6B/c4yMagqS0M4UnHl+2dkU88CdGuuIY8HoJ29OQu1daF2ERuhQRs8OVNdPNmISrO6bP6k3UlXQK01Y8N7OJS2Hb61aU3fZHh/pXTUie9LKGIsi5Wl7EpL1ZyFzgHlBqCXUuEPvZn+Xau1T1Yj90Xl83zLwEOC7ZJIIYBc1O4Os+7cmlkx37QLz+Nrrp1Bu4+Uf9qPW/WueLpFa9GSGg/jbq1BJwoqEThcv/husl3sYYf4qwcc6QkO0u/0AundKmfIiJFqj/nn2u+3U17p85tdRYL0fkpsDE9LHufb9fEL7e11r7H6wn5pRPF+umpqDYnludgHVMSztzkhfNeLhA3fmiJBYmfE30pXIJokSsFfSiEjxi6/7A83hqw1/hHW1bAQlUR84+2q9Uiw/K5aGoePzw+NMo5uHe+sYh/jEhI8w0tLnfy1+a+r5AyP3VX3Pzd4vyHRIRynZaviS3SVZX00b/ygAK0GmN0UbZYOhj5rQZiY4PKDMedblG+vHCU6cDFIzdzbPcOhR85lBEuULEe1a13+MQ/yR9nYRvdfdx+MpQ99p0a+SZiy5ijBSPXQRehvKXrYV1ikKGtfeGBf8cc8tlRMmW6qZ8x4nl2YZFdrfsFc2uTh7ySiHIYrLvi5wWRVLnOBEUgTzuqLyqY1Y2E9pry6WnwVs1XZY/V3+HK+21AwvMdDKA4gefrPntJHueEg5AJ1lcTcUN/L4hyQ1EngpibCx0dlYK/rrqt3VK7YDYw5xWCEj39lFnpkRFfYMOfqqvXfKtslDmFL3OQu2rHn3ujilPJ4sW4LCwbDrhjoviJMobIx0VoS1QTgs1MML/c6aCxcyHe7/mChwROSkiHvOKkyqXE1Ip93to8ogFeAsWUddnGpUAKuROZuSvScNoCJUUwBJsYsqt8jogbFTaOOYYqlMXukl8lyz2tbPeEG3r6PDMFkl7sik2E3UEO+5j/2ptopr5po11wUcxNJPoMrNUCweQkZ6yu4OqRyAVaoz5iOwQ==\",\"u7ue9Wb2oKpJpCMH51Jc/HNzTwsZdrA7vtq8silECwt4F/c+gpZQJAa0rj4WfPtzrR1cYXe0M/4q6rqvgJUoe7RBhJR9OVOtNAH2hy9TjnTaT82p28DHza2VPf3j7mvqiIIHRW6dSY5Wupb6TArX9KX4iVizwzBWYOpR95jR4d13Mftrh5c3ybWQ60A3MD6TkQqPxnm6+upe1C/N1Fw0vYdCM9HOPKgS97Ied6dPbI+IeQO4WjaSD1IxExSM1XRVatXmdCMULJdom3QS36pRPUfVjUB1zi6Aor/jGTNhiVMUKveEeVwgEIjvPt2Br2Mf567E0Vlu2wyJWEFrqQ0tcC17TifWaBLxsQt/jpMK9G8oKAIB1nWeh9nbh7Jq8uOWa2gQJTWkuvOZkhQ9PgWoTeYaR2HVrfIUiDAtBEAjOSsNyI+kYqB8co8a0M6H0Gn0pOeWI9bJsY32gejSZPmRvOcALadlH9OH4VACvmD+CjNvUTQBFx/3AiZXK4150qM2p6YfUdkGO7NOCZYL58aiGbX1BfPAtUmQMR/6khO6DJC3wEsbx6e+xYHtsNSyBJLIKY3CpOROoJbbbquDixNTSwaqPxVzD9WBtsFY/ai89ipIC50NQuSMMdLPGIEAKGU84dfYaxVJmwsYfE3bB2TyaCTP2OfTmVYkOIVHIomykqOhySksr0VWQsxVC2pqZXpCINE7OvwCEUZohJwccCgxdCMlSLGn7RON1L0lfplAmZiaSOe2GiTfAj2TWwyv+vfrufeckG1t1y5oFQ8g85q70yWex+fl49AD5vUvZozVFo3uF9l/KMIsG2PDY66w7/YnsJ++lbuNXE6R+dB4zLpnR21zKLoAN9wMfIJ7B1SuYyoO3Dcvl7VoG2pHCGKX2g3f7ChjAf/fMxNFjEwpUpGR0SXKCYI0XG72JhNHhVMeX/n3P+IAvXIOIU0J6Kt7e7zcseZEQo56yJE+xQgt7iGIleW0EPsnTS+jN0JgmkURiyzsixFMNyKVGBHVO1vxjWBgCH1nA5zmWbqrVZS7OZYX+hDdvXCVQ7XE2rM3GI93GcWtvNoEhIdzlROA6sXVHmNDhyX6qQSd4EY4R+gZDciBh0j1m/VWJufO8eEV7lPPjjgInKvSCTJOurXglncoTtnH9LmhuNY4v3GnIJzUotP45PuAy7h0Mk9KbMpk8vN1xRi1xULyj66GmiBzaZ7t9YESDLHYgAvvRZ7OTuSpqK8Vy8TL8KWsqEm15omG3baGUXiwRLA+DVCJBIWN9CrWct79zlU4hsIsnJmIcD9ReS6hjT7FksUztzwLou3SiHiQJrtvK2TUaHVGO2oQ0SoGMifwC4PwfmQ3+HfFDKgVTogXVksrV9lMUeh7XC74vXNCcZ450LFpuTWYJSFvZrZLkk4ieUkLI+9MhPjNhhHDbZh/NS+0pZcAztV1hIzMITsPktfkdqb+CBHrPRdmF7OPtZFXU4XWDXwEYvU60KApCMfLNPEgwBGbYyxXeQn2XTMQkqSujd2dUL3AFEVCG3GV7YIF8MITtSZF+pa0lTh3dMIx7kaoTRNP9TX0CaA5vrZbufQ+uiZK4SebJrFDvWfTqgxb2Mhvc7QebStbxlFi0Vtn0mhUbFkVbl4w4lXmHMvytnciHykTsrL7MCLK1IXpQymFC682vgIHUwxxejRNzRGj87vpSgnwDf7V4CkIs69UYEF8z5LZg0GBV127FpYlIE/ZtXS3je5srXrgSKqE9jmszhdE3VzF01cWnbLxhIz2DkRJMd4rRD/aJ1+nKN/aL5rdCtMXK9KxQ3NwRn6O6Mnscj0puxJjnnVRHiS5njd8vW6VNp0F+bFQIrxLWK/i5bCXUc9HO8fokG+NvgiK7HOfRABglm6eEyWEyjTj6v695mDlOSt3hpI3joVxeKB6lwNyACwtu7waCLR9CqcFjnUcVATa5NWX/kZvXC9mZyXDdmZVaUSbQHDcyD+zi7nlv26uugazrwc02FPDXJ9OKqp2oNlogkjvBSzVSNLuUU+/g9jSGa4bq13japHIQifu68AOCP5URvQBnWotqSmgqwObsBgOZBBlIkHEu7tWtc0lpVYl8cTIqcy2QSOvYgyUjf50HbDgV5Ce5BU+vexFrVuVIj44McwMXJitnhkdph2i12LFJppKAJWq1E4PgtdIHNZf1V2Q9WYe3qHfVrOtRNc6ewfoTmb16hoGxUrOBjuD8kw+3cs8bVkWaKAfGYt/r0u9v2vrlDtY/aEXR21sGpJbWWWhr0Kh/5QsldzvUE3OkD/z4H8v/6Z41FoQM+OHwROwtadDuA5GDGSUbKVJhO1LzqHTzDWPyqkZBW/MXhsx1cJzN+Lvs++1nBcAedDzZH00I/wc5KmE1EwG9VzHgz/BncRqRHwrGMlZkbePW47VSOfaisi/cqP5MJ788yVMRRB5dQBayGvolsbHxREaJaCSAgb5z8giS2Rcn3Dc7w/5OxvWY1dSko+vXuVSi0ovom4g9PLcjr1zj1YHn0QptmHFujlAIGo9X66aZt+fa9jIYCDUfo9yK2pgKHbFvN6x2Wh33x3tDNdkN0kpC9axR2g9fH7OX+yx2O2djTGgY7oFqta2s4KGsepEskCRIQQxuW00hcg4XeaCs1bwV4KnQ7/O9yvh+XFJxEZmlfJJE3Jl6TViwIMVF5eijL6RyCw6sv3PZIk/gnhqYHDTFYn2qaXl7Qr6R7vs88GGLMBo2rOLeOi9guYhFfilvQqIdrUf1SnM6XV0v4AOvMjv1dUlPIIbgmywI21nAIDCMHIuRhsUKmSiKeRoz8/pkHoR1CW4MuJmjr9K4BTnESu/8BgfhxrzDVVF7GCs2x76xlwvvcueZMo+ujD4bRQ/eUFUKxAcIgLtPztuXEFnwCyu2oA3H4n0oQgXDJ51MF82jXrwfWUjz86ofXu48Iq4waBbZGGKVfV+rU/RN5AerglQkE8Dn/rdonWj40dIMI5QS80wqynemuyr6Lagnf2pAksDS3nUcNJqW2PPTK4dmC//5EARpgCxwvcnsV8LiWtczBJOaUHvfmOsqQvGrXLZHWiOfFQr2LOIfQ2R75xD/QN4wwXXki62gvgGXcvcGorN5aOyrfM/oTWbCTN8ObEwWDtqeZxM79rnunVnzwm/Yj27RhvOhY8Kx62AmdSwg3f8Kik09HUznCwwONJPficC4WNqJoRvRq/7wCGlydx0I4EKX2zmcIm/9sPVkXt+GSjdLmuKYZ/Teyi3D390bmRy6ESX4h8DP6VWJZgIq9XqHBtobB5dnbjVsL+IauCLvXnSAeCfqa11PFstUiw4FuQx6FHOfthRnyl1H+2RWmPOEDWddFma1gw0eSvuhuWssAIYtN1ArT+pQ66g2dqGVDKIr1AUzfxzpdJ7T2pEAHOumMcoMIVXAc67K7/KD8M5Ku/6WyqImLo1vYmW6AYsU0l3AyNqpmQ8S+feAaNWLm67PC+iFEDWFdpZV2w5GlKDNWDp+yvmfW2IB0Srkpci7fYqDFGPJ9WotzO6vn3mca2g6Ba+k0CeOcbsjtNV7v3CSdLl3ESiWJ9auA54ZLUrdNCFK2Oe71Xgw4mdlggxLpgRUb76unJt7TVRZ4ifwaxNvdmuoowyS85KxMoo4HUqyml0Ev6EnW0AnAxRQzE5i752vWhJK/qvVNzbCle79eMhtZH9TS9zokkxsT97ScavZIE/QTrrSzuw9NpvsDF6zA4xUifLXBvrVmFmuG2S657K/fU1blN8FV7FIUqu/9G1zlfz8Zo++OLm0v6RDfFb2gymTzxkdS3QCCOM6aFSyZHqr9w6R4Gr5yQn8/nvPJ81VvGCKXpFoToeRkzwVp9CR6thDJxkbgDROOsKwotHyYrxsTClwzsOISUgmLonr8iDrOAm04G2MxvyT/Dkh1kXdnFLP63FgsJYEQL+XDftCcEAkEsqsNUcowwKDWvkkRJ8tgL9fo9MuN6oz7GlaatXCZKxOnn+amGeaxaIuaM9Wnsv+TXArb4e6lXuDtB8wfR8MCCzgW8WedIVP76GkmMk99bCoLiWdtYIEDzqckG2WuGN+flrHHZ/qY6rsZAQowNvcgs9DmUJy0Pdae64nBro+s5L+1MoJO4gtXsG0ZZ4xYsCSDjfWctsw09NCb0R5aeUkzEvBjDhGxaksTPSP8arMEn+nLLQe/eUEAy69phyGrteShK7CZsvwNohlh0y9+oRPsJRLKdCsmVoMleg+62zN4htlMDwkTXyngdRJ4Oxb0ume7ov87zeZJso5BGvFAI2fbql6ZQH7sj3tz53oT2feLlkL14zixhQ8f1P2v3dBrAOKkyq/2VdpmQ0VNrIdbgkU5XMhknENGrP8zXkKYWcICR0BkoGCao/sTiG+Nko/VMZKcgK3zs+wioel4mmyACv9X1iBm1NpVUQt+Cd8B9pxDxQZUXbwCN3HeoJV3bxFlPDHqWEWLGUI3t8Gub8jFdrdEBwtjCcjowzXcEzLhOuk56XkgltW+17bMDaRfsMDIhnHyBy62zYyILU+GfQ9KSMSzPl7+wN/HMNLyZG3F3RO35HllMRoDDX+ey16q1nkip8YYuGqNq3gNM4vX7iC3l2x+NjpMX3nyX3qBfeG6erYncgsJH739vDKz/hxNC4kF9Kj45g6eusT1OumZ6PrtxVgF7KlAjSB1U3NHjMtgJokNSpnsA1zQ2nDGBP17rj8er2RsamXnPXAO42wBoOTQ+50FIeIn6mI8BfIEWN1vBKZjY4elbWWkBOU/HuAvqYOaHpD4W0MLzr5vQ9BsGBTVCsQ1zB+LbKFuDtctSyinn0qYF6FWqyH8UXqJEv/vX9f385//2/54/87/s/v/3PX//r9//4x7dff/n2+3//9ffffvvb3//z24+f8u1vf//t939++/WXP/6yf/lDv/7y71bLyKXk8Xyt73GxdmUdly7+7Nn8Fa7p2b0CyzMCW0MEahmaThZaM4TYQsRiqDpC8F9m3c3/srYafaIHElf6Qv7lUmQbBPwK14E1u29VMnbiHTQJ7C3ShZr6Q9rBUiF/T4EGBghf4ufBmXyU4wQVdSmBYvuxtXbLywURkgeBqab4x+YMKDvM3kiq/XGs9po1B9I8FGS3mcmy5QDFGFm9HSpagbI3lrtNwQgkaYSm+XjPpeOBkUwyu07igwzW23MNNbOEq0m398yNnPgyh3MoJMyucJxpEotGShjEqAUKiii+/Qlx5R1bcnJaCn5qZtYOyU2crBloY6qWtu7gPMWjtnvOTunS9cEcq0/W14hL08mkTktUzILA5L0+hmS/RpMkH6L1xbd3jXFp8uoeMLLVEkp3hvt9Npl8cb/UPQGzkPYXM6+mWFuaRXusgWdRBNC+XMooukIv0HXr2sYyT8PAOYbPLbVS9mmD8uBA0yi7xtgQS5RxzndTH0jcR0lAb186qpQjBNjcgU/SOj2EjXWVlqIPQNJQ1Yq85Cbshc8H1ygOqqmaaXjwaZSlpYQJ0gQGr6gOpe7x3kBeGh/wy1mgCsOvRj/pf0jUongX2zRk6Gw4V0EQ+cGZes2pbS0uS9W8sATog476tZNECummiZ3fgdrZQsiUtP/vrQxpkBxblLyIzIUlLzhJZjkB3z6V0WZq+SIy2kqvU+9FwxFZDyTlKripo/M=\",\"6RX/rJNNWpOvq6K38MAXoVFhdtI/DIArjRj2aDR68pBVnnyH3FBJJdDq9XpkBb6frDtcPz6bxjf0zpz4A1cL+sH7ctCj+KqhF7tl3iNPGFb4VEfbFWBBPQj+1YjmlRQQzhNZt7HXUa4ahsdZE962KfGxuyiGZtesupaw/Uz+S0WOQsQhbjoWwgLcNlCj9tl0+7s/AtBKMZSwMTwZlNFw/Qkht7aNhMdQbdPArep1u4jjqK8deSddehaXtihKpjOOvUnxQVZOVSAq7FJiN0e5TC1j03CsxAhkdgz8tmUe7nJ1DYf64YusnPVsJoiHB17K8cLQOrVzkiokCM7UvbbX2XIxYJDWNR3AyGT3BaU67o8f8dr426vmoguqeuHXhjtMhPlpF9pR10DCNeUaxvDflaNvCHn7jukCiNCavt6wEgO5nKJT0kwk+g0KEIEDQGjUxkmcs3DeT/1/AAAA//8=\",\"jJ1dkpupEkRXNBFAUUDtf2M3DpIfOpO+tl9n3G5Jn6B+Mk9mU00f2M5qJvyFGTUcydL7ccr+Fe6azaU4z610jzlP2FBk3CdO7g9W32tpBBtyiTQdyDn5+CoW32Z5FFb/+MX0KzdtPcXOym+PGgRhl07UGF9pfTWuCNOUDjPNRTEZUtqbMoeZA28s2Wi25iUeRE69OcERqIkCQ5QtU686y5B6OFJNcXQ69hTDzI09x3H46znHrJS80KZLvzWvCtU0fbW4etTaTAaYzo/5uEpxubwBqkhvSdy29SxoW4cyErxE/eonTzc2L7Pu1nzYPQ49t85T1iMP5gPAUHTCAjvWnQVj2bCx2Dqmq5lWe0WDWJPQrht3a2EEeqGtbVrHdZbVzZnHUgcJssRQaic6cJT9qCSr9lEv+d7GT6UqmcoKIt1AY/v6BfWoeK99XOfmay7I0Zr4RTU9LaWIOewUbeyFXinmE4H9z+ii7z+FhNChdmSk+ab7GCjiDs23Xt+daJHmYCgqjfNE5Vmjutsy9dnumUZBjI2USYezAfhyGS6KakmHlWc2G8O+BlxMYcbtqw2Md/ayyRdLo5zGs6n7o43veCd4eqLiRbHmuGLMraJyEJmRW0lrWdl9n8fkyfZJe6xuTKEx8L6oZJFJ8Hxkee3z05/+zT47vaxACsSsctdFgVReDiZfEaraGJfLZuaSzLktNKPYITmPC0aL7m+v9iVVKlUjfZxWB8qZmggiT/855PrsBKhxdcQyWJX7hIqbyWG6cOSPnR+wA41TmZPYTgtNwaK304KVzzlWujGQOupoHO1UGm0U1kL4mGyAs7Ab+lOrqhU561Jl7CnlHNU769TPwcx/z4nEJ1GkrEZBHzcsVy4TC6yWCJPL0TktSNDDDG4YWF0qU2V5IA2m2k8AzR/t4Qon6t7VddrNa93VnaCQE2mLI04Fu4xOHd/ovscHna7HhkvzivnNCItYUnOrgYGqPn9NhFtyDh/S6lV8CBHARlhkgWxdM87BRnjvv00/Pvrb3VUmcfEJfT0siT8DUL+qs4cZop9eygHNCQTIBAlmSWqXqenYXWYOzslfNdwpeqmBVvohg5suMaQsV1vRVd4sOwwmsnstqF5bmbgbAme10dmVmusQ+sZjwrlGGPQjiaVxhsOu5c/75840dOyCLmpH7alhN94co3c3CBZqFxV25Dy65qRzR+NuXIIJHGP/7d7//K/npxXuk/jD7OTYNpE6y8PUgxg53UEDqOr/1LS2jf9T72ecQdFVdre2J5/Q8fhQJCsc/chHPsNP6jViT4Pacupl6lhn7z2cnzyZtqz+YAPZ0Qc/7Cc14uP3aUvDAMegnzRn0LocNr1AYJan4tQf666xehkXaCL8eCR0vCa086Iv0yPv0N7bjHmZWnUMgENltjVcpdPUTCzAbbTFSGCok+uy0zV5kH/LNrLtsC/X+GgKupY2nMpdD/5+8serR93a/PfbINAXE9+rqraxS5igRKWVJ3C2js+/MWlpN5U9PDFpIXZVmDey/LQYH6Y4+7hiFo6AtjjPuWHnmRmljwcUUsMYRWQ51wYbbNfZKZONYxfZa4tBQMWyzKJFooc8MhByo+sjU7uf0onfOWsOD07El2obIyZRETIIo523FzV7NTWhjLzqMFUhc3s4X9CH4T0IcjJsO5Ox5fyFk4oi2ZxNlleREHMVakD088wynEvwWYs1iWdyWcJk5LRyi2Je9z8AnYcz2mG3Ka3iuTbocc2bmgPGtNP25lxxx5IzMaAc0+9itc3t/IXLIrRCeJ+zPWIL4BFcHJ2lEhsmgoJ1U8zVU3AbFS2jdqg1h/SCMNc8ytijxUpQnHWPz46dvpTm2B1qW4cO1Zce52NOKAlhW6VFAJ75cs9Jz4RM4JutHu6/nNs/tKpp/ebYI80CWWdqoIoXnp9Xto8iEcbtr3WjjRbWKY23IH9weOkU1Cu5iJRTMS1PskdJkdOyLE6FBl9X13sPwEB+9VRz6/3FdKoGBN331FvuJR+jWtrLwCUTiad79AO7x7RKsuAOD+3fuvrkniIW7q2fgvTX8uFTLI1QfxbnBklBBoS+LOWtwCrywIaLnvpxYqNWUN9x9hp2xcUh+2a55Ug3udi1W1OlcCQ0g3TlvKEuOsM/Xy5uspaOJ4IStKnqt8R2r7EtO9lA2ZIAMEgzTQFoKzdQcqXrLDo+1rmpCI1zjNU9afO6DUFqWfXTL2U7PKUA3pRsjeeAoGq0W8TWZgGicUvDaV5Qn/NZFs2I88bJjR9Dl0B3y6yjL8ofi/O4ghHTQQJwKJNLHBby+mVA2t6VIAfJa+oKBR/v6WEOPgTqTlKveytMeyNnHeczMgsOJ3qu7sHxAARsxMWEa/icbIFY2k4cL4/eqrVXhAWYzTLvNreiRTX3jFw/H5xPvF/s5n7izVNqiXWtjs4licPc2isyTT9KvvzlOdAFG372LcFEHwnc6uoQphvaZgZg2aJWGEDZxxTJfUdtzeDzRvtLTg0LtcMwleWE/25e9HVzFDX9OoheMOwnD4Q+wz14Ryx2gZnl6P8icW7ZSUq1dX4DIGjL2PcAgfBalRZWj7TR4WvLzvdijkfG2hxp+WAFAVCLiufBF0numYUNLSai1tN/PMOq64Dfd+KR6+vAMBLvp8K6iJ5GoqXGP3QBitt6nvPcak3XPIMKyMpmKAGWQdxoHJZBMJAPHp/79dKBE9Oalja7JJox7F3c7HhU1QGIzdmQhXPRKqOnnJtQn+VB7sSamINqjmlsZHvmn8KM78TsZz/1HZ32MuoK6bUcO/r9zBHKrb62InMFdfZWjzkWbfFQ0TaahsdZEOk7yJfdwIV+9+tdZLDY39dB77fiyp/CqV+l7w/l+p+abc9m0pDYp44R8qrnftjLlkHvk0PKUAOEPg/Pl+45Uu1tOWqGi47QCD26v7lR5dkqaO/5KF03Zh9DwsQ5vpBm0rlLReAVzViSiArNIcqOo/bWHRWr87KsIyAMKmKHT+FoqXM1K0azzlA+ch8DwYc72pecM5+VUGxLXuac6ahvVVqJpdwm9mt3yzrHOdi7wYUeI2DyIMryxDj+LcY2JktQ0wTAFQwdYn81+3ZdZsUqPVUJzU2tTiYaGfednFllOOWY8yd1+CsSLtPCrE5srynYeAEWBMjN0oc9Gz+p4p/Zwk31lDJsRzPcI5sUbdV+EarnngaayQgcZw+kHZtwXUCqU+pbsNRM24iNsfcyVdtLWfmc/eJk0U+VZTPpEarEJZ/HQ/F2N6P1uQ5a8+Pn9ufaNFZ/gAS0AvkXi+Kvi7OOQus0p27gDDhNV0HIUsY/7R/JtPBhJxdIGAayLxCAD6dmwji20XKS7iGPNxfb8jDjteYwpsmtntWf3NI31He0ekZzkM/KZhEtaFFtwoIkIpx6edZWgSuWOwk7J4typMKkocp0E6jyI7ueW+fO5rViAtM9jaRkC8yvkX9Gd5g0UlDPjqkwi2RAh1hh2M7bK9l24YqZdJxzmoEoqtPV2qKPmjE8xzEFkvIRfSIx1Sqdbi8thh6Pvq/X7/6umzR+ZvqCid5Bmd7zsl+UP447a5dt5GCnzebCGjb8/j6ueexIe8kBbhxmP9aroF8rA4DrwPp7M5P1oRYPpGpy0CxwViPjr2cq8uc6UplgUY/lRIsopwv2dmJtd5c9ei2WIeFTaMQuY+rKG5Ha9PwJbvD+D+NOWH+1DPiLtrE/nEZH+zp+p9Ws/VlUIIp+YallTSzyp1JRX4dQOcrw1gn6Sj4YZmxpDjL1l3/SK+jKDH9Ck5DuEM1Vw2imcWxJBZ+pLLOqsWlcNXUruKJbjs2ciBGWEMVog708fTUPrCGcg+zSkT95zDu6v4aszIckGVKoljcsIpp+uCyklkXxjGk1W4PAbnuDus7s9Q9CRwhGx6PdWXcqd+vEVnjtuAtsbakihJr1/Qhx0Wvk5qMMpW0gYHkrACLDk7Igq6TuyMiTbmbBQ+LSfNrdC5Rj2OwKw6D8ssEfe6/jdJW6j0nOiPWqY0Eot6Hyh0OnHytQeltj49m0n0rW8PAZ/ItF8LaYXBgMlMSpR8xoaVg1/cg/e4/oy35dkuJdYTL4KNb/V+N9RFHT4yTYbzS1/gxo6N2+hqYo/0OeqTA0yF5Xlq5tzimT9LysS+gpT3W1Qb7Xsu/VtOkZvyNF0hpl1n64UjRxGdFhaAZMu4wh+9JHx3XZPGx8Nxe9xbz6c13L4Q2w3Ot58D26IHz5coN0OS9L5sBoM8zns38GMfw6RRhEnS8v5F4dFGxc4pVVRQssyBlcl92oCu0R9xP6pyqKXxhcp9kWYOZbJl02giu11Tg0BTrKDb8vXc/3+7QOCKgLtl5iz1YXE2Ov7ODTzLLUd8g4ooLC1HvyXzzbt9Oz3cOqUoMg8rbcBpjaO9MShXLjvLeZAWLPaeXNmkrNhUq+1zToL8tkjzzrkXaF56p+fOKKYskn1Hnzco2YtIaNzePOMsKayE01Ke09ep+/LsC+LlN0e6ZlwqTpobI/C4Y/OEoEBZbsTsds5s2NENjWbYA2LVaXHLFu7nK8LN1Tmze4FDtR+A/pSePiKvhi8rpTWB5G18FYsYkkMxCjeSBQbjK8bEEO6FuHTyhQXapCxJoRNy5DYy7n+a4Tuh0lesFyfmDmLyctTI4Ig4mQgKjv1cTgP37dzv4PAAD//w==\",\"jJ1ZbiMxDERPFEDURun+FxsUIw9gPjU6v0E+bKNbYhVr+fqsvc7qeYd1XU7L1WE0/jW3MJzmfxYPDRWtLLelg3AUG78oi+gjd1NpmrMKdligvxEwh9Myj8oCQcjdapf04KAM5fp4Y3efMJDm55KjsUHdXDUV5yeszq7bVqYa0nImTdjAUAGFEfz0Jc6LitQ4qx91MDS4dSNxo+15iQTShCJ3Rt7K394Q4fPtaC6VuzfVNN+dfw/uw5/nE2wFU8Fyqlt0Xh3uxqx9ZQ9C59p1weFNW1s8K7QdN3ZMNHkbBjXMdMPIqhq7UvjdQl//9ZSqcqJ3CkJb3cYoqiwaeUxM0AuJ1i5V8eYMfOW3582OptKCxfqNrLozPQrLzNBgjLWq/S3kMCLCDKznUNolBWRafmZKvdceM2w+veSBm7xxRIrnKGtzqb2oGShT4A2SucRe/3w6CwoT54Znm7JWr5W9kZIWIKumTCUbI2RDQR8re2cQQve/NmOzezJjv98f17WvxiEuj0Xu1pvO+DZh327oHFze18p9cGKb4MCv2j5nJUNpa1kdf0BCGnwYcNjUBZbEAaYUTgZkZDz663RdOsJZEEExjO613ulxvJ0kRRdAWot0ebzzTkFv58SX2lU9BjmAzZx+CVNl84JMu+xWKlqB2ixZh9+jGgrlVL36xIgWBSN5g6PlQVnoXVuzYf8iHUYWKSmb24F/OJGf60TI/c2PdBxRkeOEDAYVtb4hhYNgotI0M9RSh+Y07i4ICiK1SP9X0WQRV8yrVv0MlG4F1UgaDvDAzGAk1rtPV8+2oyj9ugCiQ+kUPvnY+GsJEcnkbKF2qspiwtGzV+yaCWpz5/SXhxCHu9jCXAFLHeIj7aswgGjvCNoTIOyMBA2qhCtD+uCyEiLgpexbZkJ82OC85psA4Hwu+fbz5aNAx/lmc/3EFAxHLpw2nxE/kLmHG08Tj0enYkAtY+BjqzypG7BvjjI8Y9yhbph6kTfUkRcmuoBRPKXClAFqaw8Fh2fNW4kawI0JsyvOO3dUdq3g0w2qk66xIFfepoyuavNFbKXCPfgsdKp5oUhSL9/ACXiJvlKvW4FL3hSR1Gi0uAc7DOtmiNwJFMHLKcxf+cBWoQRGv1t6cKttz7aYc6hwsozKdX5AvuljrIaaBqVKsXg90Nz37Xj1cqtlM9cEhDXqM4//AwAA//8=\",\"jJ3Ljh3JdUV/ReCcQLwf/SuGJ3I3DBmwPPHAgOF/N1ZkUlCdFdVVIwFsimTdmxlxHnuv/U8/QOUutUkdkuhUTsdxeDtUoJUpJ5TMlz8/1crAC/uYPPhU1RnzeoQbHGlU/BcgU3EaH4dohLTik09bGXmonWI5QS+bJSbEVrnVkrc9ijTuhTNCm1lCa7OsRDzMXBDxvFudsMjYvgehzTszq00PUppzhVeM7UYqMcaVsJC4rb66UjLSsih5zk80Q8yWc+HNhe2qB0mTi4MMxad/1fs8ZwYLpvAM9yOE1GAtHxVx/NXN8EbTruvNKAXw5xMRPP5cLMHJBotD2RaZheKMcy0W2DauGdH+DNpbFoCnNNIR2nfUQ7CCzixQ6rT2Mcj8T8zsZ9ZUncQTt2d/Qi0/vB8pV/qQ6xgFLmFPisjJyH2zMzFm3iu6/dLh2iupGISxGkljkB8BaM9LpL6LpuVEsqwLj+kizS1oTSPuBfnoiWb+Qlr75K/A44gEArzXuQkKSCjVdxSUBdfMakqKYVOoadeJ3Cpdkz+jxM6nWCu+fAnFEcQZmJWZwgRlSUJ/YQtdxfqo0TT3kMn4V69ZOmvBqkEWqgT5XG6LzMKPlsTNGadw0LwGrV1EOQwG7zISfJwwnte6lqXX2vCRX0w5IkIlzb9h3U9uUGRnMJhaeeoQuvFuMa+lFtGC3KXSea/UtjCjpIyKXSTd1bnHNnjIIiFRi/gsjLNZ6G+bYV5tzhYAdx8ubUQRETOvagou4zKX7LYIqBzi0hS0VtccS8fBOGYxe2ezUoSv6vG+505aJPQ6h5xtYPrKVhglG+M6JY8FW62RH3qJLkn3TfiFucPbq1MlxkHvxkIQ89T6PqCIWP/u9jFl7TNLcAM/m23dWYwsVSn32sygXcdJKCEtw4IVd8NpeKmwB/dgzK8N9oP3dkbMJB9L73vnOB2CbdmXc7sjYvoc6lyYFsfsnKP7idl5rPMYH4zszdUG+Nv0b71orAn71Sz3Ore9fq4ZeOKKTEYqcs0OUj/dv4s3Zsw9Ot5vKpxMoRgLWD7pnGMv3AjSiTUPMIzWJKqMLsafn8oUcYI2ud08+vyVLNmVIFPpmzV6b/ypcXaOxlxLiU+2OK2upHCd6xKFVmPpq8XEOHXM9kropU+dFkGTbWGHSlFGzLsV39iyCIuMc/YxF/bAL5/YZ8rRplw3WFxH17qH7aK8Y1wfbBOlIZq1ZsM7LvGQhS12zMJT/fAUfQRxBgFQ3mcqFAWQgPS0WII2rAmF0k7e0esx/PXveG/p44rujqesEvW5Ho9qnIDXVgRuLSv1sQORMaOULHsb/Ac+tn6NKTxJbDVCyeZeLUvzS6ChZB65V2Nbr4jrK8UfGe3CFx0mwmU3x8mxGptLc3FqCCaPUuPCa7MRPOqu3gx00kaMxHaFZMj08zmuLjmcVVPPTGXXnrxlOoe4MhP13DxNBTNSGaAWjtL47Jrv+UsF36YzhgeN6tI/rqyy1lJRfTNT81mSfhZFjww/w6KEVd0qGlph+JVu5zIGOr1vrzGjneE4RPp4jo/VnDIgBMY5GAhjzReh1SwXKO2CuSD/yJkXx4qdmNCu6F8Czqf+ujyfSOD46ZZBwey1XYiOegZqDaxLLKFeynmE0FRS4aPSh0yWHFPhI8HtQZQgoqrWK+zeVLFiuAm9VJ3tZBV/pbu+aX+eqOY5Yl7pNbrq0nu/D9il+W6s20TWHiUnq480GHzA6yUu+fNZMruZneNjsvYr/6IkiU9BJtMyNrM3sgBu4V3jQiYuaX6l9fYL2bvnuZYCG56w6Oi8y806X5i9rc0v6bgPma82o+32ZpFZv2ZJyUd7hfffZTTPZV5Gj9fuLB8HXoc60w6YMi4xx2gis5c+m3H85QCqo+6VUW2K6QFz8loou2403ow4XZOS6NVUIwERT65vJYHwpXoAWydJOVHFfh938cWsSzz7oIiOY7QNZWt8B2V8xZHmOsdwiB1hBykgmlVp/rwa1M5gGi7T1iLmI5Ph+cWxuumxbY2PcsPnxFhVqZm11dZys9VkXhKcLjLQI4tUL2x4wRst28Geit42D3sztv57yrkoOe0zPcnwNKNZ5fbBfuadHGkvBc3cPc8LClL5zlwdumNrrheghcebB3BoikzvK5ccc/cY1SpFytIuT8q6BA6W1Ooq6jpksvt5zSN4z65zUmnND5knxiBdiUM918bOV2aq3DRvT8d+EieHA29m5He2QQWxdYOsesGy7dlLavmrpcVbx+Pgc74fTq1msXC6aIAxSsy9FZlHzaJnj62FIG53/HPpiF/iu34toU+eVM82jACUH/INYYQXkoN6zBccuE17EeHxTkVYkd/oM5epUpKpFpOoIJAk58ZID9acO7LdMs/Zzha03/z1r/6+f13TceB8zNh+fqy8Lhkd0Vb8CExSVdy7ZsvP4YjI0ZlKq5jEXvZW0lSpeX38bn9eiZfPxLvl4e07OSPV1ozLDmwdF3/MSyMlUfUAfNncI7p3QTrSC1IPRzIKZHpk9qS22b9HghXBizaZijfzHIwbSmEUmfYb5/+6jbqvjhLcBzmq6mw7+kXs0HzZFbXFFVFtAAeiBEwRJ58icu/mFurnFd2sQLn6iJlayn58J51rad/K2SmXWW8pwpNz3iJ1Y0Ny80buTctfEWQ+RaghztzSd+a80KuLBnIDcMdv5NdQOSjX3tyDnOIA52msPZXOF+CDVWp3jsarXxlJHVwuE77sNzygVpi+n0zEvSVI9XVHD8OvevL9xX89//t/z+/53/cXf/zXX//jj3/77x+//eXHH//51z9+//1vf//3H7/+mB9/+/vvf/zPj9/+8o+/7p9+029/+ZdQJI4xYhIK3crNvNd2qaL2IVafmis/yaIRErWn5hgNM5nSpdLcOO8stONVMPiWIPmu2HqFYMPl7BpSgqQuzcqL+rHle5vzJPBWOrki0tXDPdRSfSHxCasBQONb3F9CIku/8Pm6kQdMqmuScOI4veNt3Bi3q2RL6FSU+P2MKMJr1ybRA1EiVy9unj6mcD9pHmF37LDbnHP7MqgZ352CmpjRSGxJ7a2xxeghkvoXfLHJvMSfewn4WmfHk9VFtSb9c55bZmQkZaPGfFxsvObVMc+QLptZyl5xCQB1Ao1BJD22XXbMeZjQAWLTDndE3HuCsXqL2/3caKxicGAru1yulTIGpp5ljBlOG0H7Uq/bet6ygeLaSdWavIZ0FU1rewIEItIJbl+LWViQKbE6G+rI1ayBJ7s2A3a4YCNvmrlxls2v4vAy7oNCKhYXgB77kvykYDXQBo65Qm9+oBf5ZSHJe9N2mug6SomoRIrRqSseKeqMYpE8s/CcpA1szerP3PLjH/Ccd2mNWIulVnsZF0Do7DMmE6zWNQebvZSdoyCswSGLPn4mrKKQ9crmPzppT8a6QFVj7pgbW3h39oVk02q7mFPziOfMoVrGyom8vpV3VOZMOn8BQ+dMs23dzlDrijKkEStW5ZZPvHA9ojYauxnNNPJsRsKeqWHTldMX2hj5r3HNRtlUoUzZNoxXxOGq1Abfm1YYJ1IrlhlIbnr8eCB7lSWjmz71993lIRWVY85YOxSuTr0NeEtIa41vDva9C5eQWMfYHIKpifHK0Ky31tQYwz0EWpOWSaYZmDKRTMXuOKatIMMYRdSwsamVtJ1BQxzps22XaDYkEzeromM7m4YK0FkdO33yhWbyMvmg02JGVcWnLY0QTJ8VNZDlpBHJRDhzVvUBKX3bFc4wxpHFLefmVVQszp+HA3Pm1C/CcYxX0zwAiehuZMizJNo+nLosccWqcchBXdyKtOSDP0B2GZLltgwRF30KCz3QXfq8kCAsAxFO4KbECbAklcLJTn1YhNC2pqcsVXPLTr0bSdY4ckTQFcehO3oWfQx9CBxNCFxSiDphZS1GzlPkZMlD1uDkceVSa6w3iXLtKxxIKEFnRI/OAUJgi6s0ijjduAfGksZ3n/8iJUlVal+ZG9NSrJCeIJ7oTYKOKUNB5vkUzmFso4PQApTmcTJ7AN+C0AJki9nsKpvnHevjkfw+GWxsxd5hiRxFfDhoPFtMc6t5RFYOB14WCuQT8ajcgCqs6dgNrOplEsksLnw7PZfYYGQ+hTo1AWiEShXrY5SMwmNkxcsJno05SamT9SCpNRWVuLDM4br/1FrizjzTpDUpAdzhvN1QlriOSRS6RdWka0ae9sj1ErZFGGHRfpukyuabbcHJzJLkrhklEjQg6mLY7qh6xPrRlqALAJ8M3KqSqkEvKTGMEf/mlLGTAbWeSzTGS7GP4EGK9PPd0b9r9JTFnxokN4jAP9PyBGac8l+T1GTXHZdcnB+1trHTBJF278mEj4Mul3WzDrShslYxM1W+YhotpqvTLstTv5m0xW6Z+BwBwsfa1UhD5iZWhhC+Em+RvHXh1fUco1HleAoSKecnTOTw5eNjHLGCToQ4SZ1XF7A4JaciRJ5mkrXq3hXYgwjSvZWclmh1JbV4ZyLObXPGiog1s/Pfji2lFI9RCTDTb2b7pkHGXEdzG0sEBIaCHnHzxWXuARWrjF+TMzCWGLOuIm3vgDko62ne/RzPsu0hJYzt4xo7a1POsG0k530Dj6/1z2cLz5GPji/Gp1BZVivwyIGT2H5W9vJFqjLaNPnGyUGaw2x+dqsKVlt45prRBL2EO64h31brhcKlFrGhd8ryjLA9QBIThQFlm9pJ54L7Ko7fJ5VRNM9ffzKK47mV9435cYRZaIWpEr/HkymiE31kAlHqd4bEG1uq1umwVjSQPgzJHRE6qfW2xVrsByRtiQe0x9jlsDZVINP1omQTVS7ZBKwXe5y0zYHaRxrnlVOTZK4srD5e/WMnj2cC9XyJ7ylEv20D/gboLQcVdgqPAVbPHl6Tee7GZ+9pAkncYrwhQ1kDGni/NeaKwE/ZMznLj8DNWEXutqwr4vgSs2LmWZ1OxiovQnQz75Fn6pvIOx8oPRVt/pDmjyh8BAS01leTtkfrNIsomuqnPpuLFhztkcNE1ymVBGK95YCkjiF9d3dZ0F5kOCBMMW7HVm3bpHgcBzuLVtkPhSL+tCBk4uKSdNvSTKN1hTMB8Sk3EKXvmEqtbbuuKa4dX8uMGdJnhTSdA1PH7FXNwCb3VguQTFKgAssrOvCt5QNDsTgaKJg0bW7A4F3rlNp2CYvVSKQakWAOizDyFo7nfFrvjeBWv5i3crnQG+ctMkWYnL8cn7Sye2XyADXdyQsaqudppJ5X6QiGlxSrnbIjBo4u4I3as6yxp7V8syZYQBpiMrfenmVr/MemiNPz4w20c+42QJDnU/UPW2vvniP1M9e9oy5uDTIOoj+l7RTLbTayDGS0JS29iaBATIgG8YQGyGi72F8MXT640Jz53dbuLrbH7MpIP+2CanhiHbtEpQ3sxdCHxWj3YoqtuhVJKosgt5b6knsEz15Rmt5opW19rhrNvIadOpoqi8wYY2mOz+olyuRor/plHjnr+NY+l4gGhSLiZcTSKElrRzUuNToi/3Aztceh/uef4TvIHzyvxZDyWowgi8vnx7ANz0bF5MwmFObR+Q9Rlkiv03VGk4ocGeFca3EciBMqVgCPYdBZz+iE4gcA83s5hg7weFbci6YRfNizZSckMUhR6gM=\",\"SqUSZ4Ft7RU3deXgrbwhp+OMxs8DQ9fodJViyNjC8i/LYUZxXmLU2BqGZOZNyapsvrJ2XOSSgziV3bE6Cki5itas4smXQRUZYeh8gLnFR5DQxLisqD3f0rr5qNJNLptniWCpkfrFONDaVoxQPSty1yrH7xKlpSR6xH+t5uq/lLU7noTHvRymsZ+0boOdv4pj9ExSPhw84bALC3JGmzGQejf20+rzdgA/fHpLIQjfzo3NUCLdpa3q3L6MEjpKoQkyGraBzjUZysRYld5nFKL6K79O6952G3Vp7DQLaFHHoEPQjyFPGWBulRiI7zxeEvi4S/tKKvb4n8FExA3TqGMVzRsmiLbovqxsPFok9QNp8FgbA7RbVbqEKphZOSBf7RYGKMMen69MolEcDuOjt++LKPMijE3eU/k8wAK7d499jpT0M4wJE6F/Y/vopc0v0oOFhL2U2eL+z4qZFya09HzCl9nanSHprdt6N7gQRc05ynQj8CDnZNGt5p5S1Z5cybGjMTbP3pryxGmq9KWj3bS1FPtdcnh6LZPhhbajRGbGz2GM2ao3SpiJo0qJHaTlry3DyenxHul5yrjEnmFpKgZwSi//2vsi4GCErpBwsktvtovWJJge64I3SXVd0lq8x+b/31NV3kvBz6Jdfq5tlEhhZlBfInSQxnh1PXO9Mr2xibETxRX9LPvIUDw+b1UbgI06ekQ2RjwS3m/hY0bFM32ZvRYxeVijKne751H01QK91vRqdehtsZwrLbWl+AHsaDpleh+zO9WxE0IVL+IdDUlEe+kbLLvxl334jePAeGJMsVQH1+/pPQfG5LuOk6MyjwFKl81YEtReXjdmkooEKAjOW5wh1IUtzHmMo8cXC9fEEF8/DSI17XFoZXbDTzmRoykSiHeLCK7GRLQ4NqpslACaJCGFz9oPWhkKrmS46BrjY2rUq0TLvYxL9/ZxXvHcM0j2hU9dh9Qnc15UWz94FpzeutgznbgLys6LbONvnVIOlzm6sWnoV3RX1lVnXM7lXNFbemswYqFPFN8lMptAlrgGTJtc6zjJQSxVNESIldhLWxxb8v45xpz2IBIlFydJlVZXH+Bnvzx5aYrtYqN1S/lpt1Vf5Uw51qQD21VpTLcWRHrAN666tq0nOe9lvdGurTvfYx3CehQuz149y1Hpexr2jQNXFT1Hfze4hFyL/sX3+Lygaw3vk0abyZ4/dKEC2vedzFJHNQe9SIu5hVTFGKo+t2IYNnRyLaqvZhcNIE+v0TLWOxkXPRQsu5V1eY6w4etQBFfYhyArkzJK+809CQe6AFHKjFtAAv5AxYW+oo7jbonlNyEZlpFPPBzRczPQc6QSu/8xoW/FZ4Qvc8YYgjjqeM7KjK00Lpw6OKz2lRz3hfEmNe8HoBTvkOMWjhscXsgUL/2M01BlFOMAZRAjnuwCXU/IAnF1gnwxi2iMmU0SNdyygM4i626kOP5AX6JTlXLpQoRl0T9EM2aBpbaZZdfW6dVq31vhmiA6k7XEbNyaw365SMMjQEZ6ZKQy/TGeci9iHJTAWxHWa+4/ty+2w8teF/HhAU7L74sXe0cbQWkzNfV1tSehcmdpO1ZTKHNzrHoQCQ6pgPOJUf5iBPY+Lkl5rvmgGSIvCY7ZWg6D57s1cMjLiLJ3szBljt1iM4AIp3jQdUKRoiPpRAUZXlsuqqG+qvAxd01b5TCsJSIk+qQDT4ZbbFg8kYTVmVhqBIcjJsfdzThsHCfGVVLW4zGNIbAOQ8yegM/4RZCOrAhJoNgaJYyaIpa2wNWTWrN3AiijMmVuXc351KhmWHCruoG7TmnS7Ac0H/vKvTTd1EP3FN+LicUWEgFlW449FGFGIvqzLNuCF4CSVuE4N6d6NLV3zm+haUobI5Jh+GHb8IyH3jy+olSDnq/W3vGBajsZW6733zC3Mz/BzsdbNbc1m5FzfSQjwFCX6LZcuy4LYSxWeJksQHclYUNMIswR0Zg6Um9vej6MyVADkDho7eYa0d+X4fbHwfnaJfa29J9TeEsuiNGlh9ipb89sPhvdHe9l+VoPzHx8iAJEplrWo3USUxWEfTM4JjTOl4I8aKzfyRv09iguGrUojKq0RdbQd7aopcGqE0TkNiVMvZGkMqJQeCZd1AXe0Ijm2UX4ZjQ3g1zOAiniHEgeMBwSU2x/FonCsiipMnoE7SPitGgAV7MWYOOZllpzfUQKPIt/Uim0m4SK540l2OmokIPpHooCUn+WuqGCstXJo7mPUbQyP0zdHW0pgKwMHbp0ilAgcxWMa7dyAXLO5YigA3QwsvEsM7ZOprYUv8pIjWRGdRejmvnYa9IXs6jjZUjuIIzjbyX5LEUM1nX0ScC8Xhe9WU8FBBXC0M9LtYjmYHfDSVj17QiNlNzrHVjktk27GMjEI+SctrGIewv5p3xjJlrOTD3OklC/qju52u1vIuJ0SETi7BMe0LapeEHS/rSCKwnQCTNmtbhXYMi4kjoOTvjokbtTFvoinWYIyX94G5FMQhEqyv3IbYsXUHutTjHb/Kxxa56nvoG7LSGfLsb+zbnH0PiXWPYxZd1mSCmz/ti9TvVycvS9VVLPawgkTFxh/8YmrfQy5ow67Cf2dUmpc9OxWenyim3Yb2lWyjTNXVotVUAdNgElm3Tx5F5G/GeH4KqWEouSCvzViMGKS5dKzl/+wtT+amtHlgdTSrI3WKxF6IBnHe/aIk2h6okQ72lHL/EqOx6ytSA7jmSrizTqk+YKN0IUkqOZHOK9IYQu8dFqAJS1shd05jlh6QviWL0fm1C4DOpwuhMrI44HoWzYCF9IAyzjVH8zMdT4meGH9qET/WvSOmof+1zcxk17n+Tdeyc4K7do359t1a0mqM9u7uEkzETV8sqtWHcuecMT8NFqhEMjO3WvEpbPT1wnP6hm6oZSPW8LnNYa6wywOzLrAnTpcarEe9Uthh91pfY9KhUBV6bAw0cssjjlY+BVG3ddMFEVFWVg4j5JAoGBEuwiLKcOUE6Zx3y9WnVjbCmq2QEzTD0gaFLl+JQy+nlDGEn7qokgr583e+W78CfyQcdEtNF+OmWtFLhDdf+RK9tNRe+75jcmjIPg1dgjvZed9qKF/PUsK+uO4GOq+SJONVEJy+7k8zTLmHHfmcDyT5YBdwjwVldRX8WapaWl7/a+bNyLQZTmlCRfKbZiU42Nb9RyvLepWJDTkX0rjophidkhaw1G090iJPQLsu7kS7L7URjPXrV7L5gRna2GlEl2Fr45UVBeUbgm9Hk3LxIRHGp1ch2PM/YqeiLZvc/U5fotKMg/PJIlMXYeFoRROsTHrJaT2rK+OG7e8woB8JdUomcnVkba8eK7OeNAQM8I3mmZ9lQ9V81HYBl1IGuaikSCovEVN4UUZqfWi1UFHfNPNInfIYMTGoTm9CsR46iB6Sy4yv/cJP/p9A/oHqBmFbCMymL5sOrwu1PJNrA/4ob7gPucZUntc4y4Az0Toal3XR7LR5G3s4TCZEjVIWlGlBW+zp+6xHpCt7Sjyok7PsaOXH8jm5ZhIGRmtxuLj1VzsnjwwhnIC42cgrWu4hp+rJn7NxzmB5thjRMcdJQscYFWeorWJ/7ULq0G7VaKXwCV8tY3iNi9RhH8kZavIUFXITBdYouKVTj8bYDjq7qYnNccsnGz7LO/cOCI1Bm70sfEn6f3J41eH2JODDCirrMssWlynzvNEq19N9jo1QvCsIv4RLnSLorZMtsRL4hWuKcsi20RJWIXdmV0r5C5VlYqThDHU1MlGe2IO2fUauQcNZx0+XN6MlMvwehp8YVPCeuYx/vwF5mFnedSNDznw8eYnnfDTd8jhpbXxqwDZpWZE4GTNsxXQwmzta2KDo9n1hAIqTjPqAaJo+iuxQCEmDE+CBU0e5y6DR6OiKkr2L22aFNHSFjleStrSbV7N6oC67IKkLCfiFTyHvKtYKlCZbZZq0X0TQKHu52rTviuFlalAYMMz0c7yPlpuBaYAQEuNgm+8ohfmuWR62gxxScRPaoQGo6ZHjcjpYM0kbqIBF8HkfejHf3HI/r/AAAA//8=\",\"jJ3dah1HEITv/RTi3Atmen56xu9igoKECbEtE8sQCH73ULOrgPqbE50rg3+Qtdqz21Nd9dXrGmm6Qyd1b2mDmxjVskfLSVikHrYAuX7iGOKShpwNvm3StKQtKO9wOVk2gePa5ltx5dzPiXISX1nFkzPMtcPIEnN3XC5rFcVRUQo8dyPytyDtqsN+jfFm3cl9dqyYUsHWZ5/tMQmdcHh03zBcIzftgMKIItEbWUrBRP4KBlwSffxRds8G+EkvDjJy6WI7QBPMnvBuIVfw8OCVho95Wax79qfkshhbEfLURpRvZTkkFd5U0g1tu+nzMMEN6T5B/SBz4TjvqMYMkZQ2yyRBZpZsc1DEblKw4loxstOOH04VKRfvUjkfg+qSewUpC0GmNXmslkt77x1y/1q7V1IEtW0/TjYdKKHt7CTJRfLZeM/3cqw9Bi6KSCINT/Uq1WcyYT1z5apQ50gQyJoEGuDMm9e5JfvAaLsNVewTKd59YHml7WmDZ1Jh6thq3l3+UNyv2jyxHkQfA4PDf2r8bbfMLTrYqdkKx/khRhPaFNWdEUXj1Q+BejVQy1+H3YyWQkGDVVkQr63lUiqG+9lmw4xhSlVsflMCRJxK0/R4J6Y5Sq4QZkdtonbHfZQ0EVRS2QYMM5o8etF2X2RJina1mjZVciZYdfRitG4qqyZWQPpn3Lpvl5BzkM6WRB8waD1gnR4efafavM/XDu+5x6SFNILCrb0mFPKs9tSn3lFKozSDmkbiOsIb7mMTPB8MNVvl6Ph4CKiIb1baaSMlrA8cMOW9jXCMLHoZRtRaXZelksyWYpexFuyJERqdg2TSjFahmkoEKe1xnGlWadug4IYty3Fk7CVSHJK4LzxGaW0ePaYqstB1jJ8NTQAZHxinkzSL7zejqHNYsOJBwZQaxmG6N008UPuaF3oeu3U9PIM/UoEd1GmoyEjROVDRRGhiUsPX0s+5SfaNKUHleWgrlLk6d94LpciLHK1M2ens3cYN81TZx4DjR8G44bcMsF2VK/DwTq3cwkNVscoUg4XFlNrB1xdnqsc6eY1HaNkobhN0XKW0BRsLF1GP4JKBhNjJmStxSQTJaiuJpkx9zGv0PWk3aB3mkpZ9gz3Y5S+gCCspoQmFqOkiW26fZIDN5jm+WcT9LdHoUBiuXHB2lBWM4oTbqfeoW8w2Kr4RsaHMVl6LcUrmsNm5IeqKv0Wnp2tENPDOXH60mF2w2lJCIF32kSiOrbXA4AIsC8sI1Wvr2obD/TzHjVZqtGtoMYBjSdZpB7u2rF6W0SNHRW/X1G7JmzCmfXyY1ooI2lLXcwLDiDinNUoQVZpkQnJLAGKPKBTv3guIEGVWeAibkCEI25U+N/DGileOnsilYpOq9lWw7NSl3dG6jIXe/dXcmH4yNWWwvbt865n8KfDweeK5lg4xFbMgElBUUb2DZXY45Hc3p4kcOyJnVgUuRLCN4Q27x9JlMkqsf6/CtGL5riQP6rTVr0E8wobFzGHgNHHIOxRjftp6xVRKT52FsnBon7i0Jc/BzDwYAB/jrZxx3C0ZyXzX+SMjQKmHWTw+iJZQJ3inq3oeHbMq2ayYMiVFDHjvqi+eNPiuY1a8UlS/kGjRRfb3pE601hJx9jUDdhWpUOeg62V2HzeYPoWdVfc0BkiVM5aYrVQMJhGmqpPvTDC9qB4zJgP1FozEMWkfHrFz8bu93/bJnV89d8Px0uXVj0bOQ2+jg0tV444Cb1kEGPnocpFAd9wL62qyzzGeYqlOKCBJsEkHN6xJ84fHRvWmcWd95RYT1CQjCn8FONxV0jYA89rQEk0++krza03CduJpLfopIgJ5+Ojeo9AaB4r7qyz1XUWjvG3xTC5VXdabGgMCu2ug7GSrDulySDQHfgDH6vN/WxcI8B2r6qkzjur05W7xYUpb1RmV+CqaZ43EvHXCQYFdUt93PG9XCaN2A9Brw9R5BQyORNYODBcnK7tRlMPK7nD6a2kXp8VWnJYxqU7VS1wVbb+HLbwYrRaHLCquaL6ByWkmdn28smmoxQG9FFNNSWgxL63E+1ZnDo/7K5mGB3tZtBSrcBM1aW/Z4WRN02IGZtsjlktr0+A87MLqRMtItHxcRdFz/DniWdMbS96yl75B5MtHjJb72dqMl0sFzS3KKwLFdLZJU3vUdqXSsrNgZFEzEra/4iTUs8AS0fiv11M8L5RZfBTsG2VjQS+h5anzdIncw4wekTzHsjNBIdrUXkpK0/M/1otYS7nexIVdLLFSU2SK6vDqN+Zfxb/E8kloohSdCVbXkRA7se4Je/asZ0Hl095mthG3PNua3hUyCk8Dm13PdEQK5aaMTyM1pbQN1saUoIM4ri6NiRHQRkJ+Xy9R9KWutH3BwWcBZpnh2EUzsvynPSFFeVoJ/RbRxJZ6hildvB10sYs/Bgt7Kx0FCGhQeHXnFiJutT7PHG9LyW2CDyEMOIuFbdic0bJwxTRWhuUI5V8B02lRu9GPbRcgx5xxfsvp7Qr+HGfdooVcL/5aY3j3WseQUtHY++1aPIngvdbHaBpOo0EjqzM2Pq+0PEhxnBGIr2MDtEEtX7HqQqLe9nudktiYDCIqOYJ0o9xO/r428Nq5lRBSFamlZZzJQHY+l5FW/QYTw7EBKR4DUAdcISZqZ+vg0XPze7wcZh3Y/FoXTCJC44oNMF20ObY4iimKCNTBKAZ6V2pdOeH4ysy948BPHsv/zOp7n73AUWyqWYDyaY3gwkwVe9MoT4rAoRg0tAjtWIrp2P6HYcKausdiosm8p4GjoI3GfThimwf1rxVYilVHnyKFXNoafS0SsVPsBJIVk/6RsnhF0ZIrLxIbNxV1G8C6bVDTEpb4Ah4mYnd/LxiyFSPPN4QiIIi8JG9K1senYO3cWGjtz8yM3gR1MuEwRyUIL7OYQ3pqip44ie1qEUYoWmSC87c+rV9/fbi7+6S/dfn6/Pj05fLx7vLy9PfL/dPX358eH//49vn+4fHhPiW7rL/088fD56fLx7t/1j++fP/r+ev3l99env98+vbj8vHO/oMZXF6eXx6+vP2TD/pyvz78CwAA//8=\",\"AwAhN7qh6AgCAA==\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-12-12T22:46:00.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "tShgdlSCed08pRbs6S4Wyai7QbMjmXW2vp6GM_xriNk-1734041760-1.0.1.1-OI4BxD3PquxWdLtH6diq5kXy0cizUmgQmCoEZy5BtDCba8jYvts9ysFGzG6UkegOec6PL6kItwGVSju2AUC9Pw"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "HOO_agm3xX8vUXBtZDIPKKinOQKFBrTGfNie95kf8oQ-1734041760331-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Thu, 12 Dec 2024 22:16:00 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "access-control-expose-headers",
              "value": "X-Request-ID"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "101"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_867db450b64cf3727215fb85a3efbd8b"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=tShgdlSCed08pRbs6S4Wyai7QbMjmXW2vp6GM_xriNk-1734041760-1.0.1.1-OI4BxD3PquxWdLtH6diq5kXy0cizUmgQmCoEZy5BtDCba8jYvts9ysFGzG6UkegOec6PL6kItwGVSju2AUC9Pw; path=/; expires=Thu, 12-Dec-24 22:46:00 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=HOO_agm3xX8vUXBtZDIPKKinOQKFBrTGfNie95kf8oQ-1734041760331-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "8f111385d8d494e0-HFA"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1154,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-12-12T22:15:59.576Z",
        "time": 1096,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 1096
        }
      },
      {
        "_id": "ee2f8c026b3a83c1f3d2f8dd2758eefe",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 3777,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "3777"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v20.9.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-retry-count",
              "value": "0"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 498,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"gpt-4o\",\n  \"temperature\": 0.1,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Context information is below.\\n---------------------\\nfile_name: essay.txt\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/essay.txt\\n\\nAlbert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy.\\n\\nfile_name: instrumentation.test.ts\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/instrumentation.test.ts\\n\\nname === \\\"retriever_query_engine.query\\\",\\n    );\\n\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"llamaindex.open_ai.chat\\\"));\\n    assert.ok(spanNames.includes(\\\"response_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n\\n    assert.ok(retrieverQueryEngineSpan);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.input\\\"]);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.output\\\"]);\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.input\\\"\\n        ].toString(),\\n      ).kwargs.query,\\n      \\\"Where was albert einstein born?\\\",\\n    );\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.output\\\"\\n        ].toString(),\\n      ).response,\\n      result.response,\\n    );\\n  }).timeout(60000);\\n\\n  it(\\\"should build proper trace on streaming query engine\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n      stream: true,\\n    });\\n\\n    for await (const res of result) {\\n      assert.ok(res);\\n    }\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    // TODO: Need to figure out why this doesn't get logged\\n    // assert.ok(spanNames.includes(\\\"get_query_embedding.task\\\"));\\n\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n    const synthesizeSpan = spans.find(\\n      (span) => span.name === \\\"response_synthesizer.synthesize\\\",\\n    );\\n    const openAIChatSpan = spans.find(\\n      (span) => span.name === \\\"llamaindex.open_ai.chat\\\",\\n    );\\n\\n    assert.strictEqual(\\n      synthesizeSpan?.parentSpanId,\\n      retrieverQueryEngineSpan?.spanContext().spanId,\\n    );\\n    assert.strictEqual(\\n      openAIChatSpan?.parentSpanId,\\n      synthesizeSpan?.spanContext().spanId,\\n    );\\n  }).timeout(60000);\\n});\\n---------------------\\nGiven the context information and not prior knowledge, answer the query.\\nQuery: Where was albert einstein born?\\nAnswer:\"\n    }\n  ],\n  \"top_p\": 1,\n  \"stream\": true\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/chat/completions"
        },
        "response": {
          "bodySize": 3175,
          "content": {
            "mimeType": "text/event-stream; charset=utf-8",
            "size": 3175,
            "text": "data: {\"id\":\"chatcmpl-AdllR01sQ6i5ATLaZMKdOTnVy9bQR\",\"object\":\"chat.completion.chunk\",\"created\":1734041761,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_cc5cf1c6e3\",\"choices\":[{\"index\":0,\"delta\":{\"role\":\"assistant\",\"content\":\"\",\"refusal\":null},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-AdllR01sQ6i5ATLaZMKdOTnVy9bQR\",\"object\":\"chat.completion.chunk\",\"created\":1734041761,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_cc5cf1c6e3\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"Albert\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-AdllR01sQ6i5ATLaZMKdOTnVy9bQR\",\"object\":\"chat.completion.chunk\",\"created\":1734041761,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_cc5cf1c6e3\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" Einstein\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-AdllR01sQ6i5ATLaZMKdOTnVy9bQR\",\"object\":\"chat.completion.chunk\",\"created\":1734041761,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_cc5cf1c6e3\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" was\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-AdllR01sQ6i5ATLaZMKdOTnVy9bQR\",\"object\":\"chat.completion.chunk\",\"created\":1734041761,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_cc5cf1c6e3\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" born\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-AdllR01sQ6i5ATLaZMKdOTnVy9bQR\",\"object\":\"chat.completion.chunk\",\"created\":1734041761,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_cc5cf1c6e3\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" in\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-AdllR01sQ6i5ATLaZMKdOTnVy9bQR\",\"object\":\"chat.completion.chunk\",\"created\":1734041761,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_cc5cf1c6e3\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" Ul\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-AdllR01sQ6i5ATLaZMKdOTnVy9bQR\",\"object\":\"chat.completion.chunk\",\"created\":1734041761,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_cc5cf1c6e3\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"m\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-AdllR01sQ6i5ATLaZMKdOTnVy9bQR\",\"object\":\"chat.completion.chunk\",\"created\":1734041761,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_cc5cf1c6e3\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\",\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-AdllR01sQ6i5ATLaZMKdOTnVy9bQR\",\"object\":\"chat.completion.chunk\",\"created\":1734041761,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_cc5cf1c6e3\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" Germany\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-AdllR01sQ6i5ATLaZMKdOTnVy9bQR\",\"object\":\"chat.completion.chunk\",\"created\":1734041761,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_cc5cf1c6e3\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\".\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-AdllR01sQ6i5ATLaZMKdOTnVy9bQR\",\"object\":\"chat.completion.chunk\",\"created\":1734041761,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_cc5cf1c6e3\",\"choices\":[{\"index\":0,\"delta\":{},\"logprobs\":null,\"finish_reason\":\"stop\"}]}\n\ndata: [DONE]\n\n"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-12-12T22:46:01.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "FaLVT1j5TBDxRp4ZAQgXE6xqcYskA5h4SRrxw20aTAo-1734041761-1.0.1.1-EJKQZ38sv9RZC9UHSQL9YUrnGOpvOq2o47vZXRbZzcXV3JXxnT2if3gorAf4l0fEQJTPNTcEUD2ewsjfJjbLHQ"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "V7aMNC7lkz8rpUeTnpKIxrA0HZ1LXQMNsH7W2zPGC1M-1734041761347-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Thu, 12 Dec 2024 22:16:01 GMT"
            },
            {
              "name": "content-type",
              "value": "text/event-stream; charset=utf-8"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-expose-headers",
              "value": "X-Request-ID"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "324"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "800000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "799109"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "66ms"
            },
            {
              "name": "x-request-id",
              "value": "req_56076d341afc18b04dd48a9444588d6b"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=FaLVT1j5TBDxRp4ZAQgXE6xqcYskA5h4SRrxw20aTAo-1734041761-1.0.1.1-EJKQZ38sv9RZC9UHSQL9YUrnGOpvOq2o47vZXRbZzcXV3JXxnT2if3gorAf4l0fEQJTPNTcEUD2ewsjfJjbLHQ; path=/; expires=Thu, 12-Dec-24 22:46:01 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=V7aMNC7lkz8rpUeTnpKIxrA0HZ1LXQMNsH7W2zPGC1M-1734041761347-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "8f11138cea1694e0-HFA"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1180,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-12-12T22:16:00.694Z",
        "time": 843,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 843
        }
      }
    ],
    "pages": [],
    "version": "1.2"
  }
}
