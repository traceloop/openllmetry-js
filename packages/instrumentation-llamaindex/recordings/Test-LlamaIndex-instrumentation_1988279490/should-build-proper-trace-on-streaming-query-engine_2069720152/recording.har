{
  "log": {
    "_recordingName": "Test LlamaIndex instrumentation/should build proper trace on streaming query engine",
    "creator": {
      "comment": "persister:fs",
      "name": "Polly.JS",
      "version": "6.0.6"
    },
    "entries": [
      {
        "_id": "f551fbadc626e695523e8afb90f57137",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 9656,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "9656"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.38.3"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.38.3"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 465,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"Albert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy.\",\n    \"/*\\n * Copyright Traceloop\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License. * You may obtain a copy of the License at\\n *\\n *      https://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and\\n * limitations under the License.\",\n    \"* See the License for the specific language governing permissions and\\n * limitations under the License. */\\n\\nimport { context } from \\\"@opentelemetry/api\\\";\\nimport { AsyncHooksContextManager } from \\\"@opentelemetry/context-async-hooks\\\";\\nimport { LlamaIndexInstrumentation } from \\\"../src/instrumentation\\\";\\nimport * as assert from \\\"assert\\\";\\nimport {\\n  BasicTracerProvider,\\n  InMemorySpanExporter,\\n  SimpleSpanProcessor,\\n} from \\\"@opentelemetry/sdk-trace-base\\\";\\nimport type * as llamaindexImport from \\\"llamaindex\\\";\\n\\nimport { Polly, setupMocha as setupPolly } from \\\"@pollyjs/core\\\";\\nimport NodeHttpAdapter from \\\"@pollyjs/adapter-node-http\\\";\\nimport FSPersister from \\\"@pollyjs/persister-fs\\\";\\n\\nconst memoryExporter = new InMemorySpanExporter();\\n\\nPolly.register(NodeHttpAdapter);\\nPolly.register(FSPersister);\\n\\ndescribe(\\\"Test LlamaIndex instrumentation\\\", async function () {\\n  const provider = new BasicTracerProvider();\\n  let instrumentation: LlamaIndexInstrumentation;\\n  let contextManager: AsyncHooksContextManager;\\n  let llamaindex: typeof llamaindexImport;\\n\\n  setupPolly({\\n    adapters: [\\\"node-http\\\"],\\n    persister: \\\"fs\\\",\\n    recordIfMissing: process.env.RECORD_MODE === \\\"NEW\\\",\\n    matchRequestsBy: {\\n      headers: false,\\n    },\\n  });\\n\\n  before(() => {\\n    if (process.env.RECORD_MODE !== \\\"NEW\\\") {\\n      process.env.OPENAI_API_KEY = \\\"test\\\";\\n    }\\n\\n    provider.addSpanProcessor(new SimpleSpanProcessor(memoryExporter));\\n    instrumentation = new LlamaIndexInstrumentation();\\n    instrumentation.setTracerProvider(provider);\\n    llamaindex = require(\\\"llamaindex\\\");\\n  });\\n\\n  beforeEach(function () {\\n    contextManager = new AsyncHooksContextManager().enable();\\n    context.setGlobalContextManager(contextManager);\\n\\n    const { server } = this.polly as Polly;\\n    server.any().on(\\\"beforePersist\\\", (_req, recording) => {\\n      recording.request.headers = recording.request.headers.filter(\\n        ({ name }: { name: string }) => name !== \\\"authorization\\\",\\n      );\\n    });\\n  });\\n\\n  afterEach(() => {\\n    memoryExporter.reset();\\n    context.disable();\\n  });\\n\\n  it(\\\"should set attributes in span for LLM instrumentation\\\", async () => {\\n    const model = \\\"gpt-3.5-turbo\\\";\\n    const prompt = \\\"Tell me a joke about OpenTelemetry\\\";\\n    const openai = new llamaindex.OpenAI({ model, temperature: 0 });\\n    const res = await openai.chat({\\n      messages: [{ role: \\\"user\\\", content: prompt }],\\n    });\\n\\n    assert.ok(res);\\n    assert.ok(res.message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    assert.strictEqual(spans.length, 1);\\n    const chatAttributes = spans[0].attributes;\\n\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.system\\\"], \\\"OpenAI\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\");\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.request.model\\\"], model);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.request.top_p\\\"], 1);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.prompt.0.content\\\"], prompt);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.prompt.0.role\\\"], \\\"user\\\");\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.completion.0.role\\\"], \\\"assistant\\\");\\n    assert.strictEqual(\\n      chatAttributes[\\\"gen_ai.completion.0.content\\\"],\\n      res.message.content,\\n    );\\n  });\\n\\n  it(\\\"should set attributes in span for LLM instrumentation in case of streaming response\\\", async () => {\\n    const model = \\\"gpt-3.5-turbo\\\";\\n    const prompt = \\\"Tell me a joke about OpenTelemetry\\\";\\n    const openai = new llamaindex.OpenAI({ model, temperature: 0 });\\n    const res = await openai.chat({\\n      messages: [{ role: \\\"user\\\", content: prompt }],\\n      stream: true,\\n    });\\n\\n    assert.ok(res);\\n    let message = \\\"\\\";\\n    for await (const messageChunk of res) {\\n      if (messageChunk.delta) {\\n        message += messageChunk.delta;\\n      }\\n    }\\n    assert.ok(message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    assert.strictEqual(spans.length, 1);\\n    const chatAttributes = spans[0].attributes;\\n\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.system\\\"], \\\"OpenAI\\\");\\n    assert.strictEqual(chatAttributes[\\\"llm.request.type\\\"], \\\"chat\\\");\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.request.model\\\"], model);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.request.top_p\\\"], 1);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.prompt.0.content\\\"], prompt);\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.prompt.0.role\\\"], \\\"user\\\");\\n    assert.strictEqual(chatAttributes[\\\"gen_ai.completion.0.content\\\"], message);\\n  });\\n\\n  it(\\\"should add span for all instrumented methods\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n    });\\n\\n    assert.ok(result.response);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    const spanNames = spans.map((span) => span.name);\\n\\n    // TODO: Need to figure out why this doesn't get logged\\n    // assert.ok(spanNames.includes(\\\"get_query_embedding.task\\\"));\\n\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"llamaindex.open_ai.chat\\\"));\\n    assert.ok(spanNames.includes(\\\"response_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n\\n    assert.ok(retrieverQueryEngineSpan);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.input\\\"]);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.output\\\"]);\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.input\\\"\\n        ].toString(),\\n      ).kwargs.query,\\n      \\\"Where was albert einstein born?\\\",\\n    );\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.output\\\"\\n        ].toString(),\\n      ).response,\\n      result.response,\\n    );\\n  }).timeout(60000);\\n\\n  it(\\\"should build proper trace on streaming query engine\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n      stream: true,\\n    });\\n\\n    for await (const res of result) {\\n      assert.ok(res);\\n    }\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    // TODO: Need to figure out why this doesn't get logged\\n    // assert.ok(spanNames.includes(\\\"get_query_embedding.task\\\"));\\n\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n    const synthesizeSpan = spans.find(\\n      (span) => span.name === \\\"response_synthesizer.synthesize\\\",\\n    );\\n    const openAIChatSpan = spans.find(\\n      (span) => span.name === \\\"llamaindex.open_ai.chat\\\",\\n    );\\n\\n    assert.strictEqual(\\n      synthesizeSpan?.parentSpanId,\\n      retrieverQueryEngineSpan?.spanContext().spanId,\\n    );\\n    assert.strictEqual(\\n      openAIChatSpan?.parentSpanId,\\n      synthesizeSpan?.spanContext().spanId,\\n    );\\n  }).timeout(60000);\\n});\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 30101,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 30101,
            "text": "[\"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\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-04-29T14:20:37.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "1s.wBscHWXJt_sZXOHupxW0VE2S.kkYWpDu7oA2Y8XM-1714398637-1.0.1.1-bsqFpicMdr_wuuu608IbFIa.cPPY5jBHto9XTvQqjeky_5ydpVTcMb7AZQ9vZZcf7X0SYOlhLQF_Hah4DZUx5g"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "kw9ZSRl_i8dREd1tUiUN3Y31lYrv6Qlvnye6o5gQyhQ-1714398637356-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Apr 2024 13:50:37 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "67"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_44525822082ded1a3cc71cbcc212e772"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=1s.wBscHWXJt_sZXOHupxW0VE2S.kkYWpDu7oA2Y8XM-1714398637-1.0.1.1-bsqFpicMdr_wuuu608IbFIa.cPPY5jBHto9XTvQqjeky_5ydpVTcMb7AZQ9vZZcf7X0SYOlhLQF_Hah4DZUx5g; path=/; expires=Mon, 29-Apr-24 14:20:37 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=kw9ZSRl_i8dREd1tUiUN3Y31lYrv6Qlvnye6o5gQyhQ-1714398637356-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "87bfc319be3a4bf7-MXP"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1066,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-04-29T13:50:36.989Z",
        "time": 638,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 638
        }
      },
      {
        "_id": "35e4e3d1b757b5697226d1cf6efde888",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 95,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "95"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.38.3"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.38.3"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 463,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"Where was albert einstein born?\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 10217,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 10217,
            "text": "[\"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\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-04-29T14:20:37.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "rWZfVLF42LlFcOBaRbD8isMxUU7IOCVr1SILEumTfFA-1714398637-1.0.1.1-aRGg8q9xvrgIGL9Tty2qvxbHELTwTZnTOLog6mdFKs.SJusVMJUKsMMC4h4dD1AU0qFSLY1UehDIaVrZZFR8VA"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "xqa5SyQlqUs5XDRzcVj2engcIsk5GCi8yj0CbVeA_yQ-1714398637973-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Apr 2024 13:50:37 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "22"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_32c202a995296498ee0f7311b239be36"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=rWZfVLF42LlFcOBaRbD8isMxUU7IOCVr1SILEumTfFA-1714398637-1.0.1.1-aRGg8q9xvrgIGL9Tty2qvxbHELTwTZnTOLog6mdFKs.SJusVMJUKsMMC4h4dD1AU0qFSLY1UehDIaVrZZFR8VA; path=/; expires=Mon, 29-Apr-24 14:20:37 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=xqa5SyQlqUs5XDRzcVj2engcIsk5GCi8yj0CbVeA_yQ-1714398637973-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "87bfc31dbc6a4bf7-MXP"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1066,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-04-29T13:50:37.644Z",
        "time": 426,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 426
        }
      },
      {
        "_id": "b4d91742ad75611d7acc306ee8971613",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 1356,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "1356"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.38.3"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.38.3"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v18.17.1"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 471,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"gpt-3.5-turbo\",\n  \"temperature\": 0.1,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Context information is below.\\n---------------------\\nAlbert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy. /*\\n * Copyright Traceloop\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License. * You may obtain a copy of the License at\\n *\\n *      https://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and\\n * limitations under the License.\\n---------------------\\nGiven the context information and not prior knowledge, answer the query.\\nQuery: Where was albert einstein born?\\nAnswer:\"\n    }\n  ],\n  \"top_p\": 1,\n  \"stream\": true\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/chat/completions"
        },
        "response": {
          "bodySize": 3172,
          "content": {
            "mimeType": "text/event-stream",
            "size": 3172,
            "text": "data: {\"id\":\"chatcmpl-9JLgsizDpGJ4XSXeeQMxsWdU1VlGD\",\"object\":\"chat.completion.chunk\",\"created\":1714398638,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_3b956da36b\",\"choices\":[{\"index\":0,\"delta\":{\"role\":\"assistant\",\"content\":\"\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-9JLgsizDpGJ4XSXeeQMxsWdU1VlGD\",\"object\":\"chat.completion.chunk\",\"created\":1714398638,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_3b956da36b\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"Albert\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-9JLgsizDpGJ4XSXeeQMxsWdU1VlGD\",\"object\":\"chat.completion.chunk\",\"created\":1714398638,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_3b956da36b\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" Einstein\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-9JLgsizDpGJ4XSXeeQMxsWdU1VlGD\",\"object\":\"chat.completion.chunk\",\"created\":1714398638,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_3b956da36b\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" was\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-9JLgsizDpGJ4XSXeeQMxsWdU1VlGD\",\"object\":\"chat.completion.chunk\",\"created\":1714398638,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_3b956da36b\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" born\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-9JLgsizDpGJ4XSXeeQMxsWdU1VlGD\",\"object\":\"chat.completion.chunk\",\"created\":1714398638,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_3b956da36b\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" in\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-9JLgsizDpGJ4XSXeeQMxsWdU1VlGD\",\"object\":\"chat.completion.chunk\",\"created\":1714398638,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_3b956da36b\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" Ul\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-9JLgsizDpGJ4XSXeeQMxsWdU1VlGD\",\"object\":\"chat.completion.chunk\",\"created\":1714398638,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_3b956da36b\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"m\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-9JLgsizDpGJ4XSXeeQMxsWdU1VlGD\",\"object\":\"chat.completion.chunk\",\"created\":1714398638,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_3b956da36b\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\",\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-9JLgsizDpGJ4XSXeeQMxsWdU1VlGD\",\"object\":\"chat.completion.chunk\",\"created\":1714398638,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_3b956da36b\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" Germany\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-9JLgsizDpGJ4XSXeeQMxsWdU1VlGD\",\"object\":\"chat.completion.chunk\",\"created\":1714398638,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_3b956da36b\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\".\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-9JLgsizDpGJ4XSXeeQMxsWdU1VlGD\",\"object\":\"chat.completion.chunk\",\"created\":1714398638,\"model\":\"gpt-3.5-turbo-0125\",\"system_fingerprint\":\"fp_3b956da36b\",\"choices\":[{\"index\":0,\"delta\":{},\"logprobs\":null,\"finish_reason\":\"stop\"}]}\n\ndata: [DONE]\n\n"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-04-29T14:20:38.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "Zl69icuMXEggGGzKprzV_r0jQKu6X3yVKmSnoduFHVQ-1714398638-1.0.1.1-Ku3BsvvyIJzPaWS0qH1E_pADiDvJuy8QZ_ovZmz_FLoWkTm8B0hziQ8oDI6L.hQN_HCuGgqf0yzKLS965yrf5A"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "bk6nTbCjTvap3A.jz_L8rjXVNe3pVIPR7hSQYJqv1sE-1714398638821-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 29 Apr 2024 13:50:38 GMT"
            },
            {
              "name": "content-type",
              "value": "text/event-stream"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "cache-control",
              "value": "no-cache, must-revalidate"
            },
            {
              "name": "openai-model",
              "value": "gpt-3.5-turbo-0125"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "452"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=15724800; includeSubDomains"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "160000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "159689"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "116ms"
            },
            {
              "name": "x-request-id",
              "value": "req_7828d91fcb306c2002a50c7a434f8432"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=Zl69icuMXEggGGzKprzV_r0jQKu6X3yVKmSnoduFHVQ-1714398638-1.0.1.1-Ku3BsvvyIJzPaWS0qH1E_pADiDvJuy8QZ_ovZmz_FLoWkTm8B0hziQ8oDI6L.hQN_HCuGgqf0yzKLS965yrf5A; path=/; expires=Mon, 29-Apr-24 14:20:38 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=bk6nTbCjTvap3A.jz_L8rjXVNe3pVIPR7hSQYJqv1sE-1714398638821-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "87bfc32078824bf7-MXP"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1187,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-04-29T13:50:38.085Z",
        "time": 955,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 955
        }
      }
    ],
    "pages": [],
    "version": "1.2"
  }
}
