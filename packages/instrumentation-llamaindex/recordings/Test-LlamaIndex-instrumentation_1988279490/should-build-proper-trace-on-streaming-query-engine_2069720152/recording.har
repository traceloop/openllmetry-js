{
  "log": {
    "_recordingName": "Test LlamaIndex instrumentation/should build proper trace on streaming query engine",
    "creator": {
      "comment": "persister:fs",
      "name": "Polly.JS",
      "version": "6.0.6"
    },
    "entries": [
      {
        "_id": "35e4e3d1b757b5697226d1cf6efde888",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 95,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "95"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v20.9.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-retry-count",
              "value": "0"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 490,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"Where was albert einstein born?\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 10158,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 10158,
            "text": "[\"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\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-12-16T14:13:53.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "S0MZ4uN5odsUjO7c6JeotRplgADWLqW9EurrwwCmCLg-1734356633-1.0.1.1-L5pIn0N87dEh60I9gTQaTrfsOcUkAVAZ2JGkxe5EtH4UlPgMvXSPsoVakMZR9FbhUR0.hm8hbYO1GjraxrssKg"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "Gzg.To3y74tPax.nz2U3hVEPNxOE2cGoLtM682qOCx0-1734356633680-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 16 Dec 2024 13:43:53 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "access-control-expose-headers",
              "value": "X-Request-ID"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "42"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_ecf47a222e09ed3f6d160884a784c85c"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=S0MZ4uN5odsUjO7c6JeotRplgADWLqW9EurrwwCmCLg-1734356633-1.0.1.1-L5pIn0N87dEh60I9gTQaTrfsOcUkAVAZ2JGkxe5EtH4UlPgMvXSPsoVakMZR9FbhUR0.hm8hbYO1GjraxrssKg; path=/; expires=Mon, 16-Dec-24 14:13:53 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=Gzg.To3y74tPax.nz2U3hVEPNxOE2cGoLtM682qOCx0-1734356633680-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "8f2f1adfcd0b44d7-ATL"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1153,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-12-16T13:43:53.182Z",
        "time": 318,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 318
        }
      },
      {
        "_id": "9a2bbe828ba1c64640a06a7209f41250",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 8702,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "8702"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v20.9.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-retry-count",
              "value": "0"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 492,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"text-embedding-ada-002\",\n  \"input\": [\n    \"file_name: essay.txt\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/essay.txt\\n\\nAlbert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy.\",\n    \"file_name: instrumentation.test.ts\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/instrumentation.test.ts\\n\\n/*\\n * Copyright Traceloop\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.* You may obtain a copy of the License at\\n *\\n *      https://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.* See the License for the specific language governing permissions and\\n * limitations under the License.*/\\n\\nimport { context } from \\\"@opentelemetry/api\\\";\\nimport { AsyncHooksContextManager } from \\\"@opentelemetry/context-async-hooks\\\";\\nimport { LlamaIndexInstrumentation } from \\\"../src/instrumentation\\\";\\nimport * as assert from \\\"assert\\\";\\nimport {\\n  BasicTracerProvider,\\n  InMemorySpanExporter,\\n  SimpleSpanProcessor,\\n} from \\\"@opentelemetry/sdk-trace-base\\\";\\nimport type * as llamaindexImport from \\\"llamaindex\\\";\\n\\nimport { Polly, setupMocha as setupPolly } from \\\"@pollyjs/core\\\";\\nimport NodeHttpAdapter from \\\"@pollyjs/adapter-node-http\\\";\\nimport FSPersister from \\\"@pollyjs/persister-fs\\\";\\n\\nconst memoryExporter = new InMemorySpanExporter();\\n\\nPolly.register(NodeHttpAdapter);\\nPolly.register(FSPersister);\\n\\ndescribe(\\\"Test LlamaIndex instrumentation\\\", async function () {\\n  const provider = new BasicTracerProvider();\\n  let instrumentation: LlamaIndexInstrumentation;\\n  let contextManager: AsyncHooksContextManager;\\n  let llamaindex: typeof llamaindexImport;\\n\\n  setupPolly({\\n    adapters: [\\\"node-http\\\"],\\n    persister: \\\"fs\\\",\\n    recordIfMissing: process.env.RECORD_MODE === \\\"NEW\\\",\\n    matchRequestsBy: {\\n      headers: false,\\n    },\\n  });\\n\\n  before(() => {\\n    if (process.env.RECORD_MODE !== \\\"NEW\\\") {\\n      process.env.OPENAI_API_KEY = \\\"test\\\";\\n    }\\n\\n    provider.addSpanProcessor(new SimpleSpanProcessor(memoryExporter));\\n    instrumentation = new LlamaIndexInstrumentation();\\n    instrumentation.setTracerProvider(provider);\\n    llamaindex = require(\\\"llamaindex\\\");\\n  });\\n\\n  beforeEach(function () {\\n    contextManager = new AsyncHooksContextManager().enable();\\n    context.setGlobalContextManager(contextManager);\\n\\n    const { server } = this.polly as Polly;\\n    server.any().on(\\\"beforePersist\\\", (_req, recording) => {\\n      recording.request.headers = recording.request.headers.filter(\\n        ({ name }: { name: string }) => name !== \\\"authorization\\\",\\n      );\\n    });\\n  });\\n\\n  afterEach(() => {\\n    memoryExporter.reset();\\n    context.disable();\\n  });\\n\\n  it(\\\"should add span for all instrumented methods\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n    });\\n\\n    assert.ok(result.message);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n    const spanNames = spans.map((span) => span.name);\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n\\n    assert.ok(spanNames.includes(\\\"open_ai_embedding.get_query_embedding\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"base_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.query\\\"));\\n\\n    assert.ok(retrieverQueryEngineSpan);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.input\\\"]);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.\",\n    \"file_name: instrumentation.test.ts\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/instrumentation.test.ts\\n\\nmessage);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n    const spanNames = spans.map((span) => span.name);\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n\\n    assert.ok(spanNames.includes(\\\"open_ai_embedding.get_query_embedding\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"base_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.query\\\"));\\n\\n    assert.ok(retrieverQueryEngineSpan);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.input\\\"]);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.output\\\"]);\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.input\\\"\\n        ].toString(),\\n      ).kwargs.query,\\n      \\\"Where was albert einstein born?\\\",\\n    );\\n    assert.deepStrictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.output\\\"\\n        ].toString(),\\n      ).message,\\n      result.message,\\n    );\\n  }).timeout(60000);\\n\\n  it(\\\"should build proper trace on streaming query engine\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n      stream: true,\\n    });\\n\\n    for await (const res of result) {\\n      assert.ok(res);\\n    }\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    const retrieverQueryEngineQuerySpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n    const synthesizeSpan = spans.find(\\n      (span) => span.name === \\\"base_synthesizer.synthesize\\\",\\n    );\\n    const retrieverQueryEngineRetrieveSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.retrieve\\\",\\n    );\\n    const openAIEmbeddingSpan = spans.find(\\n      (span) => span.name === \\\"open_ai_embedding.get_query_embedding\\\",\\n    );\\n    const vectorIndexRetrieverSpan = spans.find(\\n      (span) => span.name === \\\"vector_index_retriever.retrieve\\\",\\n    );\\n\\n    assert.strictEqual(\\n      synthesizeSpan?.parentSpanId,\\n      retrieverQueryEngineQuerySpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      retrieverQueryEngineRetrieveSpan?.parentSpanId,\\n      retrieverQueryEngineQuerySpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      vectorIndexRetrieverSpan?.parentSpanId,\\n      retrieverQueryEngineRetrieveSpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      openAIEmbeddingSpan?.parentSpanId,\\n      vectorIndexRetrieverSpan?.spanContext().spanId,\\n    );\\n  }).timeout(60000);\\n});\"\n  ]\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/embeddings"
        },
        "response": {
          "bodySize": 30111,
          "content": {
            "encoding": "base64",
            "mimeType": "application/json",
            "size": 30111,
            "text": "[\"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\"]"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-12-16T14:17:55.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "EAy9xAKMQCjBwfNzpJmfFvCweyNtoMF36FwIbqjfbu8-1734356875-1.0.1.1-JveR0_47rrqt.m7rGyDJ._jtQIMMGRa92bswFIAPbPFv8QsePDT4mBsxyinfUT0wmPTixYMAuM_nqRbZCCfE6w"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "cX8BDe6FIVuN.t4SpkikpzM8_EcHhqZ1fdy5PG_5_Bs-1734356875221-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 16 Dec 2024 13:47:55 GMT"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "access-control-expose-headers",
              "value": "X-Request-ID"
            },
            {
              "name": "openai-model",
              "value": "text-embedding-ada-002"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "97"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-request-id",
              "value": "req_e9e521a39b65f618e63470f2bb6b3c94"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=EAy9xAKMQCjBwfNzpJmfFvCweyNtoMF36FwIbqjfbu8-1734356875-1.0.1.1-JveR0_47rrqt.m7rGyDJ._jtQIMMGRa92bswFIAPbPFv8QsePDT4mBsxyinfUT0wmPTixYMAuM_nqRbZCCfE6w; path=/; expires=Mon, 16-Dec-24 14:17:55 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=cX8BDe6FIVuN.t4SpkikpzM8_EcHhqZ1fdy5PG_5_Bs-1734356875221-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "8f2f20c53b42bd1b-ATL"
            },
            {
              "name": "content-encoding",
              "value": "gzip"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1153,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-12-16T13:47:54.682Z",
        "time": 373,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 373
        }
      },
      {
        "_id": "22eefc129a940be012c806dc8843dcb1",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 4517,
          "cookies": [],
          "headers": [
            {
              "_fromType": "array",
              "name": "content-length",
              "value": "4517"
            },
            {
              "_fromType": "array",
              "name": "accept",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "content-type",
              "value": "application/json"
            },
            {
              "_fromType": "array",
              "name": "user-agent",
              "value": "OpenAI/JS 4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-lang",
              "value": "js"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-package-version",
              "value": "4.76.2"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-os",
              "value": "MacOS"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-arch",
              "value": "arm64"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime",
              "value": "node"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-runtime-version",
              "value": "v20.9.0"
            },
            {
              "_fromType": "array",
              "name": "x-stainless-retry-count",
              "value": "0"
            },
            {
              "_fromType": "array",
              "name": "accept-encoding",
              "value": "gzip,deflate"
            },
            {
              "name": "host",
              "value": "api.openai.com"
            }
          ],
          "headersSize": 498,
          "httpVersion": "HTTP/1.1",
          "method": "POST",
          "postData": {
            "mimeType": "application/json",
            "params": [],
            "text": "{\n  \"model\": \"gpt-4o\",\n  \"temperature\": 0.1,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"Context information is below.\\n---------------------\\nfile_name: essay.txt\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/essay.txt\\n\\nAlbert Einstein: A Genius Unveiled\\n\\nAlbert Einstein, renowned as the father of modern physics, remains an emblematic figure in the annals of science. Born in Ulm, Germany, in 1879, his intellectual prowess was evident from an early age. However, it was his groundbreaking theory of relativity, encapsulated in the equation E=mc^2, that revolutionized our understanding of space, time, and energy.\\n\\nfile_name: instrumentation.test.ts\\nfile_path: /Users/galklm/development/openllmetry-js/packages/instrumentation-llamaindex/test/instrumentation.test.ts\\n\\nmessage);\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n    const spanNames = spans.map((span) => span.name);\\n    const retrieverQueryEngineSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n\\n    assert.ok(spanNames.includes(\\\"open_ai_embedding.get_query_embedding\\\"));\\n    assert.ok(spanNames.includes(\\\"vector_index_retriever.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.retrieve\\\"));\\n    assert.ok(spanNames.includes(\\\"base_synthesizer.synthesize\\\"));\\n    assert.ok(spanNames.includes(\\\"retriever_query_engine.query\\\"));\\n\\n    assert.ok(retrieverQueryEngineSpan);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.input\\\"]);\\n    assert.ok(retrieverQueryEngineSpan.attributes[\\\"traceloop.entity.output\\\"]);\\n    assert.strictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.input\\\"\\n        ].toString(),\\n      ).kwargs.query,\\n      \\\"Where was albert einstein born?\\\",\\n    );\\n    assert.deepStrictEqual(\\n      JSON.parse(\\n        retrieverQueryEngineSpan.attributes[\\n          \\\"traceloop.entity.output\\\"\\n        ].toString(),\\n      ).message,\\n      result.message,\\n    );\\n  }).timeout(60000);\\n\\n  it(\\\"should build proper trace on streaming query engine\\\", async () => {\\n    const directoryReader = new llamaindex.SimpleDirectoryReader();\\n    const documents = await directoryReader.loadData({ directoryPath: \\\"test\\\" });\\n    const embedModel = new llamaindex.OpenAIEmbedding();\\n    const vectorStore = new llamaindex.SimpleVectorStore();\\n\\n    const serviceContext = llamaindex.serviceContextFromDefaults({\\n      embedModel,\\n    });\\n    const storageContext = await llamaindex.storageContextFromDefaults({\\n      vectorStore,\\n    });\\n\\n    const index = await llamaindex.VectorStoreIndex.fromDocuments(documents, {\\n      storageContext,\\n      serviceContext,\\n    });\\n\\n    const queryEngine = index.asQueryEngine();\\n\\n    const result = await queryEngine.query({\\n      query: \\\"Where was albert einstein born?\\\",\\n      stream: true,\\n    });\\n\\n    for await (const res of result) {\\n      assert.ok(res);\\n    }\\n\\n    const spans = memoryExporter.getFinishedSpans();\\n\\n    const retrieverQueryEngineQuerySpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.query\\\",\\n    );\\n    const synthesizeSpan = spans.find(\\n      (span) => span.name === \\\"base_synthesizer.synthesize\\\",\\n    );\\n    const retrieverQueryEngineRetrieveSpan = spans.find(\\n      (span) => span.name === \\\"retriever_query_engine.retrieve\\\",\\n    );\\n    const openAIEmbeddingSpan = spans.find(\\n      (span) => span.name === \\\"open_ai_embedding.get_query_embedding\\\",\\n    );\\n    const vectorIndexRetrieverSpan = spans.find(\\n      (span) => span.name === \\\"vector_index_retriever.retrieve\\\",\\n    );\\n\\n    assert.strictEqual(\\n      synthesizeSpan?.parentSpanId,\\n      retrieverQueryEngineQuerySpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      retrieverQueryEngineRetrieveSpan?.parentSpanId,\\n      retrieverQueryEngineQuerySpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      vectorIndexRetrieverSpan?.parentSpanId,\\n      retrieverQueryEngineRetrieveSpan?.spanContext().spanId,\\n    );\\n\\n    assert.strictEqual(\\n      openAIEmbeddingSpan?.parentSpanId,\\n      vectorIndexRetrieverSpan?.spanContext().spanId,\\n    );\\n  }).timeout(60000);\\n});\\n---------------------\\nGiven the context information and not prior knowledge, answer the query.\\nQuery: Where was albert einstein born?\\nAnswer:\"\n    }\n  ],\n  \"top_p\": 1,\n  \"stream\": true\n}"
          },
          "queryString": [],
          "url": "https://api.openai.com/v1/chat/completions"
        },
        "response": {
          "bodySize": 3175,
          "content": {
            "mimeType": "text/event-stream; charset=utf-8",
            "size": 3175,
            "text": "data: {\"id\":\"chatcmpl-Af5jvSVjOGoIh5ujBUbo6TsJa5IfH\",\"object\":\"chat.completion.chunk\",\"created\":1734356875,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_a79d8dac1f\",\"choices\":[{\"index\":0,\"delta\":{\"role\":\"assistant\",\"content\":\"\",\"refusal\":null},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-Af5jvSVjOGoIh5ujBUbo6TsJa5IfH\",\"object\":\"chat.completion.chunk\",\"created\":1734356875,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_a79d8dac1f\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"Albert\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-Af5jvSVjOGoIh5ujBUbo6TsJa5IfH\",\"object\":\"chat.completion.chunk\",\"created\":1734356875,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_a79d8dac1f\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" Einstein\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-Af5jvSVjOGoIh5ujBUbo6TsJa5IfH\",\"object\":\"chat.completion.chunk\",\"created\":1734356875,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_a79d8dac1f\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" was\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-Af5jvSVjOGoIh5ujBUbo6TsJa5IfH\",\"object\":\"chat.completion.chunk\",\"created\":1734356875,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_a79d8dac1f\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" born\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-Af5jvSVjOGoIh5ujBUbo6TsJa5IfH\",\"object\":\"chat.completion.chunk\",\"created\":1734356875,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_a79d8dac1f\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" in\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-Af5jvSVjOGoIh5ujBUbo6TsJa5IfH\",\"object\":\"chat.completion.chunk\",\"created\":1734356875,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_a79d8dac1f\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" Ul\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-Af5jvSVjOGoIh5ujBUbo6TsJa5IfH\",\"object\":\"chat.completion.chunk\",\"created\":1734356875,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_a79d8dac1f\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"m\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-Af5jvSVjOGoIh5ujBUbo6TsJa5IfH\",\"object\":\"chat.completion.chunk\",\"created\":1734356875,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_a79d8dac1f\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\",\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-Af5jvSVjOGoIh5ujBUbo6TsJa5IfH\",\"object\":\"chat.completion.chunk\",\"created\":1734356875,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_a79d8dac1f\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" Germany\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-Af5jvSVjOGoIh5ujBUbo6TsJa5IfH\",\"object\":\"chat.completion.chunk\",\"created\":1734356875,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_a79d8dac1f\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\".\"},\"logprobs\":null,\"finish_reason\":null}]}\n\ndata: {\"id\":\"chatcmpl-Af5jvSVjOGoIh5ujBUbo6TsJa5IfH\",\"object\":\"chat.completion.chunk\",\"created\":1734356875,\"model\":\"gpt-4o-2024-08-06\",\"system_fingerprint\":\"fp_a79d8dac1f\",\"choices\":[{\"index\":0,\"delta\":{},\"logprobs\":null,\"finish_reason\":\"stop\"}]}\n\ndata: [DONE]\n\n"
          },
          "cookies": [
            {
              "domain": ".api.openai.com",
              "expires": "2024-12-16T14:17:55.000Z",
              "httpOnly": true,
              "name": "__cf_bm",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "UqPaETzNYLvmonGti5TYXTdYzeo_bU6x3pBkv1ry96E-1734356875-1.0.1.1-.0ckT_ht5USBjd20P78jnF5Q54ySws6ZGr0Cidc2iBTXgZZK9lI35VZBCNPRCgf8KWJj50myKXd8eGsT.DXQCg"
            },
            {
              "domain": ".api.openai.com",
              "httpOnly": true,
              "name": "_cfuvid",
              "path": "/",
              "sameSite": "None",
              "secure": true,
              "value": "PMGXMUqWgIPuecGb37ilDoW_HAMdwGbRGAF2aZ0A86w-1734356875920-0.0.1.1-604800000"
            }
          ],
          "headers": [
            {
              "name": "date",
              "value": "Mon, 16 Dec 2024 13:47:55 GMT"
            },
            {
              "name": "content-type",
              "value": "text/event-stream; charset=utf-8"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "keep-alive"
            },
            {
              "name": "access-control-expose-headers",
              "value": "X-Request-ID"
            },
            {
              "name": "openai-organization",
              "value": "traceloop"
            },
            {
              "name": "openai-processing-ms",
              "value": "336"
            },
            {
              "name": "openai-version",
              "value": "2020-10-01"
            },
            {
              "name": "x-ratelimit-limit-requests",
              "value": "5000"
            },
            {
              "name": "x-ratelimit-limit-tokens",
              "value": "800000"
            },
            {
              "name": "x-ratelimit-remaining-requests",
              "value": "4999"
            },
            {
              "name": "x-ratelimit-remaining-tokens",
              "value": "798930"
            },
            {
              "name": "x-ratelimit-reset-requests",
              "value": "12ms"
            },
            {
              "name": "x-ratelimit-reset-tokens",
              "value": "80ms"
            },
            {
              "name": "x-request-id",
              "value": "req_7cc14e1bec22f326ba34ba69dce3285e"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "name": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "__cf_bm=UqPaETzNYLvmonGti5TYXTdYzeo_bU6x3pBkv1ry96E-1734356875-1.0.1.1-.0ckT_ht5USBjd20P78jnF5Q54ySws6ZGr0Cidc2iBTXgZZK9lI35VZBCNPRCgf8KWJj50myKXd8eGsT.DXQCg; path=/; expires=Mon, 16-Dec-24 14:17:55 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "_fromType": "array",
              "name": "set-cookie",
              "value": "_cfuvid=PMGXMUqWgIPuecGb37ilDoW_HAMdwGbRGAF2aZ0A86w-1734356875920-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "cf-ray",
              "value": "8f2f20c7be8bbd1b-ATL"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "headersSize": 1180,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2024-12-16T13:47:55.080Z",
        "time": 754,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 754
        }
      }
    ],
    "pages": [],
    "version": "1.2"
  }
}
